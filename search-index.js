var N = null;var searchIndex = {};
searchIndex["cfg_if"]={"doc":"A macro for defining `#[cfg]` if-else statements.","items":[[14,"cfg_if","cfg_if","",N,N]],"paths":[]};
searchIndex["packed_simd"]={"doc":"Portable packed SIMD vectors","items":[[3,"Simd","packed_simd","Packed SIMD vector type.",N,N],[3,"LexicographicallyOrdered","","Wrapper over `T` implementing a lexicoraphical order via the `PartialOrd` and/or `Ord` traits.",N,N],[3,"m8","","8-bit wide mask.",N,N],[3,"m16","","16-bit wide mask.",N,N],[3,"m32","","32-bit wide mask.",N,N],[3,"m64","","64-bit wide mask.",N,N],[3,"m128","","128-bit wide mask.",N,N],[3,"msize","","isize-wide mask.",N,N],[11,"clone","","",0,[[["self"]],["m8"]]],[11,"new","","Instantiate a mask with `value`",0,[[["bool"]],["self"]]],[11,"test","","Test if the mask is set",0,[[["self"]],["bool"]]],[11,"default","","",0,[[],["self"]]],[11,"eq","","",0,[[["self"],["self"]],["bool"]]],[11,"ne","","",0,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["self"]],["bool"]]],[11,"gt","","",0,[[["self"],["self"]],["bool"]]],[11,"le","","",0,[[["self"],["self"]],["bool"]]],[11,"ge","","",0,[[["self"],["self"]],["bool"]]],[11,"cmp","","",0,[[["self"],["self"]],["ordering"]]],[11,"hash","","",0,[[["self"],["h"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",1,[[["self"]],["m16"]]],[11,"new","","Instantiate a mask with `value`",1,[[["bool"]],["self"]]],[11,"test","","Test if the mask is set",1,[[["self"]],["bool"]]],[11,"default","","",1,[[],["self"]]],[11,"eq","","",1,[[["self"],["self"]],["bool"]]],[11,"ne","","",1,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["self"]],["bool"]]],[11,"gt","","",1,[[["self"],["self"]],["bool"]]],[11,"le","","",1,[[["self"],["self"]],["bool"]]],[11,"ge","","",1,[[["self"],["self"]],["bool"]]],[11,"cmp","","",1,[[["self"],["self"]],["ordering"]]],[11,"hash","","",1,[[["self"],["h"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",2,[[["self"]],["m32"]]],[11,"new","","Instantiate a mask with `value`",2,[[["bool"]],["self"]]],[11,"test","","Test if the mask is set",2,[[["self"]],["bool"]]],[11,"default","","",2,[[],["self"]]],[11,"eq","","",2,[[["self"],["self"]],["bool"]]],[11,"ne","","",2,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",2,[[["self"],["self"]],["bool"]]],[11,"gt","","",2,[[["self"],["self"]],["bool"]]],[11,"le","","",2,[[["self"],["self"]],["bool"]]],[11,"ge","","",2,[[["self"],["self"]],["bool"]]],[11,"cmp","","",2,[[["self"],["self"]],["ordering"]]],[11,"hash","","",2,[[["self"],["h"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",3,[[["self"]],["m64"]]],[11,"new","","Instantiate a mask with `value`",3,[[["bool"]],["self"]]],[11,"test","","Test if the mask is set",3,[[["self"]],["bool"]]],[11,"default","","",3,[[],["self"]]],[11,"eq","","",3,[[["self"],["self"]],["bool"]]],[11,"ne","","",3,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",3,[[["self"],["self"]],["bool"]]],[11,"gt","","",3,[[["self"],["self"]],["bool"]]],[11,"le","","",3,[[["self"],["self"]],["bool"]]],[11,"ge","","",3,[[["self"],["self"]],["bool"]]],[11,"cmp","","",3,[[["self"],["self"]],["ordering"]]],[11,"hash","","",3,[[["self"],["h"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",4,[[["self"]],["m128"]]],[11,"new","","Instantiate a mask with `value`",4,[[["bool"]],["self"]]],[11,"test","","Test if the mask is set",4,[[["self"]],["bool"]]],[11,"default","","",4,[[],["self"]]],[11,"eq","","",4,[[["self"],["self"]],["bool"]]],[11,"ne","","",4,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["self"]],["bool"]]],[11,"gt","","",4,[[["self"],["self"]],["bool"]]],[11,"le","","",4,[[["self"],["self"]],["bool"]]],[11,"ge","","",4,[[["self"],["self"]],["bool"]]],[11,"cmp","","",4,[[["self"],["self"]],["ordering"]]],[11,"hash","","",4,[[["self"],["h"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",5,[[["self"]],["msize"]]],[11,"new","","Instantiate a mask with `value`",5,[[["bool"]],["self"]]],[11,"test","","Test if the mask is set",5,[[["self"]],["bool"]]],[11,"default","","",5,[[],["self"]]],[11,"eq","","",5,[[["self"],["self"]],["bool"]]],[11,"ne","","",5,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",5,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",5,[[["self"],["self"]],["bool"]]],[11,"gt","","",5,[[["self"],["self"]],["bool"]]],[11,"le","","",5,[[["self"],["self"]],["bool"]]],[11,"ge","","",5,[[["self"],["self"]],["bool"]]],[11,"cmp","","",5,[[["self"],["self"]],["ordering"]]],[11,"hash","","",5,[[["self"],["h"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["self"]],["bool"]]],[11,"le","","",6,[[["self"],["self"]],["bool"]]],[11,"ge","","",6,[[["self"],["self"]],["bool"]]],[11,"gt","","",6,[[["self"],["self"]],["bool"]]],[11,"cmp","","",6,[[["self"],["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[6,"i8x2","","A 16-bit vector with 2 `i8` lanes.",N,N],[6,"u8x2","","A 16-bit vector with 2 `u8` lanes.",N,N],[6,"m8x2","","A 16-bit vector mask with 2 `m8` lanes.",N,N],[6,"i8x4","","A 32-bit vector with 4 `i8` lanes.",N,N],[6,"u8x4","","A 32-bit vector with 4 `u8` lanes.",N,N],[6,"m8x4","","A 32-bit vector mask with 4 `m8` lanes.",N,N],[6,"i16x2","","A 32-bit vector with 2 `i16` lanes.",N,N],[6,"u16x2","","A 32-bit vector with 2 `u16` lanes.",N,N],[6,"m16x2","","A 32-bit vector mask with 2 `m16` lanes.",N,N],[6,"i8x8","","A 64-bit vector with 8 `i8` lanes.",N,N],[6,"u8x8","","A 64-bit vector with 8 `u8` lanes.",N,N],[6,"m8x8","","A 64-bit vector mask with 8 `m8` lanes.",N,N],[6,"i16x4","","A 64-bit vector with 4 `i16` lanes.",N,N],[6,"u16x4","","A 64-bit vector with 4 `u16` lanes.",N,N],[6,"m16x4","","A 64-bit vector mask with 4 `m16` lanes.",N,N],[6,"i32x2","","A 64-bit vector with 2 `i32` lanes.",N,N],[6,"u32x2","","A 64-bit vector with 2 `u32` lanes.",N,N],[6,"m32x2","","A 64-bit vector mask with 2 `m32` lanes.",N,N],[6,"f32x2","","A 64-bit vector with 2 `f32` lanes.",N,N],[6,"i8x16","","A 128-bit vector with 16 `i8` lanes.",N,N],[6,"u8x16","","A 128-bit vector with 16 `u8` lanes.",N,N],[6,"m8x16","","A 128-bit vector mask with 16 `m8` lanes.",N,N],[6,"i16x8","","A 128-bit vector with 8 `i16` lanes.",N,N],[6,"u16x8","","A 128-bit vector with 8 `u16` lanes.",N,N],[6,"m16x8","","A 128-bit vector mask with 8 `m16` lanes.",N,N],[6,"i32x4","","A 128-bit vector with 4 `i32` lanes.",N,N],[6,"u32x4","","A 128-bit vector with 4 `u32` lanes.",N,N],[6,"f32x4","","A 128-bit vector with 4 `f32` lanes.",N,N],[6,"m32x4","","A 128-bit vector mask with 4 `m32` lanes.",N,N],[6,"i64x2","","A 128-bit vector with 2 `i64` lanes.",N,N],[6,"u64x2","","A 128-bit vector with 2 `u64` lanes.",N,N],[6,"f64x2","","A 128-bit vector with 2 `f64` lanes.",N,N],[6,"m64x2","","A 128-bit vector mask with 2 `m64` lanes.",N,N],[6,"i128x1","","A 128-bit vector with 1 `i128` lane.",N,N],[6,"u128x1","","A 128-bit vector with 1 `u128` lane.",N,N],[6,"m128x1","","A 128-bit vector mask with 1 `m128` lane.",N,N],[6,"i8x32","","A 256-bit vector with 32 `i8` lanes.",N,N],[6,"u8x32","","A 256-bit vector with 32 `u8` lanes.",N,N],[6,"m8x32","","A 256-bit vector mask with 32 `m8` lanes.",N,N],[6,"i16x16","","A 256-bit vector with 16 `i16` lanes.",N,N],[6,"u16x16","","A 256-bit vector with 16 `u16` lanes.",N,N],[6,"m16x16","","A 256-bit vector mask with 16 `m16` lanes.",N,N],[6,"i32x8","","A 256-bit vector with 8 `i32` lanes.",N,N],[6,"u32x8","","A 256-bit vector with 8 `u32` lanes.",N,N],[6,"f32x8","","A 256-bit vector with 8 `f32` lanes.",N,N],[6,"m32x8","","A 256-bit vector mask with 8 `m32` lanes.",N,N],[6,"i64x4","","A 256-bit vector with 4 `i64` lanes.",N,N],[6,"u64x4","","A 256-bit vector with 4 `u64` lanes.",N,N],[6,"f64x4","","A 256-bit vector with 4 `f64` lanes.",N,N],[6,"m64x4","","A 256-bit vector mask with 4 `m64` lanes.",N,N],[6,"i128x2","","A 256-bit vector with 2 `i128` lanes.",N,N],[6,"u128x2","","A 256-bit vector with 2 `u128` lanes.",N,N],[6,"m128x2","","A 256-bit vector mask with 2 `m128` lanes.",N,N],[6,"i8x64","","A 512-bit vector with 64 `i8` lanes.",N,N],[6,"u8x64","","A 512-bit vector with 64 `u8` lanes.",N,N],[6,"m8x64","","A 512-bit vector mask with 64 `m8` lanes.",N,N],[6,"i16x32","","A 512-bit vector with 32 `i16` lanes.",N,N],[6,"u16x32","","A 512-bit vector with 32 `u16` lanes.",N,N],[6,"m16x32","","A 512-bit vector mask with 32 `m16` lanes.",N,N],[6,"i32x16","","A 512-bit vector with 16 `i32` lanes.",N,N],[6,"u32x16","","A 512-bit vector with 16 `u32` lanes.",N,N],[6,"f32x16","","A 512-bit vector with 16 `f32` lanes.",N,N],[6,"m32x16","","A 512-bit vector mask with 16 `m32` lanes.",N,N],[6,"i64x8","","A 512-bit vector with 8 `i64` lanes.",N,N],[6,"u64x8","","A 512-bit vector with 8 `u64` lanes.",N,N],[6,"f64x8","","A 512-bit vector with 8 `f64` lanes.",N,N],[6,"m64x8","","A 512-bit vector mask with 8 `m64` lanes.",N,N],[6,"i128x4","","A 512-bit vector with 4 `i128` lanes.",N,N],[6,"u128x4","","A 512-bit vector with 4 `u128` lanes.",N,N],[6,"m128x4","","A 512-bit vector mask with 4 `m128` lanes.",N,N],[6,"isizex2","","A vector with 2 `isize` lanes.",N,N],[6,"usizex2","","A vector with 2 `usize` lanes.",N,N],[6,"msizex2","","A vector mask with 2 `msize` lanes.",N,N],[6,"isizex4","","A vector with 4 `isize` lanes.",N,N],[6,"usizex4","","A vector with 4 `usize` lanes.",N,N],[6,"msizex4","","A vector mask with 4 `msize` lanes.",N,N],[6,"isizex8","","A vector with 4 `isize` lanes.",N,N],[6,"usizex8","","A vector with 8 `usize` lanes.",N,N],[6,"msizex8","","A vector mask with 8 `msize` lanes.",N,N],[6,"cptrx2","","A vector with 2 `*const T` lanes",N,N],[6,"mptrx2","","A vector with 2 `*mut T` lanes",N,N],[6,"cptrx4","","A vector with 4 `*const T` lanes",N,N],[6,"mptrx4","","A vector with 4 `*mut T` lanes",N,N],[6,"cptrx8","","A vector with 8 `*const T` lanes",N,N],[6,"mptrx8","","A vector with 8 `*mut T` lanes",N,N],[8,"FromCast","","Numeric cast from `T` to `Self`.",N,N],[10,"from_cast","","Numeric cast from `T` to `Self`.",7,[[["t"]],["self"]]],[8,"Cast","","Numeric cast from `Self` to `T`.",N,N],[10,"cast","","Numeric cast from `self` to `T`.",8,[[["self"]],["t"]]],[8,"FromBits","","Safe lossless bitwise conversion from `T` to `Self`.",N,N],[10,"from_bits","","Safe lossless bitwise transmute from `T` to `Self`.",9,[[["t"]],["self"]]],[8,"IntoBits","","Safe lossless bitwise conversion from `Self` to `T`.",N,N],[10,"into_bits","","Safe lossless bitwise transmute from `self` to `T`.",10,[[["self"]],["t"]]],[11,"clone","","",11,[[["self"]],["simd"]]],[11,"clone","","",6,[[["self"]],["lexicographicallyordered"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[14,"shuffle","","Shuffles vector elements.",N,N],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from_cast","","",12,[[["u8x2"]],["self"]]],[11,"from_cast","","",12,[[["m8x2"]],["self"]]],[11,"from_cast","","",12,[[["i16x2"]],["self"]]],[11,"from_cast","","",12,[[["u16x2"]],["self"]]],[11,"from_cast","","",12,[[["m16x2"]],["self"]]],[11,"from_cast","","",12,[[["i32x2"]],["self"]]],[11,"from_cast","","",12,[[["u32x2"]],["self"]]],[11,"from_cast","","",12,[[["f32x2"]],["self"]]],[11,"from_cast","","",12,[[["m32x2"]],["self"]]],[11,"from_cast","","",12,[[["i64x2"]],["self"]]],[11,"from_cast","","",12,[[["u64x2"]],["self"]]],[11,"from_cast","","",12,[[["f64x2"]],["self"]]],[11,"from_cast","","",12,[[["m64x2"]],["self"]]],[11,"from_cast","","",12,[[["i128x2"]],["self"]]],[11,"from_cast","","",12,[[["u128x2"]],["self"]]],[11,"from_cast","","",12,[[["m128x2"]],["self"]]],[11,"from_cast","","",12,[[["isizex2"]],["self"]]],[11,"from_cast","","",12,[[["usizex2"]],["self"]]],[11,"from_cast","","",12,[[["msizex2"]],["self"]]],[11,"from_cast","","",13,[[["i8x2"]],["self"]]],[11,"from_cast","","",13,[[["m8x2"]],["self"]]],[11,"from_cast","","",13,[[["i16x2"]],["self"]]],[11,"from_cast","","",13,[[["u16x2"]],["self"]]],[11,"from_cast","","",13,[[["m16x2"]],["self"]]],[11,"from_cast","","",13,[[["i32x2"]],["self"]]],[11,"from_cast","","",13,[[["u32x2"]],["self"]]],[11,"from_cast","","",13,[[["f32x2"]],["self"]]],[11,"from_cast","","",13,[[["m32x2"]],["self"]]],[11,"from_cast","","",13,[[["i64x2"]],["self"]]],[11,"from_cast","","",13,[[["u64x2"]],["self"]]],[11,"from_cast","","",13,[[["f64x2"]],["self"]]],[11,"from_cast","","",13,[[["m64x2"]],["self"]]],[11,"from_cast","","",13,[[["i128x2"]],["self"]]],[11,"from_cast","","",13,[[["u128x2"]],["self"]]],[11,"from_cast","","",13,[[["m128x2"]],["self"]]],[11,"from_cast","","",13,[[["isizex2"]],["self"]]],[11,"from_cast","","",13,[[["usizex2"]],["self"]]],[11,"from_cast","","",13,[[["msizex2"]],["self"]]],[11,"from_cast","","",14,[[["i8x2"]],["self"]]],[11,"from_cast","","",14,[[["u8x2"]],["self"]]],[11,"from_cast","","",14,[[["i16x2"]],["self"]]],[11,"from_cast","","",14,[[["u16x2"]],["self"]]],[11,"from_cast","","",14,[[["m16x2"]],["self"]]],[11,"from_cast","","",14,[[["i32x2"]],["self"]]],[11,"from_cast","","",14,[[["u32x2"]],["self"]]],[11,"from_cast","","",14,[[["f32x2"]],["self"]]],[11,"from_cast","","",14,[[["m32x2"]],["self"]]],[11,"from_cast","","",14,[[["i64x2"]],["self"]]],[11,"from_cast","","",14,[[["u64x2"]],["self"]]],[11,"from_cast","","",14,[[["f64x2"]],["self"]]],[11,"from_cast","","",14,[[["m64x2"]],["self"]]],[11,"from_cast","","",14,[[["i128x2"]],["self"]]],[11,"from_cast","","",14,[[["u128x2"]],["self"]]],[11,"from_cast","","",14,[[["m128x2"]],["self"]]],[11,"from_cast","","",14,[[["isizex2"]],["self"]]],[11,"from_cast","","",14,[[["usizex2"]],["self"]]],[11,"from_cast","","",14,[[["msizex2"]],["self"]]],[11,"from_cast","","",15,[[["u8x4"]],["self"]]],[11,"from_cast","","",15,[[["m8x4"]],["self"]]],[11,"from_cast","","",15,[[["i16x4"]],["self"]]],[11,"from_cast","","",15,[[["u16x4"]],["self"]]],[11,"from_cast","","",15,[[["m16x4"]],["self"]]],[11,"from_cast","","",15,[[["i32x4"]],["self"]]],[11,"from_cast","","",15,[[["u32x4"]],["self"]]],[11,"from_cast","","",15,[[["f32x4"]],["self"]]],[11,"from_cast","","",15,[[["m32x4"]],["self"]]],[11,"from_cast","","",15,[[["i64x4"]],["self"]]],[11,"from_cast","","",15,[[["u64x4"]],["self"]]],[11,"from_cast","","",15,[[["f64x4"]],["self"]]],[11,"from_cast","","",15,[[["m64x4"]],["self"]]],[11,"from_cast","","",15,[[["i128x4"]],["self"]]],[11,"from_cast","","",15,[[["u128x4"]],["self"]]],[11,"from_cast","","",15,[[["m128x4"]],["self"]]],[11,"from_cast","","",15,[[["isizex4"]],["self"]]],[11,"from_cast","","",15,[[["usizex4"]],["self"]]],[11,"from_cast","","",15,[[["msizex4"]],["self"]]],[11,"from_cast","","",16,[[["i8x4"]],["self"]]],[11,"from_cast","","",16,[[["m8x4"]],["self"]]],[11,"from_cast","","",16,[[["i16x4"]],["self"]]],[11,"from_cast","","",16,[[["u16x4"]],["self"]]],[11,"from_cast","","",16,[[["m16x4"]],["self"]]],[11,"from_cast","","",16,[[["i32x4"]],["self"]]],[11,"from_cast","","",16,[[["u32x4"]],["self"]]],[11,"from_cast","","",16,[[["f32x4"]],["self"]]],[11,"from_cast","","",16,[[["m32x4"]],["self"]]],[11,"from_cast","","",16,[[["i64x4"]],["self"]]],[11,"from_cast","","",16,[[["u64x4"]],["self"]]],[11,"from_cast","","",16,[[["f64x4"]],["self"]]],[11,"from_cast","","",16,[[["m64x4"]],["self"]]],[11,"from_cast","","",16,[[["i128x4"]],["self"]]],[11,"from_cast","","",16,[[["u128x4"]],["self"]]],[11,"from_cast","","",16,[[["m128x4"]],["self"]]],[11,"from_cast","","",16,[[["isizex4"]],["self"]]],[11,"from_cast","","",16,[[["usizex4"]],["self"]]],[11,"from_cast","","",16,[[["msizex4"]],["self"]]],[11,"from_cast","","",17,[[["i8x4"]],["self"]]],[11,"from_cast","","",17,[[["u8x4"]],["self"]]],[11,"from_cast","","",17,[[["i16x4"]],["self"]]],[11,"from_cast","","",17,[[["u16x4"]],["self"]]],[11,"from_cast","","",17,[[["m16x4"]],["self"]]],[11,"from_cast","","",17,[[["i32x4"]],["self"]]],[11,"from_cast","","",17,[[["u32x4"]],["self"]]],[11,"from_cast","","",17,[[["f32x4"]],["self"]]],[11,"from_cast","","",17,[[["m32x4"]],["self"]]],[11,"from_cast","","",17,[[["i64x4"]],["self"]]],[11,"from_cast","","",17,[[["u64x4"]],["self"]]],[11,"from_cast","","",17,[[["f64x4"]],["self"]]],[11,"from_cast","","",17,[[["m64x4"]],["self"]]],[11,"from_cast","","",17,[[["i128x4"]],["self"]]],[11,"from_cast","","",17,[[["u128x4"]],["self"]]],[11,"from_cast","","",17,[[["m128x4"]],["self"]]],[11,"from_cast","","",17,[[["isizex4"]],["self"]]],[11,"from_cast","","",17,[[["usizex4"]],["self"]]],[11,"from_cast","","",17,[[["msizex4"]],["self"]]],[11,"from_cast","","",18,[[["i8x2"]],["self"]]],[11,"from_cast","","",18,[[["u8x2"]],["self"]]],[11,"from_cast","","",18,[[["m8x2"]],["self"]]],[11,"from_cast","","",18,[[["u16x2"]],["self"]]],[11,"from_cast","","",18,[[["m16x2"]],["self"]]],[11,"from_cast","","",18,[[["i32x2"]],["self"]]],[11,"from_cast","","",18,[[["u32x2"]],["self"]]],[11,"from_cast","","",18,[[["f32x2"]],["self"]]],[11,"from_cast","","",18,[[["m32x2"]],["self"]]],[11,"from_cast","","",18,[[["i64x2"]],["self"]]],[11,"from_cast","","",18,[[["u64x2"]],["self"]]],[11,"from_cast","","",18,[[["f64x2"]],["self"]]],[11,"from_cast","","",18,[[["m64x2"]],["self"]]],[11,"from_cast","","",18,[[["i128x2"]],["self"]]],[11,"from_cast","","",18,[[["u128x2"]],["self"]]],[11,"from_cast","","",18,[[["m128x2"]],["self"]]],[11,"from_cast","","",18,[[["isizex2"]],["self"]]],[11,"from_cast","","",18,[[["usizex2"]],["self"]]],[11,"from_cast","","",18,[[["msizex2"]],["self"]]],[11,"from_cast","","",19,[[["i8x2"]],["self"]]],[11,"from_cast","","",19,[[["u8x2"]],["self"]]],[11,"from_cast","","",19,[[["m8x2"]],["self"]]],[11,"from_cast","","",19,[[["i16x2"]],["self"]]],[11,"from_cast","","",19,[[["m16x2"]],["self"]]],[11,"from_cast","","",19,[[["i32x2"]],["self"]]],[11,"from_cast","","",19,[[["u32x2"]],["self"]]],[11,"from_cast","","",19,[[["f32x2"]],["self"]]],[11,"from_cast","","",19,[[["m32x2"]],["self"]]],[11,"from_cast","","",19,[[["i64x2"]],["self"]]],[11,"from_cast","","",19,[[["u64x2"]],["self"]]],[11,"from_cast","","",19,[[["f64x2"]],["self"]]],[11,"from_cast","","",19,[[["m64x2"]],["self"]]],[11,"from_cast","","",19,[[["i128x2"]],["self"]]],[11,"from_cast","","",19,[[["u128x2"]],["self"]]],[11,"from_cast","","",19,[[["m128x2"]],["self"]]],[11,"from_cast","","",19,[[["isizex2"]],["self"]]],[11,"from_cast","","",19,[[["usizex2"]],["self"]]],[11,"from_cast","","",19,[[["msizex2"]],["self"]]],[11,"from_cast","","",20,[[["i8x2"]],["self"]]],[11,"from_cast","","",20,[[["u8x2"]],["self"]]],[11,"from_cast","","",20,[[["m8x2"]],["self"]]],[11,"from_cast","","",20,[[["i16x2"]],["self"]]],[11,"from_cast","","",20,[[["u16x2"]],["self"]]],[11,"from_cast","","",20,[[["i32x2"]],["self"]]],[11,"from_cast","","",20,[[["u32x2"]],["self"]]],[11,"from_cast","","",20,[[["f32x2"]],["self"]]],[11,"from_cast","","",20,[[["m32x2"]],["self"]]],[11,"from_cast","","",20,[[["i64x2"]],["self"]]],[11,"from_cast","","",20,[[["u64x2"]],["self"]]],[11,"from_cast","","",20,[[["f64x2"]],["self"]]],[11,"from_cast","","",20,[[["m64x2"]],["self"]]],[11,"from_cast","","",20,[[["i128x2"]],["self"]]],[11,"from_cast","","",20,[[["u128x2"]],["self"]]],[11,"from_cast","","",20,[[["m128x2"]],["self"]]],[11,"from_cast","","",20,[[["isizex2"]],["self"]]],[11,"from_cast","","",20,[[["usizex2"]],["self"]]],[11,"from_cast","","",20,[[["msizex2"]],["self"]]],[11,"from_cast","","",21,[[["u8x8"]],["self"]]],[11,"from_cast","","",21,[[["m8x8"]],["self"]]],[11,"from_cast","","",21,[[["i16x8"]],["self"]]],[11,"from_cast","","",21,[[["u16x8"]],["self"]]],[11,"from_cast","","",21,[[["m16x8"]],["self"]]],[11,"from_cast","","",21,[[["i32x8"]],["self"]]],[11,"from_cast","","",21,[[["u32x8"]],["self"]]],[11,"from_cast","","",21,[[["f32x8"]],["self"]]],[11,"from_cast","","",21,[[["m32x8"]],["self"]]],[11,"from_cast","","",21,[[["i64x8"]],["self"]]],[11,"from_cast","","",21,[[["u64x8"]],["self"]]],[11,"from_cast","","",21,[[["f64x8"]],["self"]]],[11,"from_cast","","",21,[[["m64x8"]],["self"]]],[11,"from_cast","","",21,[[["isizex8"]],["self"]]],[11,"from_cast","","",21,[[["usizex8"]],["self"]]],[11,"from_cast","","",21,[[["msizex8"]],["self"]]],[11,"from_cast","","",22,[[["i8x8"]],["self"]]],[11,"from_cast","","",22,[[["m8x8"]],["self"]]],[11,"from_cast","","",22,[[["i16x8"]],["self"]]],[11,"from_cast","","",22,[[["u16x8"]],["self"]]],[11,"from_cast","","",22,[[["m16x8"]],["self"]]],[11,"from_cast","","",22,[[["i32x8"]],["self"]]],[11,"from_cast","","",22,[[["u32x8"]],["self"]]],[11,"from_cast","","",22,[[["f32x8"]],["self"]]],[11,"from_cast","","",22,[[["m32x8"]],["self"]]],[11,"from_cast","","",22,[[["i64x8"]],["self"]]],[11,"from_cast","","",22,[[["u64x8"]],["self"]]],[11,"from_cast","","",22,[[["f64x8"]],["self"]]],[11,"from_cast","","",22,[[["m64x8"]],["self"]]],[11,"from_cast","","",22,[[["isizex8"]],["self"]]],[11,"from_cast","","",22,[[["usizex8"]],["self"]]],[11,"from_cast","","",22,[[["msizex8"]],["self"]]],[11,"from_cast","","",23,[[["i8x8"]],["self"]]],[11,"from_cast","","",23,[[["u8x8"]],["self"]]],[11,"from_cast","","",23,[[["i16x8"]],["self"]]],[11,"from_cast","","",23,[[["u16x8"]],["self"]]],[11,"from_cast","","",23,[[["m16x8"]],["self"]]],[11,"from_cast","","",23,[[["i32x8"]],["self"]]],[11,"from_cast","","",23,[[["u32x8"]],["self"]]],[11,"from_cast","","",23,[[["f32x8"]],["self"]]],[11,"from_cast","","",23,[[["m32x8"]],["self"]]],[11,"from_cast","","",23,[[["i64x8"]],["self"]]],[11,"from_cast","","",23,[[["u64x8"]],["self"]]],[11,"from_cast","","",23,[[["f64x8"]],["self"]]],[11,"from_cast","","",23,[[["m64x8"]],["self"]]],[11,"from_cast","","",23,[[["isizex8"]],["self"]]],[11,"from_cast","","",23,[[["usizex8"]],["self"]]],[11,"from_cast","","",23,[[["msizex8"]],["self"]]],[11,"from_cast","","",24,[[["i8x4"]],["self"]]],[11,"from_cast","","",24,[[["u8x4"]],["self"]]],[11,"from_cast","","",24,[[["m8x4"]],["self"]]],[11,"from_cast","","",24,[[["u16x4"]],["self"]]],[11,"from_cast","","",24,[[["m16x4"]],["self"]]],[11,"from_cast","","",24,[[["i32x4"]],["self"]]],[11,"from_cast","","",24,[[["u32x4"]],["self"]]],[11,"from_cast","","",24,[[["f32x4"]],["self"]]],[11,"from_cast","","",24,[[["m32x4"]],["self"]]],[11,"from_cast","","",24,[[["i64x4"]],["self"]]],[11,"from_cast","","",24,[[["u64x4"]],["self"]]],[11,"from_cast","","",24,[[["f64x4"]],["self"]]],[11,"from_cast","","",24,[[["m64x4"]],["self"]]],[11,"from_cast","","",24,[[["i128x4"]],["self"]]],[11,"from_cast","","",24,[[["u128x4"]],["self"]]],[11,"from_cast","","",24,[[["m128x4"]],["self"]]],[11,"from_cast","","",24,[[["isizex4"]],["self"]]],[11,"from_cast","","",24,[[["usizex4"]],["self"]]],[11,"from_cast","","",24,[[["msizex4"]],["self"]]],[11,"from_cast","","",25,[[["i8x4"]],["self"]]],[11,"from_cast","","",25,[[["u8x4"]],["self"]]],[11,"from_cast","","",25,[[["m8x4"]],["self"]]],[11,"from_cast","","",25,[[["i16x4"]],["self"]]],[11,"from_cast","","",25,[[["m16x4"]],["self"]]],[11,"from_cast","","",25,[[["i32x4"]],["self"]]],[11,"from_cast","","",25,[[["u32x4"]],["self"]]],[11,"from_cast","","",25,[[["f32x4"]],["self"]]],[11,"from_cast","","",25,[[["m32x4"]],["self"]]],[11,"from_cast","","",25,[[["i64x4"]],["self"]]],[11,"from_cast","","",25,[[["u64x4"]],["self"]]],[11,"from_cast","","",25,[[["f64x4"]],["self"]]],[11,"from_cast","","",25,[[["m64x4"]],["self"]]],[11,"from_cast","","",25,[[["i128x4"]],["self"]]],[11,"from_cast","","",25,[[["u128x4"]],["self"]]],[11,"from_cast","","",25,[[["m128x4"]],["self"]]],[11,"from_cast","","",25,[[["isizex4"]],["self"]]],[11,"from_cast","","",25,[[["usizex4"]],["self"]]],[11,"from_cast","","",25,[[["msizex4"]],["self"]]],[11,"from_cast","","",26,[[["i8x4"]],["self"]]],[11,"from_cast","","",26,[[["u8x4"]],["self"]]],[11,"from_cast","","",26,[[["m8x4"]],["self"]]],[11,"from_cast","","",26,[[["i16x4"]],["self"]]],[11,"from_cast","","",26,[[["u16x4"]],["self"]]],[11,"from_cast","","",26,[[["i32x4"]],["self"]]],[11,"from_cast","","",26,[[["u32x4"]],["self"]]],[11,"from_cast","","",26,[[["f32x4"]],["self"]]],[11,"from_cast","","",26,[[["m32x4"]],["self"]]],[11,"from_cast","","",26,[[["i64x4"]],["self"]]],[11,"from_cast","","",26,[[["u64x4"]],["self"]]],[11,"from_cast","","",26,[[["f64x4"]],["self"]]],[11,"from_cast","","",26,[[["m64x4"]],["self"]]],[11,"from_cast","","",26,[[["i128x4"]],["self"]]],[11,"from_cast","","",26,[[["u128x4"]],["self"]]],[11,"from_cast","","",26,[[["m128x4"]],["self"]]],[11,"from_cast","","",26,[[["isizex4"]],["self"]]],[11,"from_cast","","",26,[[["usizex4"]],["self"]]],[11,"from_cast","","",26,[[["msizex4"]],["self"]]],[11,"from_cast","","",27,[[["i8x2"]],["self"]]],[11,"from_cast","","",27,[[["u8x2"]],["self"]]],[11,"from_cast","","",27,[[["m8x2"]],["self"]]],[11,"from_cast","","",27,[[["i16x2"]],["self"]]],[11,"from_cast","","",27,[[["u16x2"]],["self"]]],[11,"from_cast","","",27,[[["m16x2"]],["self"]]],[11,"from_cast","","",27,[[["u32x2"]],["self"]]],[11,"from_cast","","",27,[[["f32x2"]],["self"]]],[11,"from_cast","","",27,[[["m32x2"]],["self"]]],[11,"from_cast","","",27,[[["i64x2"]],["self"]]],[11,"from_cast","","",27,[[["u64x2"]],["self"]]],[11,"from_cast","","",27,[[["f64x2"]],["self"]]],[11,"from_cast","","",27,[[["m64x2"]],["self"]]],[11,"from_cast","","",27,[[["i128x2"]],["self"]]],[11,"from_cast","","",27,[[["u128x2"]],["self"]]],[11,"from_cast","","",27,[[["m128x2"]],["self"]]],[11,"from_cast","","",27,[[["isizex2"]],["self"]]],[11,"from_cast","","",27,[[["usizex2"]],["self"]]],[11,"from_cast","","",27,[[["msizex2"]],["self"]]],[11,"from_cast","","",28,[[["i8x2"]],["self"]]],[11,"from_cast","","",28,[[["u8x2"]],["self"]]],[11,"from_cast","","",28,[[["m8x2"]],["self"]]],[11,"from_cast","","",28,[[["i16x2"]],["self"]]],[11,"from_cast","","",28,[[["u16x2"]],["self"]]],[11,"from_cast","","",28,[[["m16x2"]],["self"]]],[11,"from_cast","","",28,[[["i32x2"]],["self"]]],[11,"from_cast","","",28,[[["f32x2"]],["self"]]],[11,"from_cast","","",28,[[["m32x2"]],["self"]]],[11,"from_cast","","",28,[[["i64x2"]],["self"]]],[11,"from_cast","","",28,[[["u64x2"]],["self"]]],[11,"from_cast","","",28,[[["f64x2"]],["self"]]],[11,"from_cast","","",28,[[["m64x2"]],["self"]]],[11,"from_cast","","",28,[[["i128x2"]],["self"]]],[11,"from_cast","","",28,[[["u128x2"]],["self"]]],[11,"from_cast","","",28,[[["m128x2"]],["self"]]],[11,"from_cast","","",28,[[["isizex2"]],["self"]]],[11,"from_cast","","",28,[[["usizex2"]],["self"]]],[11,"from_cast","","",28,[[["msizex2"]],["self"]]],[11,"from_cast","","",29,[[["i8x2"]],["self"]]],[11,"from_cast","","",29,[[["u8x2"]],["self"]]],[11,"from_cast","","",29,[[["m8x2"]],["self"]]],[11,"from_cast","","",29,[[["i16x2"]],["self"]]],[11,"from_cast","","",29,[[["u16x2"]],["self"]]],[11,"from_cast","","",29,[[["m16x2"]],["self"]]],[11,"from_cast","","",29,[[["i32x2"]],["self"]]],[11,"from_cast","","",29,[[["u32x2"]],["self"]]],[11,"from_cast","","",29,[[["m32x2"]],["self"]]],[11,"from_cast","","",29,[[["i64x2"]],["self"]]],[11,"from_cast","","",29,[[["u64x2"]],["self"]]],[11,"from_cast","","",29,[[["f64x2"]],["self"]]],[11,"from_cast","","",29,[[["m64x2"]],["self"]]],[11,"from_cast","","",29,[[["i128x2"]],["self"]]],[11,"from_cast","","",29,[[["u128x2"]],["self"]]],[11,"from_cast","","",29,[[["m128x2"]],["self"]]],[11,"from_cast","","",29,[[["isizex2"]],["self"]]],[11,"from_cast","","",29,[[["usizex2"]],["self"]]],[11,"from_cast","","",29,[[["msizex2"]],["self"]]],[11,"from_cast","","",30,[[["i8x2"]],["self"]]],[11,"from_cast","","",30,[[["u8x2"]],["self"]]],[11,"from_cast","","",30,[[["m8x2"]],["self"]]],[11,"from_cast","","",30,[[["i16x2"]],["self"]]],[11,"from_cast","","",30,[[["u16x2"]],["self"]]],[11,"from_cast","","",30,[[["m16x2"]],["self"]]],[11,"from_cast","","",30,[[["i32x2"]],["self"]]],[11,"from_cast","","",30,[[["u32x2"]],["self"]]],[11,"from_cast","","",30,[[["f32x2"]],["self"]]],[11,"from_cast","","",30,[[["i64x2"]],["self"]]],[11,"from_cast","","",30,[[["u64x2"]],["self"]]],[11,"from_cast","","",30,[[["f64x2"]],["self"]]],[11,"from_cast","","",30,[[["m64x2"]],["self"]]],[11,"from_cast","","",30,[[["i128x2"]],["self"]]],[11,"from_cast","","",30,[[["u128x2"]],["self"]]],[11,"from_cast","","",30,[[["m128x2"]],["self"]]],[11,"from_cast","","",30,[[["isizex2"]],["self"]]],[11,"from_cast","","",30,[[["usizex2"]],["self"]]],[11,"from_cast","","",30,[[["msizex2"]],["self"]]],[11,"from_cast","","",31,[[["u8x16"]],["self"]]],[11,"from_cast","","",31,[[["m8x16"]],["self"]]],[11,"from_cast","","",31,[[["i16x16"]],["self"]]],[11,"from_cast","","",31,[[["u16x16"]],["self"]]],[11,"from_cast","","",31,[[["m16x16"]],["self"]]],[11,"from_cast","","",31,[[["i32x16"]],["self"]]],[11,"from_cast","","",31,[[["u32x16"]],["self"]]],[11,"from_cast","","",31,[[["f32x16"]],["self"]]],[11,"from_cast","","",31,[[["m32x16"]],["self"]]],[11,"from_cast","","",32,[[["i8x16"]],["self"]]],[11,"from_cast","","",32,[[["m8x16"]],["self"]]],[11,"from_cast","","",32,[[["i16x16"]],["self"]]],[11,"from_cast","","",32,[[["u16x16"]],["self"]]],[11,"from_cast","","",32,[[["m16x16"]],["self"]]],[11,"from_cast","","",32,[[["i32x16"]],["self"]]],[11,"from_cast","","",32,[[["u32x16"]],["self"]]],[11,"from_cast","","",32,[[["f32x16"]],["self"]]],[11,"from_cast","","",32,[[["m32x16"]],["self"]]],[11,"from_cast","","",33,[[["i8x16"]],["self"]]],[11,"from_cast","","",33,[[["u8x16"]],["self"]]],[11,"from_cast","","",33,[[["i16x16"]],["self"]]],[11,"from_cast","","",33,[[["u16x16"]],["self"]]],[11,"from_cast","","",33,[[["m16x16"]],["self"]]],[11,"from_cast","","",33,[[["i32x16"]],["self"]]],[11,"from_cast","","",33,[[["u32x16"]],["self"]]],[11,"from_cast","","",33,[[["f32x16"]],["self"]]],[11,"from_cast","","",33,[[["m32x16"]],["self"]]],[11,"from_cast","","",34,[[["i8x8"]],["self"]]],[11,"from_cast","","",34,[[["u8x8"]],["self"]]],[11,"from_cast","","",34,[[["m8x8"]],["self"]]],[11,"from_cast","","",34,[[["u16x8"]],["self"]]],[11,"from_cast","","",34,[[["m16x8"]],["self"]]],[11,"from_cast","","",34,[[["i32x8"]],["self"]]],[11,"from_cast","","",34,[[["u32x8"]],["self"]]],[11,"from_cast","","",34,[[["f32x8"]],["self"]]],[11,"from_cast","","",34,[[["m32x8"]],["self"]]],[11,"from_cast","","",34,[[["i64x8"]],["self"]]],[11,"from_cast","","",34,[[["u64x8"]],["self"]]],[11,"from_cast","","",34,[[["f64x8"]],["self"]]],[11,"from_cast","","",34,[[["m64x8"]],["self"]]],[11,"from_cast","","",34,[[["isizex8"]],["self"]]],[11,"from_cast","","",34,[[["usizex8"]],["self"]]],[11,"from_cast","","",34,[[["msizex8"]],["self"]]],[11,"from_cast","","",35,[[["i8x8"]],["self"]]],[11,"from_cast","","",35,[[["u8x8"]],["self"]]],[11,"from_cast","","",35,[[["m8x8"]],["self"]]],[11,"from_cast","","",35,[[["i16x8"]],["self"]]],[11,"from_cast","","",35,[[["m16x8"]],["self"]]],[11,"from_cast","","",35,[[["i32x8"]],["self"]]],[11,"from_cast","","",35,[[["u32x8"]],["self"]]],[11,"from_cast","","",35,[[["f32x8"]],["self"]]],[11,"from_cast","","",35,[[["m32x8"]],["self"]]],[11,"from_cast","","",35,[[["i64x8"]],["self"]]],[11,"from_cast","","",35,[[["u64x8"]],["self"]]],[11,"from_cast","","",35,[[["f64x8"]],["self"]]],[11,"from_cast","","",35,[[["m64x8"]],["self"]]],[11,"from_cast","","",35,[[["isizex8"]],["self"]]],[11,"from_cast","","",35,[[["usizex8"]],["self"]]],[11,"from_cast","","",35,[[["msizex8"]],["self"]]],[11,"from_cast","","",36,[[["i8x8"]],["self"]]],[11,"from_cast","","",36,[[["u8x8"]],["self"]]],[11,"from_cast","","",36,[[["m8x8"]],["self"]]],[11,"from_cast","","",36,[[["i16x8"]],["self"]]],[11,"from_cast","","",36,[[["u16x8"]],["self"]]],[11,"from_cast","","",36,[[["i32x8"]],["self"]]],[11,"from_cast","","",36,[[["u32x8"]],["self"]]],[11,"from_cast","","",36,[[["f32x8"]],["self"]]],[11,"from_cast","","",36,[[["m32x8"]],["self"]]],[11,"from_cast","","",36,[[["i64x8"]],["self"]]],[11,"from_cast","","",36,[[["u64x8"]],["self"]]],[11,"from_cast","","",36,[[["f64x8"]],["self"]]],[11,"from_cast","","",36,[[["m64x8"]],["self"]]],[11,"from_cast","","",36,[[["isizex8"]],["self"]]],[11,"from_cast","","",36,[[["usizex8"]],["self"]]],[11,"from_cast","","",36,[[["msizex8"]],["self"]]],[11,"from_cast","","",37,[[["i8x4"]],["self"]]],[11,"from_cast","","",37,[[["u8x4"]],["self"]]],[11,"from_cast","","",37,[[["m8x4"]],["self"]]],[11,"from_cast","","",37,[[["i16x4"]],["self"]]],[11,"from_cast","","",37,[[["u16x4"]],["self"]]],[11,"from_cast","","",37,[[["m16x4"]],["self"]]],[11,"from_cast","","",37,[[["u32x4"]],["self"]]],[11,"from_cast","","",37,[[["f32x4"]],["self"]]],[11,"from_cast","","",37,[[["m32x4"]],["self"]]],[11,"from_cast","","",37,[[["i64x4"]],["self"]]],[11,"from_cast","","",37,[[["u64x4"]],["self"]]],[11,"from_cast","","",37,[[["f64x4"]],["self"]]],[11,"from_cast","","",37,[[["m64x4"]],["self"]]],[11,"from_cast","","",37,[[["i128x4"]],["self"]]],[11,"from_cast","","",37,[[["u128x4"]],["self"]]],[11,"from_cast","","",37,[[["m128x4"]],["self"]]],[11,"from_cast","","",37,[[["isizex4"]],["self"]]],[11,"from_cast","","",37,[[["usizex4"]],["self"]]],[11,"from_cast","","",37,[[["msizex4"]],["self"]]],[11,"from_cast","","",38,[[["i8x4"]],["self"]]],[11,"from_cast","","",38,[[["u8x4"]],["self"]]],[11,"from_cast","","",38,[[["m8x4"]],["self"]]],[11,"from_cast","","",38,[[["i16x4"]],["self"]]],[11,"from_cast","","",38,[[["u16x4"]],["self"]]],[11,"from_cast","","",38,[[["m16x4"]],["self"]]],[11,"from_cast","","",38,[[["i32x4"]],["self"]]],[11,"from_cast","","",38,[[["f32x4"]],["self"]]],[11,"from_cast","","",38,[[["m32x4"]],["self"]]],[11,"from_cast","","",38,[[["i64x4"]],["self"]]],[11,"from_cast","","",38,[[["u64x4"]],["self"]]],[11,"from_cast","","",38,[[["f64x4"]],["self"]]],[11,"from_cast","","",38,[[["m64x4"]],["self"]]],[11,"from_cast","","",38,[[["i128x4"]],["self"]]],[11,"from_cast","","",38,[[["u128x4"]],["self"]]],[11,"from_cast","","",38,[[["m128x4"]],["self"]]],[11,"from_cast","","",38,[[["isizex4"]],["self"]]],[11,"from_cast","","",38,[[["usizex4"]],["self"]]],[11,"from_cast","","",38,[[["msizex4"]],["self"]]],[11,"from_cast","","",39,[[["i8x4"]],["self"]]],[11,"from_cast","","",39,[[["u8x4"]],["self"]]],[11,"from_cast","","",39,[[["m8x4"]],["self"]]],[11,"from_cast","","",39,[[["i16x4"]],["self"]]],[11,"from_cast","","",39,[[["u16x4"]],["self"]]],[11,"from_cast","","",39,[[["m16x4"]],["self"]]],[11,"from_cast","","",39,[[["i32x4"]],["self"]]],[11,"from_cast","","",39,[[["u32x4"]],["self"]]],[11,"from_cast","","",39,[[["m32x4"]],["self"]]],[11,"from_cast","","",39,[[["i64x4"]],["self"]]],[11,"from_cast","","",39,[[["u64x4"]],["self"]]],[11,"from_cast","","",39,[[["f64x4"]],["self"]]],[11,"from_cast","","",39,[[["m64x4"]],["self"]]],[11,"from_cast","","",39,[[["i128x4"]],["self"]]],[11,"from_cast","","",39,[[["u128x4"]],["self"]]],[11,"from_cast","","",39,[[["m128x4"]],["self"]]],[11,"from_cast","","",39,[[["isizex4"]],["self"]]],[11,"from_cast","","",39,[[["usizex4"]],["self"]]],[11,"from_cast","","",39,[[["msizex4"]],["self"]]],[11,"from_cast","","",40,[[["i8x4"]],["self"]]],[11,"from_cast","","",40,[[["u8x4"]],["self"]]],[11,"from_cast","","",40,[[["m8x4"]],["self"]]],[11,"from_cast","","",40,[[["i16x4"]],["self"]]],[11,"from_cast","","",40,[[["u16x4"]],["self"]]],[11,"from_cast","","",40,[[["m16x4"]],["self"]]],[11,"from_cast","","",40,[[["i32x4"]],["self"]]],[11,"from_cast","","",40,[[["u32x4"]],["self"]]],[11,"from_cast","","",40,[[["f32x4"]],["self"]]],[11,"from_cast","","",40,[[["i64x4"]],["self"]]],[11,"from_cast","","",40,[[["u64x4"]],["self"]]],[11,"from_cast","","",40,[[["f64x4"]],["self"]]],[11,"from_cast","","",40,[[["m64x4"]],["self"]]],[11,"from_cast","","",40,[[["i128x4"]],["self"]]],[11,"from_cast","","",40,[[["u128x4"]],["self"]]],[11,"from_cast","","",40,[[["m128x4"]],["self"]]],[11,"from_cast","","",40,[[["isizex4"]],["self"]]],[11,"from_cast","","",40,[[["usizex4"]],["self"]]],[11,"from_cast","","",40,[[["msizex4"]],["self"]]],[11,"from_cast","","",41,[[["i8x2"]],["self"]]],[11,"from_cast","","",41,[[["u8x2"]],["self"]]],[11,"from_cast","","",41,[[["m8x2"]],["self"]]],[11,"from_cast","","",41,[[["i16x2"]],["self"]]],[11,"from_cast","","",41,[[["u16x2"]],["self"]]],[11,"from_cast","","",41,[[["m16x2"]],["self"]]],[11,"from_cast","","",41,[[["i32x2"]],["self"]]],[11,"from_cast","","",41,[[["u32x2"]],["self"]]],[11,"from_cast","","",41,[[["f32x2"]],["self"]]],[11,"from_cast","","",41,[[["m32x2"]],["self"]]],[11,"from_cast","","",41,[[["u64x2"]],["self"]]],[11,"from_cast","","",41,[[["f64x2"]],["self"]]],[11,"from_cast","","",41,[[["m64x2"]],["self"]]],[11,"from_cast","","",41,[[["i128x2"]],["self"]]],[11,"from_cast","","",41,[[["u128x2"]],["self"]]],[11,"from_cast","","",41,[[["m128x2"]],["self"]]],[11,"from_cast","","",41,[[["isizex2"]],["self"]]],[11,"from_cast","","",41,[[["usizex2"]],["self"]]],[11,"from_cast","","",41,[[["msizex2"]],["self"]]],[11,"from_cast","","",42,[[["i8x2"]],["self"]]],[11,"from_cast","","",42,[[["u8x2"]],["self"]]],[11,"from_cast","","",42,[[["m8x2"]],["self"]]],[11,"from_cast","","",42,[[["i16x2"]],["self"]]],[11,"from_cast","","",42,[[["u16x2"]],["self"]]],[11,"from_cast","","",42,[[["m16x2"]],["self"]]],[11,"from_cast","","",42,[[["i32x2"]],["self"]]],[11,"from_cast","","",42,[[["u32x2"]],["self"]]],[11,"from_cast","","",42,[[["f32x2"]],["self"]]],[11,"from_cast","","",42,[[["m32x2"]],["self"]]],[11,"from_cast","","",42,[[["i64x2"]],["self"]]],[11,"from_cast","","",42,[[["f64x2"]],["self"]]],[11,"from_cast","","",42,[[["m64x2"]],["self"]]],[11,"from_cast","","",42,[[["i128x2"]],["self"]]],[11,"from_cast","","",42,[[["u128x2"]],["self"]]],[11,"from_cast","","",42,[[["m128x2"]],["self"]]],[11,"from_cast","","",42,[[["isizex2"]],["self"]]],[11,"from_cast","","",42,[[["usizex2"]],["self"]]],[11,"from_cast","","",42,[[["msizex2"]],["self"]]],[11,"from_cast","","",43,[[["i8x2"]],["self"]]],[11,"from_cast","","",43,[[["u8x2"]],["self"]]],[11,"from_cast","","",43,[[["m8x2"]],["self"]]],[11,"from_cast","","",43,[[["i16x2"]],["self"]]],[11,"from_cast","","",43,[[["u16x2"]],["self"]]],[11,"from_cast","","",43,[[["m16x2"]],["self"]]],[11,"from_cast","","",43,[[["i32x2"]],["self"]]],[11,"from_cast","","",43,[[["u32x2"]],["self"]]],[11,"from_cast","","",43,[[["f32x2"]],["self"]]],[11,"from_cast","","",43,[[["m32x2"]],["self"]]],[11,"from_cast","","",43,[[["i64x2"]],["self"]]],[11,"from_cast","","",43,[[["u64x2"]],["self"]]],[11,"from_cast","","",43,[[["m64x2"]],["self"]]],[11,"from_cast","","",43,[[["i128x2"]],["self"]]],[11,"from_cast","","",43,[[["u128x2"]],["self"]]],[11,"from_cast","","",43,[[["m128x2"]],["self"]]],[11,"from_cast","","",43,[[["isizex2"]],["self"]]],[11,"from_cast","","",43,[[["usizex2"]],["self"]]],[11,"from_cast","","",43,[[["msizex2"]],["self"]]],[11,"from_cast","","",44,[[["i8x2"]],["self"]]],[11,"from_cast","","",44,[[["u8x2"]],["self"]]],[11,"from_cast","","",44,[[["m8x2"]],["self"]]],[11,"from_cast","","",44,[[["i16x2"]],["self"]]],[11,"from_cast","","",44,[[["u16x2"]],["self"]]],[11,"from_cast","","",44,[[["m16x2"]],["self"]]],[11,"from_cast","","",44,[[["i32x2"]],["self"]]],[11,"from_cast","","",44,[[["u32x2"]],["self"]]],[11,"from_cast","","",44,[[["f32x2"]],["self"]]],[11,"from_cast","","",44,[[["m32x2"]],["self"]]],[11,"from_cast","","",44,[[["i64x2"]],["self"]]],[11,"from_cast","","",44,[[["u64x2"]],["self"]]],[11,"from_cast","","",44,[[["f64x2"]],["self"]]],[11,"from_cast","","",44,[[["i128x2"]],["self"]]],[11,"from_cast","","",44,[[["u128x2"]],["self"]]],[11,"from_cast","","",44,[[["m128x2"]],["self"]]],[11,"from_cast","","",44,[[["isizex2"]],["self"]]],[11,"from_cast","","",44,[[["usizex2"]],["self"]]],[11,"from_cast","","",44,[[["msizex2"]],["self"]]],[11,"from_cast","","",45,[[["i8x2"]],["self"]]],[11,"from_cast","","",45,[[["u8x2"]],["self"]]],[11,"from_cast","","",45,[[["m8x2"]],["self"]]],[11,"from_cast","","",45,[[["i16x2"]],["self"]]],[11,"from_cast","","",45,[[["u16x2"]],["self"]]],[11,"from_cast","","",45,[[["m16x2"]],["self"]]],[11,"from_cast","","",45,[[["i32x2"]],["self"]]],[11,"from_cast","","",45,[[["u32x2"]],["self"]]],[11,"from_cast","","",45,[[["f32x2"]],["self"]]],[11,"from_cast","","",45,[[["m32x2"]],["self"]]],[11,"from_cast","","",45,[[["i64x2"]],["self"]]],[11,"from_cast","","",45,[[["u64x2"]],["self"]]],[11,"from_cast","","",45,[[["f64x2"]],["self"]]],[11,"from_cast","","",45,[[["m64x2"]],["self"]]],[11,"from_cast","","",45,[[["i128x2"]],["self"]]],[11,"from_cast","","",45,[[["u128x2"]],["self"]]],[11,"from_cast","","",45,[[["m128x2"]],["self"]]],[11,"from_cast","","",45,[[["usizex2"]],["self"]]],[11,"from_cast","","",45,[[["msizex2"]],["self"]]],[11,"from_cast","","",46,[[["i8x2"]],["self"]]],[11,"from_cast","","",46,[[["u8x2"]],["self"]]],[11,"from_cast","","",46,[[["m8x2"]],["self"]]],[11,"from_cast","","",46,[[["i16x2"]],["self"]]],[11,"from_cast","","",46,[[["u16x2"]],["self"]]],[11,"from_cast","","",46,[[["m16x2"]],["self"]]],[11,"from_cast","","",46,[[["i32x2"]],["self"]]],[11,"from_cast","","",46,[[["u32x2"]],["self"]]],[11,"from_cast","","",46,[[["f32x2"]],["self"]]],[11,"from_cast","","",46,[[["m32x2"]],["self"]]],[11,"from_cast","","",46,[[["i64x2"]],["self"]]],[11,"from_cast","","",46,[[["u64x2"]],["self"]]],[11,"from_cast","","",46,[[["f64x2"]],["self"]]],[11,"from_cast","","",46,[[["m64x2"]],["self"]]],[11,"from_cast","","",46,[[["i128x2"]],["self"]]],[11,"from_cast","","",46,[[["u128x2"]],["self"]]],[11,"from_cast","","",46,[[["m128x2"]],["self"]]],[11,"from_cast","","",46,[[["isizex2"]],["self"]]],[11,"from_cast","","",46,[[["msizex2"]],["self"]]],[11,"from_cast","","",47,[[["i8x2"]],["self"]]],[11,"from_cast","","",47,[[["u8x2"]],["self"]]],[11,"from_cast","","",47,[[["m8x2"]],["self"]]],[11,"from_cast","","",47,[[["i16x2"]],["self"]]],[11,"from_cast","","",47,[[["u16x2"]],["self"]]],[11,"from_cast","","",47,[[["m16x2"]],["self"]]],[11,"from_cast","","",47,[[["i32x2"]],["self"]]],[11,"from_cast","","",47,[[["u32x2"]],["self"]]],[11,"from_cast","","",47,[[["f32x2"]],["self"]]],[11,"from_cast","","",47,[[["m32x2"]],["self"]]],[11,"from_cast","","",47,[[["i64x2"]],["self"]]],[11,"from_cast","","",47,[[["u64x2"]],["self"]]],[11,"from_cast","","",47,[[["f64x2"]],["self"]]],[11,"from_cast","","",47,[[["m64x2"]],["self"]]],[11,"from_cast","","",47,[[["i128x2"]],["self"]]],[11,"from_cast","","",47,[[["u128x2"]],["self"]]],[11,"from_cast","","",47,[[["m128x2"]],["self"]]],[11,"from_cast","","",47,[[["isizex2"]],["self"]]],[11,"from_cast","","",47,[[["usizex2"]],["self"]]],[11,"from_cast","","",48,[[["u8x32"]],["self"]]],[11,"from_cast","","",48,[[["m8x32"]],["self"]]],[11,"from_cast","","",48,[[["i16x32"]],["self"]]],[11,"from_cast","","",48,[[["u16x32"]],["self"]]],[11,"from_cast","","",48,[[["m16x32"]],["self"]]],[11,"from_cast","","",49,[[["i8x32"]],["self"]]],[11,"from_cast","","",49,[[["m8x32"]],["self"]]],[11,"from_cast","","",49,[[["i16x32"]],["self"]]],[11,"from_cast","","",49,[[["u16x32"]],["self"]]],[11,"from_cast","","",49,[[["m16x32"]],["self"]]],[11,"from_cast","","",50,[[["i8x32"]],["self"]]],[11,"from_cast","","",50,[[["u8x32"]],["self"]]],[11,"from_cast","","",50,[[["i16x32"]],["self"]]],[11,"from_cast","","",50,[[["u16x32"]],["self"]]],[11,"from_cast","","",50,[[["m16x32"]],["self"]]],[11,"from_cast","","",51,[[["i8x16"]],["self"]]],[11,"from_cast","","",51,[[["u8x16"]],["self"]]],[11,"from_cast","","",51,[[["m8x16"]],["self"]]],[11,"from_cast","","",51,[[["u16x16"]],["self"]]],[11,"from_cast","","",51,[[["m16x16"]],["self"]]],[11,"from_cast","","",51,[[["i32x16"]],["self"]]],[11,"from_cast","","",51,[[["u32x16"]],["self"]]],[11,"from_cast","","",51,[[["f32x16"]],["self"]]],[11,"from_cast","","",51,[[["m32x16"]],["self"]]],[11,"from_cast","","",52,[[["i8x16"]],["self"]]],[11,"from_cast","","",52,[[["u8x16"]],["self"]]],[11,"from_cast","","",52,[[["m8x16"]],["self"]]],[11,"from_cast","","",52,[[["i16x16"]],["self"]]],[11,"from_cast","","",52,[[["m16x16"]],["self"]]],[11,"from_cast","","",52,[[["i32x16"]],["self"]]],[11,"from_cast","","",52,[[["u32x16"]],["self"]]],[11,"from_cast","","",52,[[["f32x16"]],["self"]]],[11,"from_cast","","",52,[[["m32x16"]],["self"]]],[11,"from_cast","","",53,[[["i8x16"]],["self"]]],[11,"from_cast","","",53,[[["u8x16"]],["self"]]],[11,"from_cast","","",53,[[["m8x16"]],["self"]]],[11,"from_cast","","",53,[[["i16x16"]],["self"]]],[11,"from_cast","","",53,[[["u16x16"]],["self"]]],[11,"from_cast","","",53,[[["i32x16"]],["self"]]],[11,"from_cast","","",53,[[["u32x16"]],["self"]]],[11,"from_cast","","",53,[[["f32x16"]],["self"]]],[11,"from_cast","","",53,[[["m32x16"]],["self"]]],[11,"from_cast","","",54,[[["i8x8"]],["self"]]],[11,"from_cast","","",54,[[["u8x8"]],["self"]]],[11,"from_cast","","",54,[[["m8x8"]],["self"]]],[11,"from_cast","","",54,[[["i16x8"]],["self"]]],[11,"from_cast","","",54,[[["u16x8"]],["self"]]],[11,"from_cast","","",54,[[["m16x8"]],["self"]]],[11,"from_cast","","",54,[[["u32x8"]],["self"]]],[11,"from_cast","","",54,[[["f32x8"]],["self"]]],[11,"from_cast","","",54,[[["m32x8"]],["self"]]],[11,"from_cast","","",54,[[["i64x8"]],["self"]]],[11,"from_cast","","",54,[[["u64x8"]],["self"]]],[11,"from_cast","","",54,[[["f64x8"]],["self"]]],[11,"from_cast","","",54,[[["m64x8"]],["self"]]],[11,"from_cast","","",54,[[["isizex8"]],["self"]]],[11,"from_cast","","",54,[[["usizex8"]],["self"]]],[11,"from_cast","","",54,[[["msizex8"]],["self"]]],[11,"from_cast","","",55,[[["i8x8"]],["self"]]],[11,"from_cast","","",55,[[["u8x8"]],["self"]]],[11,"from_cast","","",55,[[["m8x8"]],["self"]]],[11,"from_cast","","",55,[[["i16x8"]],["self"]]],[11,"from_cast","","",55,[[["u16x8"]],["self"]]],[11,"from_cast","","",55,[[["m16x8"]],["self"]]],[11,"from_cast","","",55,[[["i32x8"]],["self"]]],[11,"from_cast","","",55,[[["f32x8"]],["self"]]],[11,"from_cast","","",55,[[["m32x8"]],["self"]]],[11,"from_cast","","",55,[[["i64x8"]],["self"]]],[11,"from_cast","","",55,[[["u64x8"]],["self"]]],[11,"from_cast","","",55,[[["f64x8"]],["self"]]],[11,"from_cast","","",55,[[["m64x8"]],["self"]]],[11,"from_cast","","",55,[[["isizex8"]],["self"]]],[11,"from_cast","","",55,[[["usizex8"]],["self"]]],[11,"from_cast","","",55,[[["msizex8"]],["self"]]],[11,"from_cast","","",56,[[["i8x8"]],["self"]]],[11,"from_cast","","",56,[[["u8x8"]],["self"]]],[11,"from_cast","","",56,[[["m8x8"]],["self"]]],[11,"from_cast","","",56,[[["i16x8"]],["self"]]],[11,"from_cast","","",56,[[["u16x8"]],["self"]]],[11,"from_cast","","",56,[[["m16x8"]],["self"]]],[11,"from_cast","","",56,[[["i32x8"]],["self"]]],[11,"from_cast","","",56,[[["u32x8"]],["self"]]],[11,"from_cast","","",56,[[["m32x8"]],["self"]]],[11,"from_cast","","",56,[[["i64x8"]],["self"]]],[11,"from_cast","","",56,[[["u64x8"]],["self"]]],[11,"from_cast","","",56,[[["f64x8"]],["self"]]],[11,"from_cast","","",56,[[["m64x8"]],["self"]]],[11,"from_cast","","",56,[[["isizex8"]],["self"]]],[11,"from_cast","","",56,[[["usizex8"]],["self"]]],[11,"from_cast","","",56,[[["msizex8"]],["self"]]],[11,"from_cast","","",57,[[["i8x8"]],["self"]]],[11,"from_cast","","",57,[[["u8x8"]],["self"]]],[11,"from_cast","","",57,[[["m8x8"]],["self"]]],[11,"from_cast","","",57,[[["i16x8"]],["self"]]],[11,"from_cast","","",57,[[["u16x8"]],["self"]]],[11,"from_cast","","",57,[[["m16x8"]],["self"]]],[11,"from_cast","","",57,[[["i32x8"]],["self"]]],[11,"from_cast","","",57,[[["u32x8"]],["self"]]],[11,"from_cast","","",57,[[["f32x8"]],["self"]]],[11,"from_cast","","",57,[[["i64x8"]],["self"]]],[11,"from_cast","","",57,[[["u64x8"]],["self"]]],[11,"from_cast","","",57,[[["f64x8"]],["self"]]],[11,"from_cast","","",57,[[["m64x8"]],["self"]]],[11,"from_cast","","",57,[[["isizex8"]],["self"]]],[11,"from_cast","","",57,[[["usizex8"]],["self"]]],[11,"from_cast","","",57,[[["msizex8"]],["self"]]],[11,"from_cast","","",58,[[["i8x4"]],["self"]]],[11,"from_cast","","",58,[[["u8x4"]],["self"]]],[11,"from_cast","","",58,[[["m8x4"]],["self"]]],[11,"from_cast","","",58,[[["i16x4"]],["self"]]],[11,"from_cast","","",58,[[["u16x4"]],["self"]]],[11,"from_cast","","",58,[[["m16x4"]],["self"]]],[11,"from_cast","","",58,[[["i32x4"]],["self"]]],[11,"from_cast","","",58,[[["u32x4"]],["self"]]],[11,"from_cast","","",58,[[["f32x4"]],["self"]]],[11,"from_cast","","",58,[[["m32x4"]],["self"]]],[11,"from_cast","","",58,[[["u64x4"]],["self"]]],[11,"from_cast","","",58,[[["f64x4"]],["self"]]],[11,"from_cast","","",58,[[["m64x4"]],["self"]]],[11,"from_cast","","",58,[[["i128x4"]],["self"]]],[11,"from_cast","","",58,[[["u128x4"]],["self"]]],[11,"from_cast","","",58,[[["m128x4"]],["self"]]],[11,"from_cast","","",58,[[["isizex4"]],["self"]]],[11,"from_cast","","",58,[[["usizex4"]],["self"]]],[11,"from_cast","","",58,[[["msizex4"]],["self"]]],[11,"from_cast","","",59,[[["i8x4"]],["self"]]],[11,"from_cast","","",59,[[["u8x4"]],["self"]]],[11,"from_cast","","",59,[[["m8x4"]],["self"]]],[11,"from_cast","","",59,[[["i16x4"]],["self"]]],[11,"from_cast","","",59,[[["u16x4"]],["self"]]],[11,"from_cast","","",59,[[["m16x4"]],["self"]]],[11,"from_cast","","",59,[[["i32x4"]],["self"]]],[11,"from_cast","","",59,[[["u32x4"]],["self"]]],[11,"from_cast","","",59,[[["f32x4"]],["self"]]],[11,"from_cast","","",59,[[["m32x4"]],["self"]]],[11,"from_cast","","",59,[[["i64x4"]],["self"]]],[11,"from_cast","","",59,[[["f64x4"]],["self"]]],[11,"from_cast","","",59,[[["m64x4"]],["self"]]],[11,"from_cast","","",59,[[["i128x4"]],["self"]]],[11,"from_cast","","",59,[[["u128x4"]],["self"]]],[11,"from_cast","","",59,[[["m128x4"]],["self"]]],[11,"from_cast","","",59,[[["isizex4"]],["self"]]],[11,"from_cast","","",59,[[["usizex4"]],["self"]]],[11,"from_cast","","",59,[[["msizex4"]],["self"]]],[11,"from_cast","","",60,[[["i8x4"]],["self"]]],[11,"from_cast","","",60,[[["u8x4"]],["self"]]],[11,"from_cast","","",60,[[["m8x4"]],["self"]]],[11,"from_cast","","",60,[[["i16x4"]],["self"]]],[11,"from_cast","","",60,[[["u16x4"]],["self"]]],[11,"from_cast","","",60,[[["m16x4"]],["self"]]],[11,"from_cast","","",60,[[["i32x4"]],["self"]]],[11,"from_cast","","",60,[[["u32x4"]],["self"]]],[11,"from_cast","","",60,[[["f32x4"]],["self"]]],[11,"from_cast","","",60,[[["m32x4"]],["self"]]],[11,"from_cast","","",60,[[["i64x4"]],["self"]]],[11,"from_cast","","",60,[[["u64x4"]],["self"]]],[11,"from_cast","","",60,[[["m64x4"]],["self"]]],[11,"from_cast","","",60,[[["i128x4"]],["self"]]],[11,"from_cast","","",60,[[["u128x4"]],["self"]]],[11,"from_cast","","",60,[[["m128x4"]],["self"]]],[11,"from_cast","","",60,[[["isizex4"]],["self"]]],[11,"from_cast","","",60,[[["usizex4"]],["self"]]],[11,"from_cast","","",60,[[["msizex4"]],["self"]]],[11,"from_cast","","",61,[[["i8x4"]],["self"]]],[11,"from_cast","","",61,[[["u8x4"]],["self"]]],[11,"from_cast","","",61,[[["m8x4"]],["self"]]],[11,"from_cast","","",61,[[["i16x4"]],["self"]]],[11,"from_cast","","",61,[[["u16x4"]],["self"]]],[11,"from_cast","","",61,[[["m16x4"]],["self"]]],[11,"from_cast","","",61,[[["i32x4"]],["self"]]],[11,"from_cast","","",61,[[["u32x4"]],["self"]]],[11,"from_cast","","",61,[[["f32x4"]],["self"]]],[11,"from_cast","","",61,[[["m32x4"]],["self"]]],[11,"from_cast","","",61,[[["i64x4"]],["self"]]],[11,"from_cast","","",61,[[["u64x4"]],["self"]]],[11,"from_cast","","",61,[[["f64x4"]],["self"]]],[11,"from_cast","","",61,[[["i128x4"]],["self"]]],[11,"from_cast","","",61,[[["u128x4"]],["self"]]],[11,"from_cast","","",61,[[["m128x4"]],["self"]]],[11,"from_cast","","",61,[[["isizex4"]],["self"]]],[11,"from_cast","","",61,[[["usizex4"]],["self"]]],[11,"from_cast","","",61,[[["msizex4"]],["self"]]],[11,"from_cast","","",62,[[["i8x2"]],["self"]]],[11,"from_cast","","",62,[[["u8x2"]],["self"]]],[11,"from_cast","","",62,[[["m8x2"]],["self"]]],[11,"from_cast","","",62,[[["i16x2"]],["self"]]],[11,"from_cast","","",62,[[["u16x2"]],["self"]]],[11,"from_cast","","",62,[[["m16x2"]],["self"]]],[11,"from_cast","","",62,[[["i32x2"]],["self"]]],[11,"from_cast","","",62,[[["u32x2"]],["self"]]],[11,"from_cast","","",62,[[["f32x2"]],["self"]]],[11,"from_cast","","",62,[[["m32x2"]],["self"]]],[11,"from_cast","","",62,[[["i64x2"]],["self"]]],[11,"from_cast","","",62,[[["u64x2"]],["self"]]],[11,"from_cast","","",62,[[["f64x2"]],["self"]]],[11,"from_cast","","",62,[[["m64x2"]],["self"]]],[11,"from_cast","","",62,[[["u128x2"]],["self"]]],[11,"from_cast","","",62,[[["m128x2"]],["self"]]],[11,"from_cast","","",62,[[["isizex2"]],["self"]]],[11,"from_cast","","",62,[[["usizex2"]],["self"]]],[11,"from_cast","","",62,[[["msizex2"]],["self"]]],[11,"from_cast","","",63,[[["i8x2"]],["self"]]],[11,"from_cast","","",63,[[["u8x2"]],["self"]]],[11,"from_cast","","",63,[[["m8x2"]],["self"]]],[11,"from_cast","","",63,[[["i16x2"]],["self"]]],[11,"from_cast","","",63,[[["u16x2"]],["self"]]],[11,"from_cast","","",63,[[["m16x2"]],["self"]]],[11,"from_cast","","",63,[[["i32x2"]],["self"]]],[11,"from_cast","","",63,[[["u32x2"]],["self"]]],[11,"from_cast","","",63,[[["f32x2"]],["self"]]],[11,"from_cast","","",63,[[["m32x2"]],["self"]]],[11,"from_cast","","",63,[[["i64x2"]],["self"]]],[11,"from_cast","","",63,[[["u64x2"]],["self"]]],[11,"from_cast","","",63,[[["f64x2"]],["self"]]],[11,"from_cast","","",63,[[["m64x2"]],["self"]]],[11,"from_cast","","",63,[[["i128x2"]],["self"]]],[11,"from_cast","","",63,[[["m128x2"]],["self"]]],[11,"from_cast","","",63,[[["isizex2"]],["self"]]],[11,"from_cast","","",63,[[["usizex2"]],["self"]]],[11,"from_cast","","",63,[[["msizex2"]],["self"]]],[11,"from_cast","","",64,[[["i8x2"]],["self"]]],[11,"from_cast","","",64,[[["u8x2"]],["self"]]],[11,"from_cast","","",64,[[["m8x2"]],["self"]]],[11,"from_cast","","",64,[[["i16x2"]],["self"]]],[11,"from_cast","","",64,[[["u16x2"]],["self"]]],[11,"from_cast","","",64,[[["m16x2"]],["self"]]],[11,"from_cast","","",64,[[["i32x2"]],["self"]]],[11,"from_cast","","",64,[[["u32x2"]],["self"]]],[11,"from_cast","","",64,[[["f32x2"]],["self"]]],[11,"from_cast","","",64,[[["m32x2"]],["self"]]],[11,"from_cast","","",64,[[["i64x2"]],["self"]]],[11,"from_cast","","",64,[[["u64x2"]],["self"]]],[11,"from_cast","","",64,[[["m64x2"]],["self"]]],[11,"from_cast","","",64,[[["f64x2"]],["self"]]],[11,"from_cast","","",64,[[["i128x2"]],["self"]]],[11,"from_cast","","",64,[[["u128x2"]],["self"]]],[11,"from_cast","","",64,[[["isizex2"]],["self"]]],[11,"from_cast","","",64,[[["usizex2"]],["self"]]],[11,"from_cast","","",64,[[["msizex2"]],["self"]]],[11,"from_cast","","",65,[[["i8x4"]],["self"]]],[11,"from_cast","","",65,[[["u8x4"]],["self"]]],[11,"from_cast","","",65,[[["m8x4"]],["self"]]],[11,"from_cast","","",65,[[["i16x4"]],["self"]]],[11,"from_cast","","",65,[[["u16x4"]],["self"]]],[11,"from_cast","","",65,[[["m16x4"]],["self"]]],[11,"from_cast","","",65,[[["i32x4"]],["self"]]],[11,"from_cast","","",65,[[["u32x4"]],["self"]]],[11,"from_cast","","",65,[[["f32x4"]],["self"]]],[11,"from_cast","","",65,[[["m32x4"]],["self"]]],[11,"from_cast","","",65,[[["i64x4"]],["self"]]],[11,"from_cast","","",65,[[["u64x4"]],["self"]]],[11,"from_cast","","",65,[[["f64x4"]],["self"]]],[11,"from_cast","","",65,[[["m64x4"]],["self"]]],[11,"from_cast","","",65,[[["i128x4"]],["self"]]],[11,"from_cast","","",65,[[["u128x4"]],["self"]]],[11,"from_cast","","",65,[[["m128x4"]],["self"]]],[11,"from_cast","","",65,[[["usizex4"]],["self"]]],[11,"from_cast","","",65,[[["msizex4"]],["self"]]],[11,"from_cast","","",66,[[["i8x4"]],["self"]]],[11,"from_cast","","",66,[[["u8x4"]],["self"]]],[11,"from_cast","","",66,[[["m8x4"]],["self"]]],[11,"from_cast","","",66,[[["i16x4"]],["self"]]],[11,"from_cast","","",66,[[["u16x4"]],["self"]]],[11,"from_cast","","",66,[[["m16x4"]],["self"]]],[11,"from_cast","","",66,[[["i32x4"]],["self"]]],[11,"from_cast","","",66,[[["u32x4"]],["self"]]],[11,"from_cast","","",66,[[["f32x4"]],["self"]]],[11,"from_cast","","",66,[[["m32x4"]],["self"]]],[11,"from_cast","","",66,[[["i64x4"]],["self"]]],[11,"from_cast","","",66,[[["u64x4"]],["self"]]],[11,"from_cast","","",66,[[["f64x4"]],["self"]]],[11,"from_cast","","",66,[[["m64x4"]],["self"]]],[11,"from_cast","","",66,[[["i128x4"]],["self"]]],[11,"from_cast","","",66,[[["u128x4"]],["self"]]],[11,"from_cast","","",66,[[["m128x4"]],["self"]]],[11,"from_cast","","",66,[[["isizex4"]],["self"]]],[11,"from_cast","","",66,[[["msizex4"]],["self"]]],[11,"from_cast","","",67,[[["i8x4"]],["self"]]],[11,"from_cast","","",67,[[["u8x4"]],["self"]]],[11,"from_cast","","",67,[[["m8x4"]],["self"]]],[11,"from_cast","","",67,[[["i16x4"]],["self"]]],[11,"from_cast","","",67,[[["u16x4"]],["self"]]],[11,"from_cast","","",67,[[["m16x4"]],["self"]]],[11,"from_cast","","",67,[[["i32x4"]],["self"]]],[11,"from_cast","","",67,[[["u32x4"]],["self"]]],[11,"from_cast","","",67,[[["f32x4"]],["self"]]],[11,"from_cast","","",67,[[["m32x4"]],["self"]]],[11,"from_cast","","",67,[[["i64x4"]],["self"]]],[11,"from_cast","","",67,[[["u64x4"]],["self"]]],[11,"from_cast","","",67,[[["f64x4"]],["self"]]],[11,"from_cast","","",67,[[["m64x4"]],["self"]]],[11,"from_cast","","",67,[[["i128x4"]],["self"]]],[11,"from_cast","","",67,[[["u128x4"]],["self"]]],[11,"from_cast","","",67,[[["m128x4"]],["self"]]],[11,"from_cast","","",67,[[["isizex4"]],["self"]]],[11,"from_cast","","",67,[[["usizex4"]],["self"]]],[11,"from_cast","","",68,[[["u8x64"]],["self"]]],[11,"from_cast","","",68,[[["m8x64"]],["self"]]],[11,"from_cast","","",69,[[["i8x64"]],["self"]]],[11,"from_cast","","",69,[[["m8x64"]],["self"]]],[11,"from_cast","","",70,[[["i8x64"]],["self"]]],[11,"from_cast","","",70,[[["u8x64"]],["self"]]],[11,"from_cast","","",71,[[["i8x32"]],["self"]]],[11,"from_cast","","",71,[[["u8x32"]],["self"]]],[11,"from_cast","","",71,[[["m8x32"]],["self"]]],[11,"from_cast","","",71,[[["u16x32"]],["self"]]],[11,"from_cast","","",71,[[["m16x32"]],["self"]]],[11,"from_cast","","",72,[[["i8x32"]],["self"]]],[11,"from_cast","","",72,[[["u8x32"]],["self"]]],[11,"from_cast","","",72,[[["m8x32"]],["self"]]],[11,"from_cast","","",72,[[["i16x32"]],["self"]]],[11,"from_cast","","",72,[[["m16x32"]],["self"]]],[11,"from_cast","","",73,[[["i8x32"]],["self"]]],[11,"from_cast","","",73,[[["u8x32"]],["self"]]],[11,"from_cast","","",73,[[["m8x32"]],["self"]]],[11,"from_cast","","",73,[[["i16x32"]],["self"]]],[11,"from_cast","","",73,[[["u16x32"]],["self"]]],[11,"from_cast","","",74,[[["i8x16"]],["self"]]],[11,"from_cast","","",74,[[["u8x16"]],["self"]]],[11,"from_cast","","",74,[[["m8x16"]],["self"]]],[11,"from_cast","","",74,[[["i16x16"]],["self"]]],[11,"from_cast","","",74,[[["u16x16"]],["self"]]],[11,"from_cast","","",74,[[["m16x16"]],["self"]]],[11,"from_cast","","",74,[[["u32x16"]],["self"]]],[11,"from_cast","","",74,[[["f32x16"]],["self"]]],[11,"from_cast","","",74,[[["m32x16"]],["self"]]],[11,"from_cast","","",75,[[["i8x16"]],["self"]]],[11,"from_cast","","",75,[[["u8x16"]],["self"]]],[11,"from_cast","","",75,[[["m8x16"]],["self"]]],[11,"from_cast","","",75,[[["i16x16"]],["self"]]],[11,"from_cast","","",75,[[["u16x16"]],["self"]]],[11,"from_cast","","",75,[[["m16x16"]],["self"]]],[11,"from_cast","","",75,[[["i32x16"]],["self"]]],[11,"from_cast","","",75,[[["f32x16"]],["self"]]],[11,"from_cast","","",75,[[["m32x16"]],["self"]]],[11,"from_cast","","",76,[[["i8x16"]],["self"]]],[11,"from_cast","","",76,[[["u8x16"]],["self"]]],[11,"from_cast","","",76,[[["m8x16"]],["self"]]],[11,"from_cast","","",76,[[["i16x16"]],["self"]]],[11,"from_cast","","",76,[[["u16x16"]],["self"]]],[11,"from_cast","","",76,[[["m16x16"]],["self"]]],[11,"from_cast","","",76,[[["i32x16"]],["self"]]],[11,"from_cast","","",76,[[["u32x16"]],["self"]]],[11,"from_cast","","",76,[[["m32x16"]],["self"]]],[11,"from_cast","","",77,[[["i8x16"]],["self"]]],[11,"from_cast","","",77,[[["u8x16"]],["self"]]],[11,"from_cast","","",77,[[["m8x16"]],["self"]]],[11,"from_cast","","",77,[[["i16x16"]],["self"]]],[11,"from_cast","","",77,[[["u16x16"]],["self"]]],[11,"from_cast","","",77,[[["m16x16"]],["self"]]],[11,"from_cast","","",77,[[["i32x16"]],["self"]]],[11,"from_cast","","",77,[[["u32x16"]],["self"]]],[11,"from_cast","","",77,[[["f32x16"]],["self"]]],[11,"from_cast","","",78,[[["i8x8"]],["self"]]],[11,"from_cast","","",78,[[["u8x8"]],["self"]]],[11,"from_cast","","",78,[[["m8x8"]],["self"]]],[11,"from_cast","","",78,[[["i16x8"]],["self"]]],[11,"from_cast","","",78,[[["u16x8"]],["self"]]],[11,"from_cast","","",78,[[["m16x8"]],["self"]]],[11,"from_cast","","",78,[[["i32x8"]],["self"]]],[11,"from_cast","","",78,[[["u32x8"]],["self"]]],[11,"from_cast","","",78,[[["f32x8"]],["self"]]],[11,"from_cast","","",78,[[["m32x8"]],["self"]]],[11,"from_cast","","",78,[[["u64x8"]],["self"]]],[11,"from_cast","","",78,[[["f64x8"]],["self"]]],[11,"from_cast","","",78,[[["m64x8"]],["self"]]],[11,"from_cast","","",78,[[["isizex8"]],["self"]]],[11,"from_cast","","",78,[[["usizex8"]],["self"]]],[11,"from_cast","","",78,[[["msizex8"]],["self"]]],[11,"from_cast","","",79,[[["i8x8"]],["self"]]],[11,"from_cast","","",79,[[["u8x8"]],["self"]]],[11,"from_cast","","",79,[[["m8x8"]],["self"]]],[11,"from_cast","","",79,[[["i16x8"]],["self"]]],[11,"from_cast","","",79,[[["u16x8"]],["self"]]],[11,"from_cast","","",79,[[["m16x8"]],["self"]]],[11,"from_cast","","",79,[[["i32x8"]],["self"]]],[11,"from_cast","","",79,[[["u32x8"]],["self"]]],[11,"from_cast","","",79,[[["f32x8"]],["self"]]],[11,"from_cast","","",79,[[["m32x8"]],["self"]]],[11,"from_cast","","",79,[[["i64x8"]],["self"]]],[11,"from_cast","","",79,[[["f64x8"]],["self"]]],[11,"from_cast","","",79,[[["m64x8"]],["self"]]],[11,"from_cast","","",79,[[["isizex8"]],["self"]]],[11,"from_cast","","",79,[[["usizex8"]],["self"]]],[11,"from_cast","","",79,[[["msizex8"]],["self"]]],[11,"from_cast","","",80,[[["i8x8"]],["self"]]],[11,"from_cast","","",80,[[["u8x8"]],["self"]]],[11,"from_cast","","",80,[[["m8x8"]],["self"]]],[11,"from_cast","","",80,[[["i16x8"]],["self"]]],[11,"from_cast","","",80,[[["u16x8"]],["self"]]],[11,"from_cast","","",80,[[["m16x8"]],["self"]]],[11,"from_cast","","",80,[[["i32x8"]],["self"]]],[11,"from_cast","","",80,[[["u32x8"]],["self"]]],[11,"from_cast","","",80,[[["f32x8"]],["self"]]],[11,"from_cast","","",80,[[["m32x8"]],["self"]]],[11,"from_cast","","",80,[[["i64x8"]],["self"]]],[11,"from_cast","","",80,[[["u64x8"]],["self"]]],[11,"from_cast","","",80,[[["m64x8"]],["self"]]],[11,"from_cast","","",80,[[["isizex8"]],["self"]]],[11,"from_cast","","",80,[[["usizex8"]],["self"]]],[11,"from_cast","","",80,[[["msizex8"]],["self"]]],[11,"from_cast","","",81,[[["i8x8"]],["self"]]],[11,"from_cast","","",81,[[["u8x8"]],["self"]]],[11,"from_cast","","",81,[[["m8x8"]],["self"]]],[11,"from_cast","","",81,[[["i16x8"]],["self"]]],[11,"from_cast","","",81,[[["u16x8"]],["self"]]],[11,"from_cast","","",81,[[["m16x8"]],["self"]]],[11,"from_cast","","",81,[[["i32x8"]],["self"]]],[11,"from_cast","","",81,[[["u32x8"]],["self"]]],[11,"from_cast","","",81,[[["f32x8"]],["self"]]],[11,"from_cast","","",81,[[["m32x8"]],["self"]]],[11,"from_cast","","",81,[[["i64x8"]],["self"]]],[11,"from_cast","","",81,[[["u64x8"]],["self"]]],[11,"from_cast","","",81,[[["f64x8"]],["self"]]],[11,"from_cast","","",81,[[["isizex8"]],["self"]]],[11,"from_cast","","",81,[[["usizex8"]],["self"]]],[11,"from_cast","","",81,[[["msizex8"]],["self"]]],[11,"from_cast","","",82,[[["i8x4"]],["self"]]],[11,"from_cast","","",82,[[["u8x4"]],["self"]]],[11,"from_cast","","",82,[[["m8x4"]],["self"]]],[11,"from_cast","","",82,[[["i16x4"]],["self"]]],[11,"from_cast","","",82,[[["u16x4"]],["self"]]],[11,"from_cast","","",82,[[["m16x4"]],["self"]]],[11,"from_cast","","",82,[[["i32x4"]],["self"]]],[11,"from_cast","","",82,[[["u32x4"]],["self"]]],[11,"from_cast","","",82,[[["f32x4"]],["self"]]],[11,"from_cast","","",82,[[["m32x4"]],["self"]]],[11,"from_cast","","",82,[[["i64x4"]],["self"]]],[11,"from_cast","","",82,[[["u64x4"]],["self"]]],[11,"from_cast","","",82,[[["f64x4"]],["self"]]],[11,"from_cast","","",82,[[["m64x4"]],["self"]]],[11,"from_cast","","",82,[[["u128x4"]],["self"]]],[11,"from_cast","","",82,[[["m128x4"]],["self"]]],[11,"from_cast","","",82,[[["isizex4"]],["self"]]],[11,"from_cast","","",82,[[["usizex4"]],["self"]]],[11,"from_cast","","",82,[[["msizex4"]],["self"]]],[11,"from_cast","","",83,[[["i8x4"]],["self"]]],[11,"from_cast","","",83,[[["u8x4"]],["self"]]],[11,"from_cast","","",83,[[["m8x4"]],["self"]]],[11,"from_cast","","",83,[[["i16x4"]],["self"]]],[11,"from_cast","","",83,[[["u16x4"]],["self"]]],[11,"from_cast","","",83,[[["m16x4"]],["self"]]],[11,"from_cast","","",83,[[["i32x4"]],["self"]]],[11,"from_cast","","",83,[[["u32x4"]],["self"]]],[11,"from_cast","","",83,[[["f32x4"]],["self"]]],[11,"from_cast","","",83,[[["m32x4"]],["self"]]],[11,"from_cast","","",83,[[["i64x4"]],["self"]]],[11,"from_cast","","",83,[[["u64x4"]],["self"]]],[11,"from_cast","","",83,[[["f64x4"]],["self"]]],[11,"from_cast","","",83,[[["m64x4"]],["self"]]],[11,"from_cast","","",83,[[["i128x4"]],["self"]]],[11,"from_cast","","",83,[[["m128x4"]],["self"]]],[11,"from_cast","","",83,[[["isizex4"]],["self"]]],[11,"from_cast","","",83,[[["usizex4"]],["self"]]],[11,"from_cast","","",83,[[["msizex4"]],["self"]]],[11,"from_cast","","",84,[[["i8x4"]],["self"]]],[11,"from_cast","","",84,[[["u8x4"]],["self"]]],[11,"from_cast","","",84,[[["m8x4"]],["self"]]],[11,"from_cast","","",84,[[["i16x4"]],["self"]]],[11,"from_cast","","",84,[[["u16x4"]],["self"]]],[11,"from_cast","","",84,[[["m16x4"]],["self"]]],[11,"from_cast","","",84,[[["i32x4"]],["self"]]],[11,"from_cast","","",84,[[["u32x4"]],["self"]]],[11,"from_cast","","",84,[[["f32x4"]],["self"]]],[11,"from_cast","","",84,[[["m32x4"]],["self"]]],[11,"from_cast","","",84,[[["i64x4"]],["self"]]],[11,"from_cast","","",84,[[["u64x4"]],["self"]]],[11,"from_cast","","",84,[[["m64x4"]],["self"]]],[11,"from_cast","","",84,[[["f64x4"]],["self"]]],[11,"from_cast","","",84,[[["i128x4"]],["self"]]],[11,"from_cast","","",84,[[["u128x4"]],["self"]]],[11,"from_cast","","",84,[[["isizex4"]],["self"]]],[11,"from_cast","","",84,[[["usizex4"]],["self"]]],[11,"from_cast","","",84,[[["msizex4"]],["self"]]],[11,"from_cast","","",85,[[["i8x8"]],["self"]]],[11,"from_cast","","",85,[[["u8x8"]],["self"]]],[11,"from_cast","","",85,[[["m8x8"]],["self"]]],[11,"from_cast","","",85,[[["i16x8"]],["self"]]],[11,"from_cast","","",85,[[["u16x8"]],["self"]]],[11,"from_cast","","",85,[[["m16x8"]],["self"]]],[11,"from_cast","","",85,[[["i32x8"]],["self"]]],[11,"from_cast","","",85,[[["u32x8"]],["self"]]],[11,"from_cast","","",85,[[["f32x8"]],["self"]]],[11,"from_cast","","",85,[[["m32x8"]],["self"]]],[11,"from_cast","","",85,[[["i64x8"]],["self"]]],[11,"from_cast","","",85,[[["u64x8"]],["self"]]],[11,"from_cast","","",85,[[["f64x8"]],["self"]]],[11,"from_cast","","",85,[[["m64x8"]],["self"]]],[11,"from_cast","","",85,[[["usizex8"]],["self"]]],[11,"from_cast","","",85,[[["msizex8"]],["self"]]],[11,"from_cast","","",86,[[["i8x8"]],["self"]]],[11,"from_cast","","",86,[[["u8x8"]],["self"]]],[11,"from_cast","","",86,[[["m8x8"]],["self"]]],[11,"from_cast","","",86,[[["i16x8"]],["self"]]],[11,"from_cast","","",86,[[["u16x8"]],["self"]]],[11,"from_cast","","",86,[[["m16x8"]],["self"]]],[11,"from_cast","","",86,[[["i32x8"]],["self"]]],[11,"from_cast","","",86,[[["u32x8"]],["self"]]],[11,"from_cast","","",86,[[["f32x8"]],["self"]]],[11,"from_cast","","",86,[[["m32x8"]],["self"]]],[11,"from_cast","","",86,[[["i64x8"]],["self"]]],[11,"from_cast","","",86,[[["u64x8"]],["self"]]],[11,"from_cast","","",86,[[["f64x8"]],["self"]]],[11,"from_cast","","",86,[[["m64x8"]],["self"]]],[11,"from_cast","","",86,[[["isizex8"]],["self"]]],[11,"from_cast","","",86,[[["msizex8"]],["self"]]],[11,"from_cast","","",87,[[["i8x8"]],["self"]]],[11,"from_cast","","",87,[[["u8x8"]],["self"]]],[11,"from_cast","","",87,[[["m8x8"]],["self"]]],[11,"from_cast","","",87,[[["i16x8"]],["self"]]],[11,"from_cast","","",87,[[["u16x8"]],["self"]]],[11,"from_cast","","",87,[[["m16x8"]],["self"]]],[11,"from_cast","","",87,[[["i32x8"]],["self"]]],[11,"from_cast","","",87,[[["u32x8"]],["self"]]],[11,"from_cast","","",87,[[["f32x8"]],["self"]]],[11,"from_cast","","",87,[[["m32x8"]],["self"]]],[11,"from_cast","","",87,[[["i64x8"]],["self"]]],[11,"from_cast","","",87,[[["u64x8"]],["self"]]],[11,"from_cast","","",87,[[["f64x8"]],["self"]]],[11,"from_cast","","",87,[[["m64x8"]],["self"]]],[11,"from_cast","","",87,[[["isizex8"]],["self"]]],[11,"from_cast","","",87,[[["usizex8"]],["self"]]],[11,"from_bits","","",12,[[["u8x2"]],["self"]]],[11,"from_bits","","",12,[[["m8x2"]],["self"]]],[11,"from_bits","","",13,[[["i8x2"]],["self"]]],[11,"from_bits","","",13,[[["m8x2"]],["self"]]],[11,"from_bits","","",15,[[["u8x4"]],["self"]]],[11,"from_bits","","",15,[[["m8x4"]],["self"]]],[11,"from_bits","","",15,[[["i16x2"]],["self"]]],[11,"from_bits","","",15,[[["u16x2"]],["self"]]],[11,"from_bits","","",15,[[["m16x2"]],["self"]]],[11,"from_bits","","",16,[[["i8x4"]],["self"]]],[11,"from_bits","","",16,[[["m8x4"]],["self"]]],[11,"from_bits","","",16,[[["i16x2"]],["self"]]],[11,"from_bits","","",16,[[["u16x2"]],["self"]]],[11,"from_bits","","",16,[[["m16x2"]],["self"]]],[11,"from_bits","","",17,[[["m16x2"]],["self"]]],[11,"from_bits","","",18,[[["i8x4"]],["self"]]],[11,"from_bits","","",18,[[["u8x4"]],["self"]]],[11,"from_bits","","",18,[[["m8x4"]],["self"]]],[11,"from_bits","","",18,[[["u16x2"]],["self"]]],[11,"from_bits","","",18,[[["m16x2"]],["self"]]],[11,"from_bits","","",19,[[["i8x4"]],["self"]]],[11,"from_bits","","",19,[[["u8x4"]],["self"]]],[11,"from_bits","","",19,[[["m8x4"]],["self"]]],[11,"from_bits","","",19,[[["i16x2"]],["self"]]],[11,"from_bits","","",19,[[["m16x2"]],["self"]]],[11,"from_bits","","",21,[[["u8x8"]],["self"]]],[11,"from_bits","","",21,[[["m8x8"]],["self"]]],[11,"from_bits","","",21,[[["i16x4"]],["self"]]],[11,"from_bits","","",21,[[["u16x4"]],["self"]]],[11,"from_bits","","",21,[[["m16x4"]],["self"]]],[11,"from_bits","","",21,[[["i32x2"]],["self"]]],[11,"from_bits","","",21,[[["u32x2"]],["self"]]],[11,"from_bits","","",21,[[["f32x2"]],["self"]]],[11,"from_bits","","",21,[[["m32x2"]],["self"]]],[11,"from_bits","","",22,[[["i8x8"]],["self"]]],[11,"from_bits","","",22,[[["m8x8"]],["self"]]],[11,"from_bits","","",22,[[["i16x4"]],["self"]]],[11,"from_bits","","",22,[[["u16x4"]],["self"]]],[11,"from_bits","","",22,[[["m16x4"]],["self"]]],[11,"from_bits","","",22,[[["i32x2"]],["self"]]],[11,"from_bits","","",22,[[["u32x2"]],["self"]]],[11,"from_bits","","",22,[[["f32x2"]],["self"]]],[11,"from_bits","","",22,[[["m32x2"]],["self"]]],[11,"from_bits","","",23,[[["m16x4"]],["self"]]],[11,"from_bits","","",23,[[["m32x2"]],["self"]]],[11,"from_bits","","",24,[[["i8x8"]],["self"]]],[11,"from_bits","","",24,[[["u8x8"]],["self"]]],[11,"from_bits","","",24,[[["m8x8"]],["self"]]],[11,"from_bits","","",24,[[["u16x4"]],["self"]]],[11,"from_bits","","",24,[[["m16x4"]],["self"]]],[11,"from_bits","","",24,[[["i32x2"]],["self"]]],[11,"from_bits","","",24,[[["u32x2"]],["self"]]],[11,"from_bits","","",24,[[["f32x2"]],["self"]]],[11,"from_bits","","",24,[[["m32x2"]],["self"]]],[11,"from_bits","","",25,[[["i8x8"]],["self"]]],[11,"from_bits","","",25,[[["u8x8"]],["self"]]],[11,"from_bits","","",25,[[["m8x8"]],["self"]]],[11,"from_bits","","",25,[[["i16x4"]],["self"]]],[11,"from_bits","","",25,[[["m16x4"]],["self"]]],[11,"from_bits","","",25,[[["i32x2"]],["self"]]],[11,"from_bits","","",25,[[["u32x2"]],["self"]]],[11,"from_bits","","",25,[[["f32x2"]],["self"]]],[11,"from_bits","","",25,[[["m32x2"]],["self"]]],[11,"from_bits","","",26,[[["m32x2"]],["self"]]],[11,"from_bits","","",27,[[["i8x8"]],["self"]]],[11,"from_bits","","",27,[[["u8x8"]],["self"]]],[11,"from_bits","","",27,[[["m8x8"]],["self"]]],[11,"from_bits","","",27,[[["i16x4"]],["self"]]],[11,"from_bits","","",27,[[["u16x4"]],["self"]]],[11,"from_bits","","",27,[[["m16x4"]],["self"]]],[11,"from_bits","","",27,[[["u32x2"]],["self"]]],[11,"from_bits","","",27,[[["f32x2"]],["self"]]],[11,"from_bits","","",27,[[["m32x2"]],["self"]]],[11,"from_bits","","",28,[[["i8x8"]],["self"]]],[11,"from_bits","","",28,[[["u8x8"]],["self"]]],[11,"from_bits","","",28,[[["m8x8"]],["self"]]],[11,"from_bits","","",28,[[["i16x4"]],["self"]]],[11,"from_bits","","",28,[[["u16x4"]],["self"]]],[11,"from_bits","","",28,[[["m16x4"]],["self"]]],[11,"from_bits","","",28,[[["i32x2"]],["self"]]],[11,"from_bits","","",28,[[["f32x2"]],["self"]]],[11,"from_bits","","",28,[[["m32x2"]],["self"]]],[11,"from_bits","","",29,[[["i8x8"]],["self"]]],[11,"from_bits","","",29,[[["u8x8"]],["self"]]],[11,"from_bits","","",29,[[["m8x8"]],["self"]]],[11,"from_bits","","",29,[[["i16x4"]],["self"]]],[11,"from_bits","","",29,[[["u16x4"]],["self"]]],[11,"from_bits","","",29,[[["m16x4"]],["self"]]],[11,"from_bits","","",29,[[["i32x2"]],["self"]]],[11,"from_bits","","",29,[[["u32x2"]],["self"]]],[11,"from_bits","","",29,[[["m32x2"]],["self"]]],[11,"from_bits","","",31,[[["u8x16"]],["self"]]],[11,"from_bits","","",31,[[["m8x16"]],["self"]]],[11,"from_bits","","",31,[[["i16x8"]],["self"]]],[11,"from_bits","","",31,[[["u16x8"]],["self"]]],[11,"from_bits","","",31,[[["m16x8"]],["self"]]],[11,"from_bits","","",31,[[["i32x4"]],["self"]]],[11,"from_bits","","",31,[[["u32x4"]],["self"]]],[11,"from_bits","","",31,[[["f32x4"]],["self"]]],[11,"from_bits","","",31,[[["m32x4"]],["self"]]],[11,"from_bits","","",31,[[["i64x2"]],["self"]]],[11,"from_bits","","",31,[[["u64x2"]],["self"]]],[11,"from_bits","","",31,[[["f64x2"]],["self"]]],[11,"from_bits","","",31,[[["m64x2"]],["self"]]],[11,"from_bits","","",31,[[["i128x1"]],["self"]]],[11,"from_bits","","",31,[[["u128x1"]],["self"]]],[11,"from_bits","","",31,[[["m128x1"]],["self"]]],[11,"from_bits","","",32,[[["i8x16"]],["self"]]],[11,"from_bits","","",32,[[["m8x16"]],["self"]]],[11,"from_bits","","",32,[[["i16x8"]],["self"]]],[11,"from_bits","","",32,[[["u16x8"]],["self"]]],[11,"from_bits","","",32,[[["m16x8"]],["self"]]],[11,"from_bits","","",32,[[["i32x4"]],["self"]]],[11,"from_bits","","",32,[[["u32x4"]],["self"]]],[11,"from_bits","","",32,[[["f32x4"]],["self"]]],[11,"from_bits","","",32,[[["m32x4"]],["self"]]],[11,"from_bits","","",32,[[["i64x2"]],["self"]]],[11,"from_bits","","",32,[[["u64x2"]],["self"]]],[11,"from_bits","","",32,[[["f64x2"]],["self"]]],[11,"from_bits","","",32,[[["m64x2"]],["self"]]],[11,"from_bits","","",32,[[["i128x1"]],["self"]]],[11,"from_bits","","",32,[[["u128x1"]],["self"]]],[11,"from_bits","","",32,[[["m128x1"]],["self"]]],[11,"from_bits","","",33,[[["m16x8"]],["self"]]],[11,"from_bits","","",33,[[["m32x4"]],["self"]]],[11,"from_bits","","",33,[[["m64x2"]],["self"]]],[11,"from_bits","","",33,[[["m128x1"]],["self"]]],[11,"from_bits","","",34,[[["i8x16"]],["self"]]],[11,"from_bits","","",34,[[["u8x16"]],["self"]]],[11,"from_bits","","",34,[[["m8x16"]],["self"]]],[11,"from_bits","","",34,[[["u16x8"]],["self"]]],[11,"from_bits","","",34,[[["m16x8"]],["self"]]],[11,"from_bits","","",34,[[["i32x4"]],["self"]]],[11,"from_bits","","",34,[[["u32x4"]],["self"]]],[11,"from_bits","","",34,[[["f32x4"]],["self"]]],[11,"from_bits","","",34,[[["m32x4"]],["self"]]],[11,"from_bits","","",34,[[["i64x2"]],["self"]]],[11,"from_bits","","",34,[[["u64x2"]],["self"]]],[11,"from_bits","","",34,[[["f64x2"]],["self"]]],[11,"from_bits","","",34,[[["m64x2"]],["self"]]],[11,"from_bits","","",34,[[["i128x1"]],["self"]]],[11,"from_bits","","",34,[[["u128x1"]],["self"]]],[11,"from_bits","","",34,[[["m128x1"]],["self"]]],[11,"from_bits","","",35,[[["i8x16"]],["self"]]],[11,"from_bits","","",35,[[["u8x16"]],["self"]]],[11,"from_bits","","",35,[[["m8x16"]],["self"]]],[11,"from_bits","","",35,[[["i16x8"]],["self"]]],[11,"from_bits","","",35,[[["m16x8"]],["self"]]],[11,"from_bits","","",35,[[["i32x4"]],["self"]]],[11,"from_bits","","",35,[[["u32x4"]],["self"]]],[11,"from_bits","","",35,[[["f32x4"]],["self"]]],[11,"from_bits","","",35,[[["m32x4"]],["self"]]],[11,"from_bits","","",35,[[["i64x2"]],["self"]]],[11,"from_bits","","",35,[[["u64x2"]],["self"]]],[11,"from_bits","","",35,[[["f64x2"]],["self"]]],[11,"from_bits","","",35,[[["m64x2"]],["self"]]],[11,"from_bits","","",35,[[["i128x1"]],["self"]]],[11,"from_bits","","",35,[[["u128x1"]],["self"]]],[11,"from_bits","","",35,[[["m128x1"]],["self"]]],[11,"from_bits","","",36,[[["m32x4"]],["self"]]],[11,"from_bits","","",36,[[["m64x2"]],["self"]]],[11,"from_bits","","",36,[[["m128x1"]],["self"]]],[11,"from_bits","","",37,[[["i8x16"]],["self"]]],[11,"from_bits","","",37,[[["u8x16"]],["self"]]],[11,"from_bits","","",37,[[["m8x16"]],["self"]]],[11,"from_bits","","",37,[[["i16x8"]],["self"]]],[11,"from_bits","","",37,[[["u16x8"]],["self"]]],[11,"from_bits","","",37,[[["m16x8"]],["self"]]],[11,"from_bits","","",37,[[["u32x4"]],["self"]]],[11,"from_bits","","",37,[[["f32x4"]],["self"]]],[11,"from_bits","","",37,[[["m32x4"]],["self"]]],[11,"from_bits","","",37,[[["i64x2"]],["self"]]],[11,"from_bits","","",37,[[["u64x2"]],["self"]]],[11,"from_bits","","",37,[[["f64x2"]],["self"]]],[11,"from_bits","","",37,[[["m64x2"]],["self"]]],[11,"from_bits","","",37,[[["i128x1"]],["self"]]],[11,"from_bits","","",37,[[["u128x1"]],["self"]]],[11,"from_bits","","",37,[[["m128x1"]],["self"]]],[11,"from_bits","","",38,[[["i8x16"]],["self"]]],[11,"from_bits","","",38,[[["u8x16"]],["self"]]],[11,"from_bits","","",38,[[["m8x16"]],["self"]]],[11,"from_bits","","",38,[[["i16x8"]],["self"]]],[11,"from_bits","","",38,[[["u16x8"]],["self"]]],[11,"from_bits","","",38,[[["m16x8"]],["self"]]],[11,"from_bits","","",38,[[["i32x4"]],["self"]]],[11,"from_bits","","",38,[[["f32x4"]],["self"]]],[11,"from_bits","","",38,[[["m32x4"]],["self"]]],[11,"from_bits","","",38,[[["i64x2"]],["self"]]],[11,"from_bits","","",38,[[["u64x2"]],["self"]]],[11,"from_bits","","",38,[[["f64x2"]],["self"]]],[11,"from_bits","","",38,[[["m64x2"]],["self"]]],[11,"from_bits","","",38,[[["i128x1"]],["self"]]],[11,"from_bits","","",38,[[["u128x1"]],["self"]]],[11,"from_bits","","",38,[[["m128x1"]],["self"]]],[11,"from_bits","","",39,[[["i8x16"]],["self"]]],[11,"from_bits","","",39,[[["u8x16"]],["self"]]],[11,"from_bits","","",39,[[["m8x16"]],["self"]]],[11,"from_bits","","",39,[[["i16x8"]],["self"]]],[11,"from_bits","","",39,[[["u16x8"]],["self"]]],[11,"from_bits","","",39,[[["m16x8"]],["self"]]],[11,"from_bits","","",39,[[["i32x4"]],["self"]]],[11,"from_bits","","",39,[[["u32x4"]],["self"]]],[11,"from_bits","","",39,[[["m32x4"]],["self"]]],[11,"from_bits","","",39,[[["i64x2"]],["self"]]],[11,"from_bits","","",39,[[["u64x2"]],["self"]]],[11,"from_bits","","",39,[[["f64x2"]],["self"]]],[11,"from_bits","","",39,[[["m64x2"]],["self"]]],[11,"from_bits","","",39,[[["i128x1"]],["self"]]],[11,"from_bits","","",39,[[["u128x1"]],["self"]]],[11,"from_bits","","",39,[[["m128x1"]],["self"]]],[11,"from_bits","","",40,[[["m64x2"]],["self"]]],[11,"from_bits","","",40,[[["m128x1"]],["self"]]],[11,"from_bits","","",41,[[["i8x16"]],["self"]]],[11,"from_bits","","",41,[[["u8x16"]],["self"]]],[11,"from_bits","","",41,[[["m8x16"]],["self"]]],[11,"from_bits","","",41,[[["i16x8"]],["self"]]],[11,"from_bits","","",41,[[["u16x8"]],["self"]]],[11,"from_bits","","",41,[[["m16x8"]],["self"]]],[11,"from_bits","","",41,[[["i32x4"]],["self"]]],[11,"from_bits","","",41,[[["u32x4"]],["self"]]],[11,"from_bits","","",41,[[["f32x4"]],["self"]]],[11,"from_bits","","",41,[[["m32x4"]],["self"]]],[11,"from_bits","","",41,[[["u64x2"]],["self"]]],[11,"from_bits","","",41,[[["f64x2"]],["self"]]],[11,"from_bits","","",41,[[["m64x2"]],["self"]]],[11,"from_bits","","",41,[[["i128x1"]],["self"]]],[11,"from_bits","","",41,[[["u128x1"]],["self"]]],[11,"from_bits","","",41,[[["m128x1"]],["self"]]],[11,"from_bits","","",42,[[["i8x16"]],["self"]]],[11,"from_bits","","",42,[[["u8x16"]],["self"]]],[11,"from_bits","","",42,[[["m8x16"]],["self"]]],[11,"from_bits","","",42,[[["i16x8"]],["self"]]],[11,"from_bits","","",42,[[["u16x8"]],["self"]]],[11,"from_bits","","",42,[[["m16x8"]],["self"]]],[11,"from_bits","","",42,[[["i32x4"]],["self"]]],[11,"from_bits","","",42,[[["u32x4"]],["self"]]],[11,"from_bits","","",42,[[["f32x4"]],["self"]]],[11,"from_bits","","",42,[[["m32x4"]],["self"]]],[11,"from_bits","","",42,[[["i64x2"]],["self"]]],[11,"from_bits","","",42,[[["f64x2"]],["self"]]],[11,"from_bits","","",42,[[["m64x2"]],["self"]]],[11,"from_bits","","",42,[[["i128x1"]],["self"]]],[11,"from_bits","","",42,[[["u128x1"]],["self"]]],[11,"from_bits","","",42,[[["m128x1"]],["self"]]],[11,"from_bits","","",43,[[["i8x16"]],["self"]]],[11,"from_bits","","",43,[[["u8x16"]],["self"]]],[11,"from_bits","","",43,[[["m8x16"]],["self"]]],[11,"from_bits","","",43,[[["i16x8"]],["self"]]],[11,"from_bits","","",43,[[["u16x8"]],["self"]]],[11,"from_bits","","",43,[[["m16x8"]],["self"]]],[11,"from_bits","","",43,[[["i32x4"]],["self"]]],[11,"from_bits","","",43,[[["u32x4"]],["self"]]],[11,"from_bits","","",43,[[["f32x4"]],["self"]]],[11,"from_bits","","",43,[[["m32x4"]],["self"]]],[11,"from_bits","","",43,[[["i64x2"]],["self"]]],[11,"from_bits","","",43,[[["u64x2"]],["self"]]],[11,"from_bits","","",43,[[["m64x2"]],["self"]]],[11,"from_bits","","",43,[[["i128x1"]],["self"]]],[11,"from_bits","","",43,[[["u128x1"]],["self"]]],[11,"from_bits","","",43,[[["m128x1"]],["self"]]],[11,"from_bits","","",44,[[["m128x1"]],["self"]]],[11,"from_bits","","",88,[[["i8x16"]],["self"]]],[11,"from_bits","","",88,[[["u8x16"]],["self"]]],[11,"from_bits","","",88,[[["m8x16"]],["self"]]],[11,"from_bits","","",88,[[["i16x8"]],["self"]]],[11,"from_bits","","",88,[[["u16x8"]],["self"]]],[11,"from_bits","","",88,[[["m16x8"]],["self"]]],[11,"from_bits","","",88,[[["i32x4"]],["self"]]],[11,"from_bits","","",88,[[["u32x4"]],["self"]]],[11,"from_bits","","",88,[[["f32x4"]],["self"]]],[11,"from_bits","","",88,[[["m32x4"]],["self"]]],[11,"from_bits","","",88,[[["i64x2"]],["self"]]],[11,"from_bits","","",88,[[["u64x2"]],["self"]]],[11,"from_bits","","",88,[[["f64x2"]],["self"]]],[11,"from_bits","","",88,[[["m64x2"]],["self"]]],[11,"from_bits","","",88,[[["u128x1"]],["self"]]],[11,"from_bits","","",88,[[["m128x1"]],["self"]]],[11,"from_bits","","",89,[[["i8x16"]],["self"]]],[11,"from_bits","","",89,[[["u8x16"]],["self"]]],[11,"from_bits","","",89,[[["m8x16"]],["self"]]],[11,"from_bits","","",89,[[["i16x8"]],["self"]]],[11,"from_bits","","",89,[[["u16x8"]],["self"]]],[11,"from_bits","","",89,[[["m16x8"]],["self"]]],[11,"from_bits","","",89,[[["i32x4"]],["self"]]],[11,"from_bits","","",89,[[["u32x4"]],["self"]]],[11,"from_bits","","",89,[[["f32x4"]],["self"]]],[11,"from_bits","","",89,[[["m32x4"]],["self"]]],[11,"from_bits","","",89,[[["i64x2"]],["self"]]],[11,"from_bits","","",89,[[["u64x2"]],["self"]]],[11,"from_bits","","",89,[[["f64x2"]],["self"]]],[11,"from_bits","","",89,[[["m64x2"]],["self"]]],[11,"from_bits","","",89,[[["i128x1"]],["self"]]],[11,"from_bits","","",89,[[["m128x1"]],["self"]]],[11,"from_bits","","",48,[[["u8x32"]],["self"]]],[11,"from_bits","","",48,[[["m8x32"]],["self"]]],[11,"from_bits","","",48,[[["i16x16"]],["self"]]],[11,"from_bits","","",48,[[["u16x16"]],["self"]]],[11,"from_bits","","",48,[[["m16x16"]],["self"]]],[11,"from_bits","","",48,[[["i32x8"]],["self"]]],[11,"from_bits","","",48,[[["u32x8"]],["self"]]],[11,"from_bits","","",48,[[["f32x8"]],["self"]]],[11,"from_bits","","",48,[[["m32x8"]],["self"]]],[11,"from_bits","","",48,[[["i64x4"]],["self"]]],[11,"from_bits","","",48,[[["u64x4"]],["self"]]],[11,"from_bits","","",48,[[["f64x4"]],["self"]]],[11,"from_bits","","",48,[[["m64x4"]],["self"]]],[11,"from_bits","","",48,[[["i128x2"]],["self"]]],[11,"from_bits","","",48,[[["u128x2"]],["self"]]],[11,"from_bits","","",48,[[["m128x2"]],["self"]]],[11,"from_bits","","",49,[[["i8x32"]],["self"]]],[11,"from_bits","","",49,[[["m8x32"]],["self"]]],[11,"from_bits","","",49,[[["i16x16"]],["self"]]],[11,"from_bits","","",49,[[["u16x16"]],["self"]]],[11,"from_bits","","",49,[[["m16x16"]],["self"]]],[11,"from_bits","","",49,[[["i32x8"]],["self"]]],[11,"from_bits","","",49,[[["u32x8"]],["self"]]],[11,"from_bits","","",49,[[["f32x8"]],["self"]]],[11,"from_bits","","",49,[[["m32x8"]],["self"]]],[11,"from_bits","","",49,[[["i64x4"]],["self"]]],[11,"from_bits","","",49,[[["u64x4"]],["self"]]],[11,"from_bits","","",49,[[["f64x4"]],["self"]]],[11,"from_bits","","",49,[[["m64x4"]],["self"]]],[11,"from_bits","","",49,[[["i128x2"]],["self"]]],[11,"from_bits","","",49,[[["u128x2"]],["self"]]],[11,"from_bits","","",49,[[["m128x2"]],["self"]]],[11,"from_bits","","",50,[[["m16x16"]],["self"]]],[11,"from_bits","","",50,[[["m32x8"]],["self"]]],[11,"from_bits","","",50,[[["m64x4"]],["self"]]],[11,"from_bits","","",50,[[["m128x2"]],["self"]]],[11,"from_bits","","",51,[[["i8x32"]],["self"]]],[11,"from_bits","","",51,[[["u8x32"]],["self"]]],[11,"from_bits","","",51,[[["m8x32"]],["self"]]],[11,"from_bits","","",51,[[["u16x16"]],["self"]]],[11,"from_bits","","",51,[[["m16x16"]],["self"]]],[11,"from_bits","","",51,[[["i32x8"]],["self"]]],[11,"from_bits","","",51,[[["u32x8"]],["self"]]],[11,"from_bits","","",51,[[["f32x8"]],["self"]]],[11,"from_bits","","",51,[[["m32x8"]],["self"]]],[11,"from_bits","","",51,[[["i64x4"]],["self"]]],[11,"from_bits","","",51,[[["u64x4"]],["self"]]],[11,"from_bits","","",51,[[["f64x4"]],["self"]]],[11,"from_bits","","",51,[[["m64x4"]],["self"]]],[11,"from_bits","","",51,[[["i128x2"]],["self"]]],[11,"from_bits","","",51,[[["u128x2"]],["self"]]],[11,"from_bits","","",51,[[["m128x2"]],["self"]]],[11,"from_bits","","",52,[[["i8x32"]],["self"]]],[11,"from_bits","","",52,[[["u8x32"]],["self"]]],[11,"from_bits","","",52,[[["m8x32"]],["self"]]],[11,"from_bits","","",52,[[["i16x16"]],["self"]]],[11,"from_bits","","",52,[[["m16x16"]],["self"]]],[11,"from_bits","","",52,[[["i32x8"]],["self"]]],[11,"from_bits","","",52,[[["u32x8"]],["self"]]],[11,"from_bits","","",52,[[["f32x8"]],["self"]]],[11,"from_bits","","",52,[[["m32x8"]],["self"]]],[11,"from_bits","","",52,[[["i64x4"]],["self"]]],[11,"from_bits","","",52,[[["u64x4"]],["self"]]],[11,"from_bits","","",52,[[["f64x4"]],["self"]]],[11,"from_bits","","",52,[[["m64x4"]],["self"]]],[11,"from_bits","","",52,[[["i128x2"]],["self"]]],[11,"from_bits","","",52,[[["u128x2"]],["self"]]],[11,"from_bits","","",52,[[["m128x2"]],["self"]]],[11,"from_bits","","",53,[[["m32x8"]],["self"]]],[11,"from_bits","","",53,[[["m64x4"]],["self"]]],[11,"from_bits","","",53,[[["m128x2"]],["self"]]],[11,"from_bits","","",54,[[["i8x32"]],["self"]]],[11,"from_bits","","",54,[[["u8x32"]],["self"]]],[11,"from_bits","","",54,[[["m8x32"]],["self"]]],[11,"from_bits","","",54,[[["i16x16"]],["self"]]],[11,"from_bits","","",54,[[["u16x16"]],["self"]]],[11,"from_bits","","",54,[[["m16x16"]],["self"]]],[11,"from_bits","","",54,[[["u32x8"]],["self"]]],[11,"from_bits","","",54,[[["f32x8"]],["self"]]],[11,"from_bits","","",54,[[["m32x8"]],["self"]]],[11,"from_bits","","",54,[[["i64x4"]],["self"]]],[11,"from_bits","","",54,[[["u64x4"]],["self"]]],[11,"from_bits","","",54,[[["f64x4"]],["self"]]],[11,"from_bits","","",54,[[["m64x4"]],["self"]]],[11,"from_bits","","",54,[[["i128x2"]],["self"]]],[11,"from_bits","","",54,[[["u128x2"]],["self"]]],[11,"from_bits","","",54,[[["m128x2"]],["self"]]],[11,"from_bits","","",55,[[["i8x32"]],["self"]]],[11,"from_bits","","",55,[[["u8x32"]],["self"]]],[11,"from_bits","","",55,[[["m8x32"]],["self"]]],[11,"from_bits","","",55,[[["i16x16"]],["self"]]],[11,"from_bits","","",55,[[["u16x16"]],["self"]]],[11,"from_bits","","",55,[[["m16x16"]],["self"]]],[11,"from_bits","","",55,[[["i32x8"]],["self"]]],[11,"from_bits","","",55,[[["f32x8"]],["self"]]],[11,"from_bits","","",55,[[["m32x8"]],["self"]]],[11,"from_bits","","",55,[[["i64x4"]],["self"]]],[11,"from_bits","","",55,[[["u64x4"]],["self"]]],[11,"from_bits","","",55,[[["f64x4"]],["self"]]],[11,"from_bits","","",55,[[["m64x4"]],["self"]]],[11,"from_bits","","",55,[[["i128x2"]],["self"]]],[11,"from_bits","","",55,[[["u128x2"]],["self"]]],[11,"from_bits","","",55,[[["m128x2"]],["self"]]],[11,"from_bits","","",56,[[["i8x32"]],["self"]]],[11,"from_bits","","",56,[[["u8x32"]],["self"]]],[11,"from_bits","","",56,[[["m8x32"]],["self"]]],[11,"from_bits","","",56,[[["i16x16"]],["self"]]],[11,"from_bits","","",56,[[["u16x16"]],["self"]]],[11,"from_bits","","",56,[[["m16x16"]],["self"]]],[11,"from_bits","","",56,[[["i32x8"]],["self"]]],[11,"from_bits","","",56,[[["u32x8"]],["self"]]],[11,"from_bits","","",56,[[["m32x8"]],["self"]]],[11,"from_bits","","",56,[[["i64x4"]],["self"]]],[11,"from_bits","","",56,[[["u64x4"]],["self"]]],[11,"from_bits","","",56,[[["f64x4"]],["self"]]],[11,"from_bits","","",56,[[["m64x4"]],["self"]]],[11,"from_bits","","",56,[[["i128x2"]],["self"]]],[11,"from_bits","","",56,[[["u128x2"]],["self"]]],[11,"from_bits","","",56,[[["m128x2"]],["self"]]],[11,"from_bits","","",57,[[["m64x4"]],["self"]]],[11,"from_bits","","",57,[[["m128x2"]],["self"]]],[11,"from_bits","","",58,[[["i8x32"]],["self"]]],[11,"from_bits","","",58,[[["u8x32"]],["self"]]],[11,"from_bits","","",58,[[["m8x32"]],["self"]]],[11,"from_bits","","",58,[[["i16x16"]],["self"]]],[11,"from_bits","","",58,[[["u16x16"]],["self"]]],[11,"from_bits","","",58,[[["m16x16"]],["self"]]],[11,"from_bits","","",58,[[["i32x8"]],["self"]]],[11,"from_bits","","",58,[[["u32x8"]],["self"]]],[11,"from_bits","","",58,[[["f32x8"]],["self"]]],[11,"from_bits","","",58,[[["m32x8"]],["self"]]],[11,"from_bits","","",58,[[["u64x4"]],["self"]]],[11,"from_bits","","",58,[[["f64x4"]],["self"]]],[11,"from_bits","","",58,[[["m64x4"]],["self"]]],[11,"from_bits","","",58,[[["i128x2"]],["self"]]],[11,"from_bits","","",58,[[["u128x2"]],["self"]]],[11,"from_bits","","",58,[[["m128x2"]],["self"]]],[11,"from_bits","","",59,[[["i8x32"]],["self"]]],[11,"from_bits","","",59,[[["u8x32"]],["self"]]],[11,"from_bits","","",59,[[["m8x32"]],["self"]]],[11,"from_bits","","",59,[[["i16x16"]],["self"]]],[11,"from_bits","","",59,[[["u16x16"]],["self"]]],[11,"from_bits","","",59,[[["m16x16"]],["self"]]],[11,"from_bits","","",59,[[["i32x8"]],["self"]]],[11,"from_bits","","",59,[[["u32x8"]],["self"]]],[11,"from_bits","","",59,[[["f32x8"]],["self"]]],[11,"from_bits","","",59,[[["m32x8"]],["self"]]],[11,"from_bits","","",59,[[["i64x4"]],["self"]]],[11,"from_bits","","",59,[[["f64x4"]],["self"]]],[11,"from_bits","","",59,[[["m64x4"]],["self"]]],[11,"from_bits","","",59,[[["i128x2"]],["self"]]],[11,"from_bits","","",59,[[["u128x2"]],["self"]]],[11,"from_bits","","",59,[[["m128x2"]],["self"]]],[11,"from_bits","","",60,[[["i8x32"]],["self"]]],[11,"from_bits","","",60,[[["u8x32"]],["self"]]],[11,"from_bits","","",60,[[["m8x32"]],["self"]]],[11,"from_bits","","",60,[[["i16x16"]],["self"]]],[11,"from_bits","","",60,[[["u16x16"]],["self"]]],[11,"from_bits","","",60,[[["m16x16"]],["self"]]],[11,"from_bits","","",60,[[["i32x8"]],["self"]]],[11,"from_bits","","",60,[[["u32x8"]],["self"]]],[11,"from_bits","","",60,[[["f32x8"]],["self"]]],[11,"from_bits","","",60,[[["m32x8"]],["self"]]],[11,"from_bits","","",60,[[["i64x4"]],["self"]]],[11,"from_bits","","",60,[[["u64x4"]],["self"]]],[11,"from_bits","","",60,[[["m64x4"]],["self"]]],[11,"from_bits","","",60,[[["i128x2"]],["self"]]],[11,"from_bits","","",60,[[["u128x2"]],["self"]]],[11,"from_bits","","",60,[[["m128x2"]],["self"]]],[11,"from_bits","","",61,[[["m128x2"]],["self"]]],[11,"from_bits","","",62,[[["i8x32"]],["self"]]],[11,"from_bits","","",62,[[["u8x32"]],["self"]]],[11,"from_bits","","",62,[[["m8x32"]],["self"]]],[11,"from_bits","","",62,[[["i16x16"]],["self"]]],[11,"from_bits","","",62,[[["u16x16"]],["self"]]],[11,"from_bits","","",62,[[["m16x16"]],["self"]]],[11,"from_bits","","",62,[[["i32x8"]],["self"]]],[11,"from_bits","","",62,[[["u32x8"]],["self"]]],[11,"from_bits","","",62,[[["f32x8"]],["self"]]],[11,"from_bits","","",62,[[["m32x8"]],["self"]]],[11,"from_bits","","",62,[[["i64x4"]],["self"]]],[11,"from_bits","","",62,[[["u64x4"]],["self"]]],[11,"from_bits","","",62,[[["f64x4"]],["self"]]],[11,"from_bits","","",62,[[["m64x4"]],["self"]]],[11,"from_bits","","",62,[[["u128x2"]],["self"]]],[11,"from_bits","","",62,[[["m128x2"]],["self"]]],[11,"from_bits","","",63,[[["i8x32"]],["self"]]],[11,"from_bits","","",63,[[["u8x32"]],["self"]]],[11,"from_bits","","",63,[[["m8x32"]],["self"]]],[11,"from_bits","","",63,[[["i16x16"]],["self"]]],[11,"from_bits","","",63,[[["u16x16"]],["self"]]],[11,"from_bits","","",63,[[["m16x16"]],["self"]]],[11,"from_bits","","",63,[[["i32x8"]],["self"]]],[11,"from_bits","","",63,[[["u32x8"]],["self"]]],[11,"from_bits","","",63,[[["f32x8"]],["self"]]],[11,"from_bits","","",63,[[["m32x8"]],["self"]]],[11,"from_bits","","",63,[[["i64x4"]],["self"]]],[11,"from_bits","","",63,[[["u64x4"]],["self"]]],[11,"from_bits","","",63,[[["f64x4"]],["self"]]],[11,"from_bits","","",63,[[["m64x4"]],["self"]]],[11,"from_bits","","",63,[[["i128x2"]],["self"]]],[11,"from_bits","","",63,[[["m128x2"]],["self"]]],[11,"from_bits","","",68,[[["u8x64"]],["self"]]],[11,"from_bits","","",68,[[["m8x64"]],["self"]]],[11,"from_bits","","",68,[[["i16x32"]],["self"]]],[11,"from_bits","","",68,[[["u16x32"]],["self"]]],[11,"from_bits","","",68,[[["m16x32"]],["self"]]],[11,"from_bits","","",68,[[["i32x16"]],["self"]]],[11,"from_bits","","",68,[[["u32x16"]],["self"]]],[11,"from_bits","","",68,[[["f32x16"]],["self"]]],[11,"from_bits","","",68,[[["m32x16"]],["self"]]],[11,"from_bits","","",68,[[["i64x8"]],["self"]]],[11,"from_bits","","",68,[[["u64x8"]],["self"]]],[11,"from_bits","","",68,[[["f64x8"]],["self"]]],[11,"from_bits","","",68,[[["m64x8"]],["self"]]],[11,"from_bits","","",68,[[["i128x4"]],["self"]]],[11,"from_bits","","",68,[[["u128x4"]],["self"]]],[11,"from_bits","","",68,[[["m128x4"]],["self"]]],[11,"from_bits","","",69,[[["i8x64"]],["self"]]],[11,"from_bits","","",69,[[["m8x64"]],["self"]]],[11,"from_bits","","",69,[[["i16x32"]],["self"]]],[11,"from_bits","","",69,[[["u16x32"]],["self"]]],[11,"from_bits","","",69,[[["m16x32"]],["self"]]],[11,"from_bits","","",69,[[["i32x16"]],["self"]]],[11,"from_bits","","",69,[[["u32x16"]],["self"]]],[11,"from_bits","","",69,[[["f32x16"]],["self"]]],[11,"from_bits","","",69,[[["m32x16"]],["self"]]],[11,"from_bits","","",69,[[["i64x8"]],["self"]]],[11,"from_bits","","",69,[[["u64x8"]],["self"]]],[11,"from_bits","","",69,[[["f64x8"]],["self"]]],[11,"from_bits","","",69,[[["m64x8"]],["self"]]],[11,"from_bits","","",69,[[["i128x4"]],["self"]]],[11,"from_bits","","",69,[[["u128x4"]],["self"]]],[11,"from_bits","","",69,[[["m128x4"]],["self"]]],[11,"from_bits","","",70,[[["m16x32"]],["self"]]],[11,"from_bits","","",70,[[["m32x16"]],["self"]]],[11,"from_bits","","",70,[[["m64x8"]],["self"]]],[11,"from_bits","","",70,[[["m128x4"]],["self"]]],[11,"from_bits","","",71,[[["i8x64"]],["self"]]],[11,"from_bits","","",71,[[["u8x64"]],["self"]]],[11,"from_bits","","",71,[[["m8x64"]],["self"]]],[11,"from_bits","","",71,[[["u16x32"]],["self"]]],[11,"from_bits","","",71,[[["m16x32"]],["self"]]],[11,"from_bits","","",71,[[["i32x16"]],["self"]]],[11,"from_bits","","",71,[[["u32x16"]],["self"]]],[11,"from_bits","","",71,[[["f32x16"]],["self"]]],[11,"from_bits","","",71,[[["m32x16"]],["self"]]],[11,"from_bits","","",71,[[["i64x8"]],["self"]]],[11,"from_bits","","",71,[[["u64x8"]],["self"]]],[11,"from_bits","","",71,[[["f64x8"]],["self"]]],[11,"from_bits","","",71,[[["m64x8"]],["self"]]],[11,"from_bits","","",71,[[["i128x4"]],["self"]]],[11,"from_bits","","",71,[[["u128x4"]],["self"]]],[11,"from_bits","","",71,[[["m128x4"]],["self"]]],[11,"from_bits","","",72,[[["i8x64"]],["self"]]],[11,"from_bits","","",72,[[["u8x64"]],["self"]]],[11,"from_bits","","",72,[[["m8x64"]],["self"]]],[11,"from_bits","","",72,[[["i16x32"]],["self"]]],[11,"from_bits","","",72,[[["m16x32"]],["self"]]],[11,"from_bits","","",72,[[["i32x16"]],["self"]]],[11,"from_bits","","",72,[[["u32x16"]],["self"]]],[11,"from_bits","","",72,[[["f32x16"]],["self"]]],[11,"from_bits","","",72,[[["m32x16"]],["self"]]],[11,"from_bits","","",72,[[["i64x8"]],["self"]]],[11,"from_bits","","",72,[[["u64x8"]],["self"]]],[11,"from_bits","","",72,[[["f64x8"]],["self"]]],[11,"from_bits","","",72,[[["m64x8"]],["self"]]],[11,"from_bits","","",72,[[["i128x4"]],["self"]]],[11,"from_bits","","",72,[[["u128x4"]],["self"]]],[11,"from_bits","","",72,[[["m128x4"]],["self"]]],[11,"from_bits","","",73,[[["m32x16"]],["self"]]],[11,"from_bits","","",73,[[["m64x8"]],["self"]]],[11,"from_bits","","",73,[[["m128x4"]],["self"]]],[11,"from_bits","","",74,[[["i8x64"]],["self"]]],[11,"from_bits","","",74,[[["u8x64"]],["self"]]],[11,"from_bits","","",74,[[["m8x64"]],["self"]]],[11,"from_bits","","",74,[[["i16x32"]],["self"]]],[11,"from_bits","","",74,[[["u16x32"]],["self"]]],[11,"from_bits","","",74,[[["m16x32"]],["self"]]],[11,"from_bits","","",74,[[["u32x16"]],["self"]]],[11,"from_bits","","",74,[[["f32x16"]],["self"]]],[11,"from_bits","","",74,[[["m32x16"]],["self"]]],[11,"from_bits","","",74,[[["i64x8"]],["self"]]],[11,"from_bits","","",74,[[["u64x8"]],["self"]]],[11,"from_bits","","",74,[[["f64x8"]],["self"]]],[11,"from_bits","","",74,[[["m64x8"]],["self"]]],[11,"from_bits","","",74,[[["i128x4"]],["self"]]],[11,"from_bits","","",74,[[["u128x4"]],["self"]]],[11,"from_bits","","",74,[[["m128x4"]],["self"]]],[11,"from_bits","","",75,[[["i8x64"]],["self"]]],[11,"from_bits","","",75,[[["u8x64"]],["self"]]],[11,"from_bits","","",75,[[["m8x64"]],["self"]]],[11,"from_bits","","",75,[[["i16x32"]],["self"]]],[11,"from_bits","","",75,[[["u16x32"]],["self"]]],[11,"from_bits","","",75,[[["m16x32"]],["self"]]],[11,"from_bits","","",75,[[["i32x16"]],["self"]]],[11,"from_bits","","",75,[[["f32x16"]],["self"]]],[11,"from_bits","","",75,[[["m32x16"]],["self"]]],[11,"from_bits","","",75,[[["i64x8"]],["self"]]],[11,"from_bits","","",75,[[["u64x8"]],["self"]]],[11,"from_bits","","",75,[[["f64x8"]],["self"]]],[11,"from_bits","","",75,[[["m64x8"]],["self"]]],[11,"from_bits","","",75,[[["i128x4"]],["self"]]],[11,"from_bits","","",75,[[["u128x4"]],["self"]]],[11,"from_bits","","",75,[[["m128x4"]],["self"]]],[11,"from_bits","","",76,[[["i8x64"]],["self"]]],[11,"from_bits","","",76,[[["u8x64"]],["self"]]],[11,"from_bits","","",76,[[["m8x64"]],["self"]]],[11,"from_bits","","",76,[[["i16x32"]],["self"]]],[11,"from_bits","","",76,[[["u16x32"]],["self"]]],[11,"from_bits","","",76,[[["m16x32"]],["self"]]],[11,"from_bits","","",76,[[["i32x16"]],["self"]]],[11,"from_bits","","",76,[[["u32x16"]],["self"]]],[11,"from_bits","","",76,[[["m32x16"]],["self"]]],[11,"from_bits","","",76,[[["i64x8"]],["self"]]],[11,"from_bits","","",76,[[["u64x8"]],["self"]]],[11,"from_bits","","",76,[[["f64x8"]],["self"]]],[11,"from_bits","","",76,[[["m64x8"]],["self"]]],[11,"from_bits","","",76,[[["i128x4"]],["self"]]],[11,"from_bits","","",76,[[["u128x4"]],["self"]]],[11,"from_bits","","",76,[[["m128x4"]],["self"]]],[11,"from_bits","","",77,[[["m64x8"]],["self"]]],[11,"from_bits","","",77,[[["m128x4"]],["self"]]],[11,"from_bits","","",78,[[["i8x64"]],["self"]]],[11,"from_bits","","",78,[[["u8x64"]],["self"]]],[11,"from_bits","","",78,[[["m8x64"]],["self"]]],[11,"from_bits","","",78,[[["i16x32"]],["self"]]],[11,"from_bits","","",78,[[["u16x32"]],["self"]]],[11,"from_bits","","",78,[[["m16x32"]],["self"]]],[11,"from_bits","","",78,[[["i32x16"]],["self"]]],[11,"from_bits","","",78,[[["u32x16"]],["self"]]],[11,"from_bits","","",78,[[["f32x16"]],["self"]]],[11,"from_bits","","",78,[[["m32x16"]],["self"]]],[11,"from_bits","","",78,[[["u64x8"]],["self"]]],[11,"from_bits","","",78,[[["f64x8"]],["self"]]],[11,"from_bits","","",78,[[["m64x8"]],["self"]]],[11,"from_bits","","",78,[[["i128x4"]],["self"]]],[11,"from_bits","","",78,[[["u128x4"]],["self"]]],[11,"from_bits","","",78,[[["m128x4"]],["self"]]],[11,"from_bits","","",79,[[["i8x64"]],["self"]]],[11,"from_bits","","",79,[[["u8x64"]],["self"]]],[11,"from_bits","","",79,[[["m8x64"]],["self"]]],[11,"from_bits","","",79,[[["i16x32"]],["self"]]],[11,"from_bits","","",79,[[["u16x32"]],["self"]]],[11,"from_bits","","",79,[[["m16x32"]],["self"]]],[11,"from_bits","","",79,[[["i32x16"]],["self"]]],[11,"from_bits","","",79,[[["u32x16"]],["self"]]],[11,"from_bits","","",79,[[["f32x16"]],["self"]]],[11,"from_bits","","",79,[[["m32x16"]],["self"]]],[11,"from_bits","","",79,[[["i64x8"]],["self"]]],[11,"from_bits","","",79,[[["f64x8"]],["self"]]],[11,"from_bits","","",79,[[["m64x8"]],["self"]]],[11,"from_bits","","",79,[[["i128x4"]],["self"]]],[11,"from_bits","","",79,[[["u128x4"]],["self"]]],[11,"from_bits","","",79,[[["m128x4"]],["self"]]],[11,"from_bits","","",80,[[["i8x64"]],["self"]]],[11,"from_bits","","",80,[[["u8x64"]],["self"]]],[11,"from_bits","","",80,[[["m8x64"]],["self"]]],[11,"from_bits","","",80,[[["i16x32"]],["self"]]],[11,"from_bits","","",80,[[["u16x32"]],["self"]]],[11,"from_bits","","",80,[[["m16x32"]],["self"]]],[11,"from_bits","","",80,[[["i32x16"]],["self"]]],[11,"from_bits","","",80,[[["u32x16"]],["self"]]],[11,"from_bits","","",80,[[["f32x16"]],["self"]]],[11,"from_bits","","",80,[[["m32x16"]],["self"]]],[11,"from_bits","","",80,[[["i64x8"]],["self"]]],[11,"from_bits","","",80,[[["u64x8"]],["self"]]],[11,"from_bits","","",80,[[["m64x8"]],["self"]]],[11,"from_bits","","",80,[[["i128x4"]],["self"]]],[11,"from_bits","","",80,[[["u128x4"]],["self"]]],[11,"from_bits","","",80,[[["m128x4"]],["self"]]],[11,"from_bits","","",81,[[["m128x4"]],["self"]]],[11,"from_bits","","",82,[[["i8x64"]],["self"]]],[11,"from_bits","","",82,[[["u8x64"]],["self"]]],[11,"from_bits","","",82,[[["m8x64"]],["self"]]],[11,"from_bits","","",82,[[["i16x32"]],["self"]]],[11,"from_bits","","",82,[[["u16x32"]],["self"]]],[11,"from_bits","","",82,[[["m16x32"]],["self"]]],[11,"from_bits","","",82,[[["i32x16"]],["self"]]],[11,"from_bits","","",82,[[["u32x16"]],["self"]]],[11,"from_bits","","",82,[[["f32x16"]],["self"]]],[11,"from_bits","","",82,[[["m32x16"]],["self"]]],[11,"from_bits","","",82,[[["i64x8"]],["self"]]],[11,"from_bits","","",82,[[["u64x8"]],["self"]]],[11,"from_bits","","",82,[[["f64x8"]],["self"]]],[11,"from_bits","","",82,[[["m64x8"]],["self"]]],[11,"from_bits","","",82,[[["u128x4"]],["self"]]],[11,"from_bits","","",82,[[["m128x4"]],["self"]]],[11,"from_bits","","",83,[[["i8x64"]],["self"]]],[11,"from_bits","","",83,[[["u8x64"]],["self"]]],[11,"from_bits","","",83,[[["m8x64"]],["self"]]],[11,"from_bits","","",83,[[["i16x32"]],["self"]]],[11,"from_bits","","",83,[[["u16x32"]],["self"]]],[11,"from_bits","","",83,[[["m16x32"]],["self"]]],[11,"from_bits","","",83,[[["i32x16"]],["self"]]],[11,"from_bits","","",83,[[["u32x16"]],["self"]]],[11,"from_bits","","",83,[[["f32x16"]],["self"]]],[11,"from_bits","","",83,[[["m32x16"]],["self"]]],[11,"from_bits","","",83,[[["i64x8"]],["self"]]],[11,"from_bits","","",83,[[["u64x8"]],["self"]]],[11,"from_bits","","",83,[[["f64x8"]],["self"]]],[11,"from_bits","","",83,[[["m64x8"]],["self"]]],[11,"from_bits","","",83,[[["i128x4"]],["self"]]],[11,"from_bits","","",83,[[["m128x4"]],["self"]]],[11,"from_bits","","",21,[[["__m64"]],["self"]]],[11,"from_bits","","",22,[[["__m64"]],["self"]]],[11,"from_bits","","",24,[[["__m64"]],["self"]]],[11,"from_bits","","",25,[[["__m64"]],["self"]]],[11,"from_bits","","",27,[[["__m64"]],["self"]]],[11,"from_bits","","",28,[[["__m64"]],["self"]]],[11,"from_bits","","",29,[[["__m64"]],["self"]]],[11,"from_bits","","",31,[[["__m128"]],["self"]]],[11,"from_bits","","",32,[[["__m128"]],["self"]]],[11,"from_bits","","",34,[[["__m128"]],["self"]]],[11,"from_bits","","",35,[[["__m128"]],["self"]]],[11,"from_bits","","",37,[[["__m128"]],["self"]]],[11,"from_bits","","",38,[[["__m128"]],["self"]]],[11,"from_bits","","",39,[[["__m128"]],["self"]]],[11,"from_bits","","",41,[[["__m128"]],["self"]]],[11,"from_bits","","",42,[[["__m128"]],["self"]]],[11,"from_bits","","",43,[[["__m128"]],["self"]]],[11,"from_bits","","",88,[[["__m128"]],["self"]]],[11,"from_bits","","",89,[[["__m128"]],["self"]]],[11,"from_bits","","",31,[[["__m128i"]],["self"]]],[11,"from_bits","","",32,[[["__m128i"]],["self"]]],[11,"from_bits","","",34,[[["__m128i"]],["self"]]],[11,"from_bits","","",35,[[["__m128i"]],["self"]]],[11,"from_bits","","",37,[[["__m128i"]],["self"]]],[11,"from_bits","","",38,[[["__m128i"]],["self"]]],[11,"from_bits","","",39,[[["__m128i"]],["self"]]],[11,"from_bits","","",41,[[["__m128i"]],["self"]]],[11,"from_bits","","",42,[[["__m128i"]],["self"]]],[11,"from_bits","","",43,[[["__m128i"]],["self"]]],[11,"from_bits","","",88,[[["__m128i"]],["self"]]],[11,"from_bits","","",89,[[["__m128i"]],["self"]]],[11,"from_bits","","",31,[[["__m128d"]],["self"]]],[11,"from_bits","","",32,[[["__m128d"]],["self"]]],[11,"from_bits","","",34,[[["__m128d"]],["self"]]],[11,"from_bits","","",35,[[["__m128d"]],["self"]]],[11,"from_bits","","",37,[[["__m128d"]],["self"]]],[11,"from_bits","","",38,[[["__m128d"]],["self"]]],[11,"from_bits","","",39,[[["__m128d"]],["self"]]],[11,"from_bits","","",41,[[["__m128d"]],["self"]]],[11,"from_bits","","",42,[[["__m128d"]],["self"]]],[11,"from_bits","","",43,[[["__m128d"]],["self"]]],[11,"from_bits","","",88,[[["__m128d"]],["self"]]],[11,"from_bits","","",89,[[["__m128d"]],["self"]]],[11,"from_bits","","",48,[[["__m256"]],["self"]]],[11,"from_bits","","",49,[[["__m256"]],["self"]]],[11,"from_bits","","",51,[[["__m256"]],["self"]]],[11,"from_bits","","",52,[[["__m256"]],["self"]]],[11,"from_bits","","",54,[[["__m256"]],["self"]]],[11,"from_bits","","",55,[[["__m256"]],["self"]]],[11,"from_bits","","",56,[[["__m256"]],["self"]]],[11,"from_bits","","",58,[[["__m256"]],["self"]]],[11,"from_bits","","",59,[[["__m256"]],["self"]]],[11,"from_bits","","",60,[[["__m256"]],["self"]]],[11,"from_bits","","",62,[[["__m256"]],["self"]]],[11,"from_bits","","",63,[[["__m256"]],["self"]]],[11,"from_bits","","",48,[[["__m256i"]],["self"]]],[11,"from_bits","","",49,[[["__m256i"]],["self"]]],[11,"from_bits","","",51,[[["__m256i"]],["self"]]],[11,"from_bits","","",52,[[["__m256i"]],["self"]]],[11,"from_bits","","",54,[[["__m256i"]],["self"]]],[11,"from_bits","","",55,[[["__m256i"]],["self"]]],[11,"from_bits","","",56,[[["__m256i"]],["self"]]],[11,"from_bits","","",58,[[["__m256i"]],["self"]]],[11,"from_bits","","",59,[[["__m256i"]],["self"]]],[11,"from_bits","","",60,[[["__m256i"]],["self"]]],[11,"from_bits","","",62,[[["__m256i"]],["self"]]],[11,"from_bits","","",63,[[["__m256i"]],["self"]]],[11,"from_bits","","",48,[[["__m256d"]],["self"]]],[11,"from_bits","","",49,[[["__m256d"]],["self"]]],[11,"from_bits","","",51,[[["__m256d"]],["self"]]],[11,"from_bits","","",52,[[["__m256d"]],["self"]]],[11,"from_bits","","",54,[[["__m256d"]],["self"]]],[11,"from_bits","","",55,[[["__m256d"]],["self"]]],[11,"from_bits","","",56,[[["__m256d"]],["self"]]],[11,"from_bits","","",58,[[["__m256d"]],["self"]]],[11,"from_bits","","",59,[[["__m256d"]],["self"]]],[11,"from_bits","","",60,[[["__m256d"]],["self"]]],[11,"from_bits","","",62,[[["__m256d"]],["self"]]],[11,"from_bits","","",63,[[["__m256d"]],["self"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",12,[[["i8"],["i8"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",12,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",12,[[["i8"]],["self"]]],[11,"extract","","Extracts the value at `index`.",12,[[["self"],["usize"]],["i8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",12,[[["self"],["usize"]],["i8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",12,[[["self"],["usize"],["i8"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",12,[[["self"],["usize"],["i8"]],["self"]]],[11,"add","","",12,[[["self"],["self"]],["self"]]],[11,"sub","","",12,[[["self"],["self"]],["self"]]],[11,"mul","","",12,[[["self"],["self"]],["self"]]],[11,"div","","",12,[[["self"],["self"]],["self"]]],[11,"rem","","",12,[[["self"],["self"]],["self"]]],[11,"add_assign","","",12,[[["self"],["self"]]]],[11,"sub_assign","","",12,[[["self"],["self"]]]],[11,"mul_assign","","",12,[[["self"],["self"]]]],[11,"div_assign","","",12,[[["self"],["self"]]]],[11,"rem_assign","","",12,[[["self"],["self"]]]],[11,"add","","",12,[[["self"],["i8"]],["self"]]],[11,"sub","","",12,[[["self"],["i8"]],["self"]]],[11,"mul","","",12,[[["self"],["i8"]],["self"]]],[11,"div","","",12,[[["self"],["i8"]],["self"]]],[11,"rem","","",12,[[["self"],["i8"]],["self"]]],[11,"add_assign","","",12,[[["self"],["i8"]]]],[11,"sub_assign","","",12,[[["self"],["i8"]]]],[11,"mul_assign","","",12,[[["self"],["i8"]]]],[11,"div_assign","","",12,[[["self"],["i8"]]]],[11,"rem_assign","","",12,[[["self"],["i8"]]]],[11,"not","","",12,[[["self"]],["self"]]],[11,"bitxor","","",12,[[["self"],["self"]],["self"]]],[11,"bitand","","",12,[[["self"],["self"]],["self"]]],[11,"bitor","","",12,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",12,[[["self"],["self"]]]],[11,"bitor_assign","","",12,[[["self"],["self"]]]],[11,"bitxor_assign","","",12,[[["self"],["self"]]]],[11,"bitxor","","",12,[[["self"],["i8"]],["self"]]],[11,"bitand","","",12,[[["self"],["i8"]],["self"]]],[11,"bitor","","",12,[[["self"],["i8"]],["self"]]],[11,"bitand_assign","","",12,[[["self"],["i8"]]]],[11,"bitor_assign","","",12,[[["self"],["i8"]]]],[11,"bitxor_assign","","",12,[[["self"],["i8"]]]],[11,"shl","","",12,[[["self"],["self"]],["self"]]],[11,"shr","","",12,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",12,[[["self"],["self"]]]],[11,"shr_assign","","",12,[[["self"],["self"]]]],[11,"shl","","",12,[[["self"],["u32"]],["self"]]],[11,"shr","","",12,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",12,[[["self"],["u32"]]]],[11,"shr_assign","","",12,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",12,[[["self"],["i8x2"]],["i8x2"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",12,[[["self"],["i8x2"]],["i8x2"]]],[11,"neg","","",12,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",12,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",12,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",12,[[["self"]],["i8"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",12,[[["self"]],["i8"]]],[11,"sum","","",12,[[["i"]],["i8x2"]]],[11,"product","","",12,[[["i"]],["i8x2"]]],[11,"sum","","",12,[[["i"]],["i8x2"]]],[11,"product","","",12,[[["i"]],["i8x2"]]],[11,"max_element","","Largest vector element value.",12,[[["self"]],["i8"]]],[11,"min_element","","Smallest vector element value.",12,[[["self"]],["i8"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",12,[[["self"]],["i8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",12,[[["self"]],["i8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",12,[[["self"]],["i8"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"from","","",12,N],[11,"default","","",12,[[],["self"]]],[11,"hash","","",12,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",12,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",12,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",12,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",12,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",12,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",12,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",12,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",12,N],[11,"swap_bytes","","Reverses the byte order of the vector.",12,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",12,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",12,[[["self"]],["self"]]],[11,"eq","","",12,[[["self"],["self"]],["bool"]]],[11,"ne","","",12,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",12,[[["self"],["self"]],["m8x2"]]],[11,"ne","","Lane-wise inequality comparison.",12,[[["self"],["self"]],["m8x2"]]],[11,"lt","","Lane-wise less-than comparison.",12,[[["self"],["self"]],["m8x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",12,[[["self"],["self"]],["m8x2"]]],[11,"gt","","Lane-wise greater-than comparison.",12,[[["self"],["self"]],["m8x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",12,[[["self"],["self"]],["m8x2"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",12,[[["self"]],["lexicographicallyordered",["i8x2"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",12,[[["self"]],["lexicographicallyordered",["i8x2"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",13,[[["u8"],["u8"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",13,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",13,[[["u8"]],["self"]]],[11,"extract","","Extracts the value at `index`.",13,[[["self"],["usize"]],["u8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",13,[[["self"],["usize"]],["u8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",13,[[["self"],["usize"],["u8"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",13,[[["self"],["usize"],["u8"]],["self"]]],[11,"add","","",13,[[["self"],["self"]],["self"]]],[11,"sub","","",13,[[["self"],["self"]],["self"]]],[11,"mul","","",13,[[["self"],["self"]],["self"]]],[11,"div","","",13,[[["self"],["self"]],["self"]]],[11,"rem","","",13,[[["self"],["self"]],["self"]]],[11,"add_assign","","",13,[[["self"],["self"]]]],[11,"sub_assign","","",13,[[["self"],["self"]]]],[11,"mul_assign","","",13,[[["self"],["self"]]]],[11,"div_assign","","",13,[[["self"],["self"]]]],[11,"rem_assign","","",13,[[["self"],["self"]]]],[11,"add","","",13,[[["self"],["u8"]],["self"]]],[11,"sub","","",13,[[["self"],["u8"]],["self"]]],[11,"mul","","",13,[[["self"],["u8"]],["self"]]],[11,"div","","",13,[[["self"],["u8"]],["self"]]],[11,"rem","","",13,[[["self"],["u8"]],["self"]]],[11,"add_assign","","",13,[[["self"],["u8"]]]],[11,"sub_assign","","",13,[[["self"],["u8"]]]],[11,"mul_assign","","",13,[[["self"],["u8"]]]],[11,"div_assign","","",13,[[["self"],["u8"]]]],[11,"rem_assign","","",13,[[["self"],["u8"]]]],[11,"not","","",13,[[["self"]],["self"]]],[11,"bitxor","","",13,[[["self"],["self"]],["self"]]],[11,"bitand","","",13,[[["self"],["self"]],["self"]]],[11,"bitor","","",13,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",13,[[["self"],["self"]]]],[11,"bitor_assign","","",13,[[["self"],["self"]]]],[11,"bitxor_assign","","",13,[[["self"],["self"]]]],[11,"bitxor","","",13,[[["self"],["u8"]],["self"]]],[11,"bitand","","",13,[[["self"],["u8"]],["self"]]],[11,"bitor","","",13,[[["self"],["u8"]],["self"]]],[11,"bitand_assign","","",13,[[["self"],["u8"]]]],[11,"bitor_assign","","",13,[[["self"],["u8"]]]],[11,"bitxor_assign","","",13,[[["self"],["u8"]]]],[11,"shl","","",13,[[["self"],["self"]],["self"]]],[11,"shr","","",13,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",13,[[["self"],["self"]]]],[11,"shr_assign","","",13,[[["self"],["self"]]]],[11,"shl","","",13,[[["self"],["u32"]],["self"]]],[11,"shr","","",13,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",13,[[["self"],["u32"]]]],[11,"shr_assign","","",13,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",13,[[["self"],["u8x2"]],["u8x2"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",13,[[["self"],["u8x2"]],["u8x2"]]],[11,"min","","Minimum of two vectors.",13,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",13,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",13,[[["self"]],["u8"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",13,[[["self"]],["u8"]]],[11,"sum","","",13,[[["i"]],["u8x2"]]],[11,"product","","",13,[[["i"]],["u8x2"]]],[11,"sum","","",13,[[["i"]],["u8x2"]]],[11,"product","","",13,[[["i"]],["u8x2"]]],[11,"max_element","","Largest vector element value.",13,[[["self"]],["u8"]]],[11,"min_element","","Smallest vector element value.",13,[[["self"]],["u8"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",13,[[["self"]],["u8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",13,[[["self"]],["u8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",13,[[["self"]],["u8"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"from","","",13,N],[11,"default","","",13,[[],["self"]]],[11,"hash","","",13,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",13,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",13,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",13,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",13,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",13,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",13,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",13,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",13,N],[11,"swap_bytes","","Reverses the byte order of the vector.",13,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",13,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",13,[[["self"]],["self"]]],[11,"shuffle1_dyn","","Shuffle vector elements according to `indices`.",13,[[["self"],["self"]],["self"]]],[11,"eq","","",13,[[["self"],["self"]],["bool"]]],[11,"ne","","",13,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",13,[[["self"],["self"]],["m8x2"]]],[11,"ne","","Lane-wise inequality comparison.",13,[[["self"],["self"]],["m8x2"]]],[11,"lt","","Lane-wise less-than comparison.",13,[[["self"],["self"]],["m8x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",13,[[["self"],["self"]],["m8x2"]]],[11,"gt","","Lane-wise greater-than comparison.",13,[[["self"],["self"]],["m8x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",13,[[["self"],["self"]],["m8x2"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",13,[[["self"]],["lexicographicallyordered",["u8x2"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",13,[[["self"]],["lexicographicallyordered",["u8x2"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",14,[[["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",14,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",14,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",14,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",14,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",14,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",14,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",14,[[["self"]],["self"]]],[11,"bitxor","","",14,[[["self"],["self"]],["self"]]],[11,"bitand","","",14,[[["self"],["self"]],["self"]]],[11,"bitor","","",14,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",14,[[["self"],["self"]]]],[11,"bitor_assign","","",14,[[["self"],["self"]]]],[11,"bitxor_assign","","",14,[[["self"],["self"]]]],[11,"bitxor","","",14,[[["self"],["bool"]],["self"]]],[11,"bitand","","",14,[[["self"],["bool"]],["self"]]],[11,"bitor","","",14,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",14,[[["self"],["bool"]]]],[11,"bitor_assign","","",14,[[["self"],["bool"]]]],[11,"bitxor_assign","","",14,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",14,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",14,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",14,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",14,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",14,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",14,[[["self"]],["bool"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"from","","",14,N],[11,"from","","",14,[[["m16x2"]],["self"]]],[11,"from","","",14,[[["m32x2"]],["self"]]],[11,"from","","",14,[[["m64x2"]],["self"]]],[11,"from","","",14,[[["m128x2"]],["self"]]],[11,"default","","",14,[[],["self"]]],[11,"eq","","",14,[[["self"],["self"]],["bool"]]],[11,"ne","","",14,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",14,[[["self"],["self"]],["m8x2"]]],[11,"ne","","Lane-wise inequality comparison.",14,[[["self"],["self"]],["m8x2"]]],[11,"lt","","Lane-wise less-than comparison.",14,[[["self"],["self"]],["m8x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",14,[[["self"],["self"]],["m8x2"]]],[11,"gt","","Lane-wise greater-than comparison.",14,[[["self"],["self"]],["m8x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",14,[[["self"],["self"]],["m8x2"]]],[11,"select","","Selects elements of `a` and `b` using mask.",14,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",14,[[["self"]],["lexicographicallyordered",["m8x2"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",14,[[["self"]],["lexicographicallyordered",["m8x2"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",15,[[["i8"],["i8"],["i8"],["i8"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",15,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",15,[[["i8"]],["self"]]],[11,"extract","","Extracts the value at `index`.",15,[[["self"],["usize"]],["i8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",15,[[["self"],["usize"]],["i8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",15,[[["self"],["usize"],["i8"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",15,[[["self"],["usize"],["i8"]],["self"]]],[11,"add","","",15,[[["self"],["self"]],["self"]]],[11,"sub","","",15,[[["self"],["self"]],["self"]]],[11,"mul","","",15,[[["self"],["self"]],["self"]]],[11,"div","","",15,[[["self"],["self"]],["self"]]],[11,"rem","","",15,[[["self"],["self"]],["self"]]],[11,"add_assign","","",15,[[["self"],["self"]]]],[11,"sub_assign","","",15,[[["self"],["self"]]]],[11,"mul_assign","","",15,[[["self"],["self"]]]],[11,"div_assign","","",15,[[["self"],["self"]]]],[11,"rem_assign","","",15,[[["self"],["self"]]]],[11,"add","","",15,[[["self"],["i8"]],["self"]]],[11,"sub","","",15,[[["self"],["i8"]],["self"]]],[11,"mul","","",15,[[["self"],["i8"]],["self"]]],[11,"div","","",15,[[["self"],["i8"]],["self"]]],[11,"rem","","",15,[[["self"],["i8"]],["self"]]],[11,"add_assign","","",15,[[["self"],["i8"]]]],[11,"sub_assign","","",15,[[["self"],["i8"]]]],[11,"mul_assign","","",15,[[["self"],["i8"]]]],[11,"div_assign","","",15,[[["self"],["i8"]]]],[11,"rem_assign","","",15,[[["self"],["i8"]]]],[11,"not","","",15,[[["self"]],["self"]]],[11,"bitxor","","",15,[[["self"],["self"]],["self"]]],[11,"bitand","","",15,[[["self"],["self"]],["self"]]],[11,"bitor","","",15,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",15,[[["self"],["self"]]]],[11,"bitor_assign","","",15,[[["self"],["self"]]]],[11,"bitxor_assign","","",15,[[["self"],["self"]]]],[11,"bitxor","","",15,[[["self"],["i8"]],["self"]]],[11,"bitand","","",15,[[["self"],["i8"]],["self"]]],[11,"bitor","","",15,[[["self"],["i8"]],["self"]]],[11,"bitand_assign","","",15,[[["self"],["i8"]]]],[11,"bitor_assign","","",15,[[["self"],["i8"]]]],[11,"bitxor_assign","","",15,[[["self"],["i8"]]]],[11,"shl","","",15,[[["self"],["self"]],["self"]]],[11,"shr","","",15,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",15,[[["self"],["self"]]]],[11,"shr_assign","","",15,[[["self"],["self"]]]],[11,"shl","","",15,[[["self"],["u32"]],["self"]]],[11,"shr","","",15,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",15,[[["self"],["u32"]]]],[11,"shr_assign","","",15,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",15,[[["self"],["i8x4"]],["i8x4"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",15,[[["self"],["i8x4"]],["i8x4"]]],[11,"neg","","",15,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",15,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",15,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",15,[[["self"]],["i8"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",15,[[["self"]],["i8"]]],[11,"sum","","",15,[[["i"]],["i8x4"]]],[11,"product","","",15,[[["i"]],["i8x4"]]],[11,"sum","","",15,[[["i"]],["i8x4"]]],[11,"product","","",15,[[["i"]],["i8x4"]]],[11,"max_element","","Largest vector element value.",15,[[["self"]],["i8"]]],[11,"min_element","","Smallest vector element value.",15,[[["self"]],["i8"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",15,[[["self"]],["i8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",15,[[["self"]],["i8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",15,[[["self"]],["i8"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"from","","",15,N],[11,"default","","",15,[[],["self"]]],[11,"hash","","",15,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",15,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",15,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",15,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",15,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",15,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",15,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",15,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",15,N],[11,"swap_bytes","","Reverses the byte order of the vector.",15,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",15,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",15,[[["self"]],["self"]]],[11,"eq","","",15,[[["self"],["self"]],["bool"]]],[11,"ne","","",15,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",15,[[["self"],["self"]],["m8x4"]]],[11,"ne","","Lane-wise inequality comparison.",15,[[["self"],["self"]],["m8x4"]]],[11,"lt","","Lane-wise less-than comparison.",15,[[["self"],["self"]],["m8x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",15,[[["self"],["self"]],["m8x4"]]],[11,"gt","","Lane-wise greater-than comparison.",15,[[["self"],["self"]],["m8x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",15,[[["self"],["self"]],["m8x4"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",15,[[["self"]],["lexicographicallyordered",["i8x4"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",15,[[["self"]],["lexicographicallyordered",["i8x4"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",16,[[["u8"],["u8"],["u8"],["u8"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",16,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",16,[[["u8"]],["self"]]],[11,"extract","","Extracts the value at `index`.",16,[[["self"],["usize"]],["u8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",16,[[["self"],["usize"]],["u8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",16,[[["self"],["usize"],["u8"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",16,[[["self"],["usize"],["u8"]],["self"]]],[11,"add","","",16,[[["self"],["self"]],["self"]]],[11,"sub","","",16,[[["self"],["self"]],["self"]]],[11,"mul","","",16,[[["self"],["self"]],["self"]]],[11,"div","","",16,[[["self"],["self"]],["self"]]],[11,"rem","","",16,[[["self"],["self"]],["self"]]],[11,"add_assign","","",16,[[["self"],["self"]]]],[11,"sub_assign","","",16,[[["self"],["self"]]]],[11,"mul_assign","","",16,[[["self"],["self"]]]],[11,"div_assign","","",16,[[["self"],["self"]]]],[11,"rem_assign","","",16,[[["self"],["self"]]]],[11,"add","","",16,[[["self"],["u8"]],["self"]]],[11,"sub","","",16,[[["self"],["u8"]],["self"]]],[11,"mul","","",16,[[["self"],["u8"]],["self"]]],[11,"div","","",16,[[["self"],["u8"]],["self"]]],[11,"rem","","",16,[[["self"],["u8"]],["self"]]],[11,"add_assign","","",16,[[["self"],["u8"]]]],[11,"sub_assign","","",16,[[["self"],["u8"]]]],[11,"mul_assign","","",16,[[["self"],["u8"]]]],[11,"div_assign","","",16,[[["self"],["u8"]]]],[11,"rem_assign","","",16,[[["self"],["u8"]]]],[11,"not","","",16,[[["self"]],["self"]]],[11,"bitxor","","",16,[[["self"],["self"]],["self"]]],[11,"bitand","","",16,[[["self"],["self"]],["self"]]],[11,"bitor","","",16,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",16,[[["self"],["self"]]]],[11,"bitor_assign","","",16,[[["self"],["self"]]]],[11,"bitxor_assign","","",16,[[["self"],["self"]]]],[11,"bitxor","","",16,[[["self"],["u8"]],["self"]]],[11,"bitand","","",16,[[["self"],["u8"]],["self"]]],[11,"bitor","","",16,[[["self"],["u8"]],["self"]]],[11,"bitand_assign","","",16,[[["self"],["u8"]]]],[11,"bitor_assign","","",16,[[["self"],["u8"]]]],[11,"bitxor_assign","","",16,[[["self"],["u8"]]]],[11,"shl","","",16,[[["self"],["self"]],["self"]]],[11,"shr","","",16,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",16,[[["self"],["self"]]]],[11,"shr_assign","","",16,[[["self"],["self"]]]],[11,"shl","","",16,[[["self"],["u32"]],["self"]]],[11,"shr","","",16,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",16,[[["self"],["u32"]]]],[11,"shr_assign","","",16,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",16,[[["self"],["u8x4"]],["u8x4"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",16,[[["self"],["u8x4"]],["u8x4"]]],[11,"min","","Minimum of two vectors.",16,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",16,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",16,[[["self"]],["u8"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",16,[[["self"]],["u8"]]],[11,"sum","","",16,[[["i"]],["u8x4"]]],[11,"product","","",16,[[["i"]],["u8x4"]]],[11,"sum","","",16,[[["i"]],["u8x4"]]],[11,"product","","",16,[[["i"]],["u8x4"]]],[11,"max_element","","Largest vector element value.",16,[[["self"]],["u8"]]],[11,"min_element","","Smallest vector element value.",16,[[["self"]],["u8"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",16,[[["self"]],["u8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",16,[[["self"]],["u8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",16,[[["self"]],["u8"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"from","","",16,N],[11,"default","","",16,[[],["self"]]],[11,"hash","","",16,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",16,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",16,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",16,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",16,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",16,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",16,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",16,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",16,N],[11,"swap_bytes","","Reverses the byte order of the vector.",16,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",16,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",16,[[["self"]],["self"]]],[11,"shuffle1_dyn","","Shuffle vector elements according to `indices`.",16,[[["self"],["self"]],["self"]]],[11,"eq","","",16,[[["self"],["self"]],["bool"]]],[11,"ne","","",16,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",16,[[["self"],["self"]],["m8x4"]]],[11,"ne","","Lane-wise inequality comparison.",16,[[["self"],["self"]],["m8x4"]]],[11,"lt","","Lane-wise less-than comparison.",16,[[["self"],["self"]],["m8x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",16,[[["self"],["self"]],["m8x4"]]],[11,"gt","","Lane-wise greater-than comparison.",16,[[["self"],["self"]],["m8x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",16,[[["self"],["self"]],["m8x4"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",16,[[["self"]],["lexicographicallyordered",["u8x4"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",16,[[["self"]],["lexicographicallyordered",["u8x4"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",17,[[["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",17,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",17,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",17,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",17,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",17,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",17,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",17,[[["self"]],["self"]]],[11,"bitxor","","",17,[[["self"],["self"]],["self"]]],[11,"bitand","","",17,[[["self"],["self"]],["self"]]],[11,"bitor","","",17,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",17,[[["self"],["self"]]]],[11,"bitor_assign","","",17,[[["self"],["self"]]]],[11,"bitxor_assign","","",17,[[["self"],["self"]]]],[11,"bitxor","","",17,[[["self"],["bool"]],["self"]]],[11,"bitand","","",17,[[["self"],["bool"]],["self"]]],[11,"bitor","","",17,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",17,[[["self"],["bool"]]]],[11,"bitor_assign","","",17,[[["self"],["bool"]]]],[11,"bitxor_assign","","",17,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",17,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",17,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",17,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",17,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",17,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",17,[[["self"]],["bool"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"from","","",17,N],[11,"from","","",17,[[["m16x4"]],["self"]]],[11,"from","","",17,[[["m32x4"]],["self"]]],[11,"from","","",17,[[["m64x4"]],["self"]]],[11,"default","","",17,[[],["self"]]],[11,"eq","","",17,[[["self"],["self"]],["bool"]]],[11,"ne","","",17,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",17,[[["self"],["self"]],["m8x4"]]],[11,"ne","","Lane-wise inequality comparison.",17,[[["self"],["self"]],["m8x4"]]],[11,"lt","","Lane-wise less-than comparison.",17,[[["self"],["self"]],["m8x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",17,[[["self"],["self"]],["m8x4"]]],[11,"gt","","Lane-wise greater-than comparison.",17,[[["self"],["self"]],["m8x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",17,[[["self"],["self"]],["m8x4"]]],[11,"select","","Selects elements of `a` and `b` using mask.",17,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",17,[[["self"]],["lexicographicallyordered",["m8x4"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",17,[[["self"]],["lexicographicallyordered",["m8x4"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",18,[[["i16"],["i16"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",18,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",18,[[["i16"]],["self"]]],[11,"extract","","Extracts the value at `index`.",18,[[["self"],["usize"]],["i16"]]],[11,"extract_unchecked","","Extracts the value at `index`.",18,[[["self"],["usize"]],["i16"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",18,[[["self"],["usize"],["i16"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",18,[[["self"],["usize"],["i16"]],["self"]]],[11,"add","","",18,[[["self"],["self"]],["self"]]],[11,"sub","","",18,[[["self"],["self"]],["self"]]],[11,"mul","","",18,[[["self"],["self"]],["self"]]],[11,"div","","",18,[[["self"],["self"]],["self"]]],[11,"rem","","",18,[[["self"],["self"]],["self"]]],[11,"add_assign","","",18,[[["self"],["self"]]]],[11,"sub_assign","","",18,[[["self"],["self"]]]],[11,"mul_assign","","",18,[[["self"],["self"]]]],[11,"div_assign","","",18,[[["self"],["self"]]]],[11,"rem_assign","","",18,[[["self"],["self"]]]],[11,"add","","",18,[[["self"],["i16"]],["self"]]],[11,"sub","","",18,[[["self"],["i16"]],["self"]]],[11,"mul","","",18,[[["self"],["i16"]],["self"]]],[11,"div","","",18,[[["self"],["i16"]],["self"]]],[11,"rem","","",18,[[["self"],["i16"]],["self"]]],[11,"add_assign","","",18,[[["self"],["i16"]]]],[11,"sub_assign","","",18,[[["self"],["i16"]]]],[11,"mul_assign","","",18,[[["self"],["i16"]]]],[11,"div_assign","","",18,[[["self"],["i16"]]]],[11,"rem_assign","","",18,[[["self"],["i16"]]]],[11,"not","","",18,[[["self"]],["self"]]],[11,"bitxor","","",18,[[["self"],["self"]],["self"]]],[11,"bitand","","",18,[[["self"],["self"]],["self"]]],[11,"bitor","","",18,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",18,[[["self"],["self"]]]],[11,"bitor_assign","","",18,[[["self"],["self"]]]],[11,"bitxor_assign","","",18,[[["self"],["self"]]]],[11,"bitxor","","",18,[[["self"],["i16"]],["self"]]],[11,"bitand","","",18,[[["self"],["i16"]],["self"]]],[11,"bitor","","",18,[[["self"],["i16"]],["self"]]],[11,"bitand_assign","","",18,[[["self"],["i16"]]]],[11,"bitor_assign","","",18,[[["self"],["i16"]]]],[11,"bitxor_assign","","",18,[[["self"],["i16"]]]],[11,"shl","","",18,[[["self"],["self"]],["self"]]],[11,"shr","","",18,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",18,[[["self"],["self"]]]],[11,"shr_assign","","",18,[[["self"],["self"]]]],[11,"shl","","",18,[[["self"],["u32"]],["self"]]],[11,"shr","","",18,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",18,[[["self"],["u32"]]]],[11,"shr_assign","","",18,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",18,[[["self"],["i16x2"]],["i16x2"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",18,[[["self"],["i16x2"]],["i16x2"]]],[11,"neg","","",18,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",18,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",18,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",18,[[["self"]],["i16"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",18,[[["self"]],["i16"]]],[11,"sum","","",18,[[["i"]],["i16x2"]]],[11,"product","","",18,[[["i"]],["i16x2"]]],[11,"sum","","",18,[[["i"]],["i16x2"]]],[11,"product","","",18,[[["i"]],["i16x2"]]],[11,"max_element","","Largest vector element value.",18,[[["self"]],["i16"]]],[11,"min_element","","Smallest vector element value.",18,[[["self"]],["i16"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",18,[[["self"]],["i16"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",18,[[["self"]],["i16"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",18,[[["self"]],["i16"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"from","","",18,N],[11,"from","","",18,[[["i8x2"]],["self"]]],[11,"from","","",18,[[["u8x2"]],["self"]]],[11,"default","","",18,[[],["self"]]],[11,"hash","","",18,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",18,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",18,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",18,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",18,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",18,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",18,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",18,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",18,N],[11,"swap_bytes","","Reverses the byte order of the vector.",18,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",18,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",18,[[["self"]],["self"]]],[11,"eq","","",18,[[["self"],["self"]],["bool"]]],[11,"ne","","",18,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",18,[[["self"],["self"]],["m16x2"]]],[11,"ne","","Lane-wise inequality comparison.",18,[[["self"],["self"]],["m16x2"]]],[11,"lt","","Lane-wise less-than comparison.",18,[[["self"],["self"]],["m16x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",18,[[["self"],["self"]],["m16x2"]]],[11,"gt","","Lane-wise greater-than comparison.",18,[[["self"],["self"]],["m16x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",18,[[["self"],["self"]],["m16x2"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",18,[[["self"]],["lexicographicallyordered",["i16x2"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",18,[[["self"]],["lexicographicallyordered",["i16x2"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",19,[[["u16"],["u16"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",19,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",19,[[["u16"]],["self"]]],[11,"extract","","Extracts the value at `index`.",19,[[["self"],["usize"]],["u16"]]],[11,"extract_unchecked","","Extracts the value at `index`.",19,[[["self"],["usize"]],["u16"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",19,[[["self"],["usize"],["u16"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",19,[[["self"],["usize"],["u16"]],["self"]]],[11,"add","","",19,[[["self"],["self"]],["self"]]],[11,"sub","","",19,[[["self"],["self"]],["self"]]],[11,"mul","","",19,[[["self"],["self"]],["self"]]],[11,"div","","",19,[[["self"],["self"]],["self"]]],[11,"rem","","",19,[[["self"],["self"]],["self"]]],[11,"add_assign","","",19,[[["self"],["self"]]]],[11,"sub_assign","","",19,[[["self"],["self"]]]],[11,"mul_assign","","",19,[[["self"],["self"]]]],[11,"div_assign","","",19,[[["self"],["self"]]]],[11,"rem_assign","","",19,[[["self"],["self"]]]],[11,"add","","",19,[[["self"],["u16"]],["self"]]],[11,"sub","","",19,[[["self"],["u16"]],["self"]]],[11,"mul","","",19,[[["self"],["u16"]],["self"]]],[11,"div","","",19,[[["self"],["u16"]],["self"]]],[11,"rem","","",19,[[["self"],["u16"]],["self"]]],[11,"add_assign","","",19,[[["self"],["u16"]]]],[11,"sub_assign","","",19,[[["self"],["u16"]]]],[11,"mul_assign","","",19,[[["self"],["u16"]]]],[11,"div_assign","","",19,[[["self"],["u16"]]]],[11,"rem_assign","","",19,[[["self"],["u16"]]]],[11,"not","","",19,[[["self"]],["self"]]],[11,"bitxor","","",19,[[["self"],["self"]],["self"]]],[11,"bitand","","",19,[[["self"],["self"]],["self"]]],[11,"bitor","","",19,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",19,[[["self"],["self"]]]],[11,"bitor_assign","","",19,[[["self"],["self"]]]],[11,"bitxor_assign","","",19,[[["self"],["self"]]]],[11,"bitxor","","",19,[[["self"],["u16"]],["self"]]],[11,"bitand","","",19,[[["self"],["u16"]],["self"]]],[11,"bitor","","",19,[[["self"],["u16"]],["self"]]],[11,"bitand_assign","","",19,[[["self"],["u16"]]]],[11,"bitor_assign","","",19,[[["self"],["u16"]]]],[11,"bitxor_assign","","",19,[[["self"],["u16"]]]],[11,"shl","","",19,[[["self"],["self"]],["self"]]],[11,"shr","","",19,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",19,[[["self"],["self"]]]],[11,"shr_assign","","",19,[[["self"],["self"]]]],[11,"shl","","",19,[[["self"],["u32"]],["self"]]],[11,"shr","","",19,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",19,[[["self"],["u32"]]]],[11,"shr_assign","","",19,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",19,[[["self"],["u16x2"]],["u16x2"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",19,[[["self"],["u16x2"]],["u16x2"]]],[11,"min","","Minimum of two vectors.",19,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",19,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",19,[[["self"]],["u16"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",19,[[["self"]],["u16"]]],[11,"sum","","",19,[[["i"]],["u16x2"]]],[11,"product","","",19,[[["i"]],["u16x2"]]],[11,"sum","","",19,[[["i"]],["u16x2"]]],[11,"product","","",19,[[["i"]],["u16x2"]]],[11,"max_element","","Largest vector element value.",19,[[["self"]],["u16"]]],[11,"min_element","","Smallest vector element value.",19,[[["self"]],["u16"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",19,[[["self"]],["u16"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",19,[[["self"]],["u16"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",19,[[["self"]],["u16"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"from","","",19,N],[11,"from","","",19,[[["u8x2"]],["self"]]],[11,"default","","",19,[[],["self"]]],[11,"hash","","",19,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",19,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",19,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",19,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",19,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",19,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",19,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",19,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",19,N],[11,"swap_bytes","","Reverses the byte order of the vector.",19,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",19,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",19,[[["self"]],["self"]]],[11,"shuffle1_dyn","","Shuffle vector elements according to `indices`.",19,[[["self"],["self"]],["self"]]],[11,"eq","","",19,[[["self"],["self"]],["bool"]]],[11,"ne","","",19,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",19,[[["self"],["self"]],["m16x2"]]],[11,"ne","","Lane-wise inequality comparison.",19,[[["self"],["self"]],["m16x2"]]],[11,"lt","","Lane-wise less-than comparison.",19,[[["self"],["self"]],["m16x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",19,[[["self"],["self"]],["m16x2"]]],[11,"gt","","Lane-wise greater-than comparison.",19,[[["self"],["self"]],["m16x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",19,[[["self"],["self"]],["m16x2"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",19,[[["self"]],["lexicographicallyordered",["u16x2"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",19,[[["self"]],["lexicographicallyordered",["u16x2"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",20,[[["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",20,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",20,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",20,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",20,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",20,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",20,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",20,[[["self"]],["self"]]],[11,"bitxor","","",20,[[["self"],["self"]],["self"]]],[11,"bitand","","",20,[[["self"],["self"]],["self"]]],[11,"bitor","","",20,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",20,[[["self"],["self"]]]],[11,"bitor_assign","","",20,[[["self"],["self"]]]],[11,"bitxor_assign","","",20,[[["self"],["self"]]]],[11,"bitxor","","",20,[[["self"],["bool"]],["self"]]],[11,"bitand","","",20,[[["self"],["bool"]],["self"]]],[11,"bitor","","",20,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",20,[[["self"],["bool"]]]],[11,"bitor_assign","","",20,[[["self"],["bool"]]]],[11,"bitxor_assign","","",20,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",20,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",20,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",20,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",20,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",20,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",20,[[["self"]],["bool"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"from","","",20,N],[11,"from","","",20,[[["m8x2"]],["self"]]],[11,"from","","",20,[[["m32x2"]],["self"]]],[11,"from","","",20,[[["m64x2"]],["self"]]],[11,"from","","",20,[[["m128x2"]],["self"]]],[11,"default","","",20,[[],["self"]]],[11,"eq","","",20,[[["self"],["self"]],["bool"]]],[11,"ne","","",20,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",20,[[["self"],["self"]],["m16x2"]]],[11,"ne","","Lane-wise inequality comparison.",20,[[["self"],["self"]],["m16x2"]]],[11,"lt","","Lane-wise less-than comparison.",20,[[["self"],["self"]],["m16x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",20,[[["self"],["self"]],["m16x2"]]],[11,"gt","","Lane-wise greater-than comparison.",20,[[["self"],["self"]],["m16x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",20,[[["self"],["self"]],["m16x2"]]],[11,"select","","Selects elements of `a` and `b` using mask.",20,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",20,[[["self"]],["lexicographicallyordered",["m16x2"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",20,[[["self"]],["lexicographicallyordered",["m16x2"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",21,[[["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",21,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",21,[[["i8"]],["self"]]],[11,"extract","","Extracts the value at `index`.",21,[[["self"],["usize"]],["i8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",21,[[["self"],["usize"]],["i8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",21,[[["self"],["usize"],["i8"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",21,[[["self"],["usize"],["i8"]],["self"]]],[11,"add","","",21,[[["self"],["self"]],["self"]]],[11,"sub","","",21,[[["self"],["self"]],["self"]]],[11,"mul","","",21,[[["self"],["self"]],["self"]]],[11,"div","","",21,[[["self"],["self"]],["self"]]],[11,"rem","","",21,[[["self"],["self"]],["self"]]],[11,"add_assign","","",21,[[["self"],["self"]]]],[11,"sub_assign","","",21,[[["self"],["self"]]]],[11,"mul_assign","","",21,[[["self"],["self"]]]],[11,"div_assign","","",21,[[["self"],["self"]]]],[11,"rem_assign","","",21,[[["self"],["self"]]]],[11,"add","","",21,[[["self"],["i8"]],["self"]]],[11,"sub","","",21,[[["self"],["i8"]],["self"]]],[11,"mul","","",21,[[["self"],["i8"]],["self"]]],[11,"div","","",21,[[["self"],["i8"]],["self"]]],[11,"rem","","",21,[[["self"],["i8"]],["self"]]],[11,"add_assign","","",21,[[["self"],["i8"]]]],[11,"sub_assign","","",21,[[["self"],["i8"]]]],[11,"mul_assign","","",21,[[["self"],["i8"]]]],[11,"div_assign","","",21,[[["self"],["i8"]]]],[11,"rem_assign","","",21,[[["self"],["i8"]]]],[11,"not","","",21,[[["self"]],["self"]]],[11,"bitxor","","",21,[[["self"],["self"]],["self"]]],[11,"bitand","","",21,[[["self"],["self"]],["self"]]],[11,"bitor","","",21,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",21,[[["self"],["self"]]]],[11,"bitor_assign","","",21,[[["self"],["self"]]]],[11,"bitxor_assign","","",21,[[["self"],["self"]]]],[11,"bitxor","","",21,[[["self"],["i8"]],["self"]]],[11,"bitand","","",21,[[["self"],["i8"]],["self"]]],[11,"bitor","","",21,[[["self"],["i8"]],["self"]]],[11,"bitand_assign","","",21,[[["self"],["i8"]]]],[11,"bitor_assign","","",21,[[["self"],["i8"]]]],[11,"bitxor_assign","","",21,[[["self"],["i8"]]]],[11,"shl","","",21,[[["self"],["self"]],["self"]]],[11,"shr","","",21,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",21,[[["self"],["self"]]]],[11,"shr_assign","","",21,[[["self"],["self"]]]],[11,"shl","","",21,[[["self"],["u32"]],["self"]]],[11,"shr","","",21,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",21,[[["self"],["u32"]]]],[11,"shr_assign","","",21,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",21,[[["self"],["i8x8"]],["i8x8"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",21,[[["self"],["i8x8"]],["i8x8"]]],[11,"neg","","",21,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",21,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",21,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",21,[[["self"]],["i8"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",21,[[["self"]],["i8"]]],[11,"sum","","",21,[[["i"]],["i8x8"]]],[11,"product","","",21,[[["i"]],["i8x8"]]],[11,"sum","","",21,[[["i"]],["i8x8"]]],[11,"product","","",21,[[["i"]],["i8x8"]]],[11,"max_element","","Largest vector element value.",21,[[["self"]],["i8"]]],[11,"min_element","","Smallest vector element value.",21,[[["self"]],["i8"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",21,[[["self"]],["i8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",21,[[["self"]],["i8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",21,[[["self"]],["i8"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"from","","",21,N],[11,"default","","",21,[[],["self"]]],[11,"hash","","",21,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",21,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",21,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",21,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",21,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",21,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",21,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",21,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",21,N],[11,"swap_bytes","","Reverses the byte order of the vector.",21,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",21,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",21,[[["self"]],["self"]]],[11,"eq","","",21,[[["self"],["self"]],["bool"]]],[11,"ne","","",21,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",21,[[["self"],["self"]],["m8x8"]]],[11,"ne","","Lane-wise inequality comparison.",21,[[["self"],["self"]],["m8x8"]]],[11,"lt","","Lane-wise less-than comparison.",21,[[["self"],["self"]],["m8x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",21,[[["self"],["self"]],["m8x8"]]],[11,"gt","","Lane-wise greater-than comparison.",21,[[["self"],["self"]],["m8x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",21,[[["self"],["self"]],["m8x8"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",21,[[["self"]],["lexicographicallyordered",["i8x8"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",21,[[["self"]],["lexicographicallyordered",["i8x8"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",22,[[["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",22,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",22,[[["u8"]],["self"]]],[11,"extract","","Extracts the value at `index`.",22,[[["self"],["usize"]],["u8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",22,[[["self"],["usize"]],["u8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",22,[[["self"],["usize"],["u8"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",22,[[["self"],["usize"],["u8"]],["self"]]],[11,"add","","",22,[[["self"],["self"]],["self"]]],[11,"sub","","",22,[[["self"],["self"]],["self"]]],[11,"mul","","",22,[[["self"],["self"]],["self"]]],[11,"div","","",22,[[["self"],["self"]],["self"]]],[11,"rem","","",22,[[["self"],["self"]],["self"]]],[11,"add_assign","","",22,[[["self"],["self"]]]],[11,"sub_assign","","",22,[[["self"],["self"]]]],[11,"mul_assign","","",22,[[["self"],["self"]]]],[11,"div_assign","","",22,[[["self"],["self"]]]],[11,"rem_assign","","",22,[[["self"],["self"]]]],[11,"add","","",22,[[["self"],["u8"]],["self"]]],[11,"sub","","",22,[[["self"],["u8"]],["self"]]],[11,"mul","","",22,[[["self"],["u8"]],["self"]]],[11,"div","","",22,[[["self"],["u8"]],["self"]]],[11,"rem","","",22,[[["self"],["u8"]],["self"]]],[11,"add_assign","","",22,[[["self"],["u8"]]]],[11,"sub_assign","","",22,[[["self"],["u8"]]]],[11,"mul_assign","","",22,[[["self"],["u8"]]]],[11,"div_assign","","",22,[[["self"],["u8"]]]],[11,"rem_assign","","",22,[[["self"],["u8"]]]],[11,"not","","",22,[[["self"]],["self"]]],[11,"bitxor","","",22,[[["self"],["self"]],["self"]]],[11,"bitand","","",22,[[["self"],["self"]],["self"]]],[11,"bitor","","",22,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",22,[[["self"],["self"]]]],[11,"bitor_assign","","",22,[[["self"],["self"]]]],[11,"bitxor_assign","","",22,[[["self"],["self"]]]],[11,"bitxor","","",22,[[["self"],["u8"]],["self"]]],[11,"bitand","","",22,[[["self"],["u8"]],["self"]]],[11,"bitor","","",22,[[["self"],["u8"]],["self"]]],[11,"bitand_assign","","",22,[[["self"],["u8"]]]],[11,"bitor_assign","","",22,[[["self"],["u8"]]]],[11,"bitxor_assign","","",22,[[["self"],["u8"]]]],[11,"shl","","",22,[[["self"],["self"]],["self"]]],[11,"shr","","",22,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",22,[[["self"],["self"]]]],[11,"shr_assign","","",22,[[["self"],["self"]]]],[11,"shl","","",22,[[["self"],["u32"]],["self"]]],[11,"shr","","",22,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",22,[[["self"],["u32"]]]],[11,"shr_assign","","",22,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",22,[[["self"],["u8x8"]],["u8x8"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",22,[[["self"],["u8x8"]],["u8x8"]]],[11,"min","","Minimum of two vectors.",22,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",22,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",22,[[["self"]],["u8"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",22,[[["self"]],["u8"]]],[11,"sum","","",22,[[["i"]],["u8x8"]]],[11,"product","","",22,[[["i"]],["u8x8"]]],[11,"sum","","",22,[[["i"]],["u8x8"]]],[11,"product","","",22,[[["i"]],["u8x8"]]],[11,"max_element","","Largest vector element value.",22,[[["self"]],["u8"]]],[11,"min_element","","Smallest vector element value.",22,[[["self"]],["u8"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",22,[[["self"]],["u8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",22,[[["self"]],["u8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",22,[[["self"]],["u8"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"from","","",22,N],[11,"default","","",22,[[],["self"]]],[11,"hash","","",22,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",22,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",22,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",22,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",22,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",22,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",22,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",22,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",22,N],[11,"swap_bytes","","Reverses the byte order of the vector.",22,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",22,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",22,[[["self"]],["self"]]],[11,"shuffle1_dyn","","Shuffle vector elements according to `indices`.",22,[[["self"],["self"]],["self"]]],[11,"eq","","",22,[[["self"],["self"]],["bool"]]],[11,"ne","","",22,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",22,[[["self"],["self"]],["m8x8"]]],[11,"ne","","Lane-wise inequality comparison.",22,[[["self"],["self"]],["m8x8"]]],[11,"lt","","Lane-wise less-than comparison.",22,[[["self"],["self"]],["m8x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",22,[[["self"],["self"]],["m8x8"]]],[11,"gt","","Lane-wise greater-than comparison.",22,[[["self"],["self"]],["m8x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",22,[[["self"],["self"]],["m8x8"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",22,[[["self"]],["lexicographicallyordered",["u8x8"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",22,[[["self"]],["lexicographicallyordered",["u8x8"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",23,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",23,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",23,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",23,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",23,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",23,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",23,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",23,[[["self"]],["self"]]],[11,"bitxor","","",23,[[["self"],["self"]],["self"]]],[11,"bitand","","",23,[[["self"],["self"]],["self"]]],[11,"bitor","","",23,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",23,[[["self"],["self"]]]],[11,"bitor_assign","","",23,[[["self"],["self"]]]],[11,"bitxor_assign","","",23,[[["self"],["self"]]]],[11,"bitxor","","",23,[[["self"],["bool"]],["self"]]],[11,"bitand","","",23,[[["self"],["bool"]],["self"]]],[11,"bitor","","",23,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",23,[[["self"],["bool"]]]],[11,"bitor_assign","","",23,[[["self"],["bool"]]]],[11,"bitxor_assign","","",23,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",23,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",23,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",23,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",23,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",23,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",23,[[["self"]],["bool"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"from","","",23,N],[11,"from","","",23,[[["m16x8"]],["self"]]],[11,"from","","",23,[[["m32x8"]],["self"]]],[11,"default","","",23,[[],["self"]]],[11,"eq","","",23,[[["self"],["self"]],["bool"]]],[11,"ne","","",23,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",23,[[["self"],["self"]],["m8x8"]]],[11,"ne","","Lane-wise inequality comparison.",23,[[["self"],["self"]],["m8x8"]]],[11,"lt","","Lane-wise less-than comparison.",23,[[["self"],["self"]],["m8x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",23,[[["self"],["self"]],["m8x8"]]],[11,"gt","","Lane-wise greater-than comparison.",23,[[["self"],["self"]],["m8x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",23,[[["self"],["self"]],["m8x8"]]],[11,"select","","Selects elements of `a` and `b` using mask.",23,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",23,[[["self"]],["lexicographicallyordered",["m8x8"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",23,[[["self"]],["lexicographicallyordered",["m8x8"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",24,[[["i16"],["i16"],["i16"],["i16"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",24,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",24,[[["i16"]],["self"]]],[11,"extract","","Extracts the value at `index`.",24,[[["self"],["usize"]],["i16"]]],[11,"extract_unchecked","","Extracts the value at `index`.",24,[[["self"],["usize"]],["i16"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",24,[[["self"],["usize"],["i16"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",24,[[["self"],["usize"],["i16"]],["self"]]],[11,"add","","",24,[[["self"],["self"]],["self"]]],[11,"sub","","",24,[[["self"],["self"]],["self"]]],[11,"mul","","",24,[[["self"],["self"]],["self"]]],[11,"div","","",24,[[["self"],["self"]],["self"]]],[11,"rem","","",24,[[["self"],["self"]],["self"]]],[11,"add_assign","","",24,[[["self"],["self"]]]],[11,"sub_assign","","",24,[[["self"],["self"]]]],[11,"mul_assign","","",24,[[["self"],["self"]]]],[11,"div_assign","","",24,[[["self"],["self"]]]],[11,"rem_assign","","",24,[[["self"],["self"]]]],[11,"add","","",24,[[["self"],["i16"]],["self"]]],[11,"sub","","",24,[[["self"],["i16"]],["self"]]],[11,"mul","","",24,[[["self"],["i16"]],["self"]]],[11,"div","","",24,[[["self"],["i16"]],["self"]]],[11,"rem","","",24,[[["self"],["i16"]],["self"]]],[11,"add_assign","","",24,[[["self"],["i16"]]]],[11,"sub_assign","","",24,[[["self"],["i16"]]]],[11,"mul_assign","","",24,[[["self"],["i16"]]]],[11,"div_assign","","",24,[[["self"],["i16"]]]],[11,"rem_assign","","",24,[[["self"],["i16"]]]],[11,"not","","",24,[[["self"]],["self"]]],[11,"bitxor","","",24,[[["self"],["self"]],["self"]]],[11,"bitand","","",24,[[["self"],["self"]],["self"]]],[11,"bitor","","",24,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",24,[[["self"],["self"]]]],[11,"bitor_assign","","",24,[[["self"],["self"]]]],[11,"bitxor_assign","","",24,[[["self"],["self"]]]],[11,"bitxor","","",24,[[["self"],["i16"]],["self"]]],[11,"bitand","","",24,[[["self"],["i16"]],["self"]]],[11,"bitor","","",24,[[["self"],["i16"]],["self"]]],[11,"bitand_assign","","",24,[[["self"],["i16"]]]],[11,"bitor_assign","","",24,[[["self"],["i16"]]]],[11,"bitxor_assign","","",24,[[["self"],["i16"]]]],[11,"shl","","",24,[[["self"],["self"]],["self"]]],[11,"shr","","",24,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",24,[[["self"],["self"]]]],[11,"shr_assign","","",24,[[["self"],["self"]]]],[11,"shl","","",24,[[["self"],["u32"]],["self"]]],[11,"shr","","",24,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",24,[[["self"],["u32"]]]],[11,"shr_assign","","",24,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",24,[[["self"],["i16x4"]],["i16x4"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",24,[[["self"],["i16x4"]],["i16x4"]]],[11,"neg","","",24,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",24,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",24,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",24,[[["self"]],["i16"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",24,[[["self"]],["i16"]]],[11,"sum","","",24,[[["i"]],["i16x4"]]],[11,"product","","",24,[[["i"]],["i16x4"]]],[11,"sum","","",24,[[["i"]],["i16x4"]]],[11,"product","","",24,[[["i"]],["i16x4"]]],[11,"max_element","","Largest vector element value.",24,[[["self"]],["i16"]]],[11,"min_element","","Smallest vector element value.",24,[[["self"]],["i16"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",24,[[["self"]],["i16"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",24,[[["self"]],["i16"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",24,[[["self"]],["i16"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"from","","",24,N],[11,"from","","",24,[[["i8x4"]],["self"]]],[11,"from","","",24,[[["u8x4"]],["self"]]],[11,"default","","",24,[[],["self"]]],[11,"hash","","",24,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",24,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",24,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",24,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",24,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",24,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",24,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",24,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",24,N],[11,"swap_bytes","","Reverses the byte order of the vector.",24,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",24,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",24,[[["self"]],["self"]]],[11,"eq","","",24,[[["self"],["self"]],["bool"]]],[11,"ne","","",24,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",24,[[["self"],["self"]],["m16x4"]]],[11,"ne","","Lane-wise inequality comparison.",24,[[["self"],["self"]],["m16x4"]]],[11,"lt","","Lane-wise less-than comparison.",24,[[["self"],["self"]],["m16x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",24,[[["self"],["self"]],["m16x4"]]],[11,"gt","","Lane-wise greater-than comparison.",24,[[["self"],["self"]],["m16x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",24,[[["self"],["self"]],["m16x4"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",24,[[["self"]],["lexicographicallyordered",["i16x4"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",24,[[["self"]],["lexicographicallyordered",["i16x4"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",25,[[["u16"],["u16"],["u16"],["u16"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",25,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",25,[[["u16"]],["self"]]],[11,"extract","","Extracts the value at `index`.",25,[[["self"],["usize"]],["u16"]]],[11,"extract_unchecked","","Extracts the value at `index`.",25,[[["self"],["usize"]],["u16"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",25,[[["self"],["usize"],["u16"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",25,[[["self"],["usize"],["u16"]],["self"]]],[11,"add","","",25,[[["self"],["self"]],["self"]]],[11,"sub","","",25,[[["self"],["self"]],["self"]]],[11,"mul","","",25,[[["self"],["self"]],["self"]]],[11,"div","","",25,[[["self"],["self"]],["self"]]],[11,"rem","","",25,[[["self"],["self"]],["self"]]],[11,"add_assign","","",25,[[["self"],["self"]]]],[11,"sub_assign","","",25,[[["self"],["self"]]]],[11,"mul_assign","","",25,[[["self"],["self"]]]],[11,"div_assign","","",25,[[["self"],["self"]]]],[11,"rem_assign","","",25,[[["self"],["self"]]]],[11,"add","","",25,[[["self"],["u16"]],["self"]]],[11,"sub","","",25,[[["self"],["u16"]],["self"]]],[11,"mul","","",25,[[["self"],["u16"]],["self"]]],[11,"div","","",25,[[["self"],["u16"]],["self"]]],[11,"rem","","",25,[[["self"],["u16"]],["self"]]],[11,"add_assign","","",25,[[["self"],["u16"]]]],[11,"sub_assign","","",25,[[["self"],["u16"]]]],[11,"mul_assign","","",25,[[["self"],["u16"]]]],[11,"div_assign","","",25,[[["self"],["u16"]]]],[11,"rem_assign","","",25,[[["self"],["u16"]]]],[11,"not","","",25,[[["self"]],["self"]]],[11,"bitxor","","",25,[[["self"],["self"]],["self"]]],[11,"bitand","","",25,[[["self"],["self"]],["self"]]],[11,"bitor","","",25,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",25,[[["self"],["self"]]]],[11,"bitor_assign","","",25,[[["self"],["self"]]]],[11,"bitxor_assign","","",25,[[["self"],["self"]]]],[11,"bitxor","","",25,[[["self"],["u16"]],["self"]]],[11,"bitand","","",25,[[["self"],["u16"]],["self"]]],[11,"bitor","","",25,[[["self"],["u16"]],["self"]]],[11,"bitand_assign","","",25,[[["self"],["u16"]]]],[11,"bitor_assign","","",25,[[["self"],["u16"]]]],[11,"bitxor_assign","","",25,[[["self"],["u16"]]]],[11,"shl","","",25,[[["self"],["self"]],["self"]]],[11,"shr","","",25,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",25,[[["self"],["self"]]]],[11,"shr_assign","","",25,[[["self"],["self"]]]],[11,"shl","","",25,[[["self"],["u32"]],["self"]]],[11,"shr","","",25,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",25,[[["self"],["u32"]]]],[11,"shr_assign","","",25,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",25,[[["self"],["u16x4"]],["u16x4"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",25,[[["self"],["u16x4"]],["u16x4"]]],[11,"min","","Minimum of two vectors.",25,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",25,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",25,[[["self"]],["u16"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",25,[[["self"]],["u16"]]],[11,"sum","","",25,[[["i"]],["u16x4"]]],[11,"product","","",25,[[["i"]],["u16x4"]]],[11,"sum","","",25,[[["i"]],["u16x4"]]],[11,"product","","",25,[[["i"]],["u16x4"]]],[11,"max_element","","Largest vector element value.",25,[[["self"]],["u16"]]],[11,"min_element","","Smallest vector element value.",25,[[["self"]],["u16"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",25,[[["self"]],["u16"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",25,[[["self"]],["u16"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",25,[[["self"]],["u16"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"from","","",25,N],[11,"from","","",25,[[["u8x4"]],["self"]]],[11,"default","","",25,[[],["self"]]],[11,"hash","","",25,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",25,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",25,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",25,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",25,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",25,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",25,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",25,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",25,N],[11,"swap_bytes","","Reverses the byte order of the vector.",25,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",25,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",25,[[["self"]],["self"]]],[11,"shuffle1_dyn","","Shuffle vector elements according to `indices`.",25,[[["self"],["self"]],["self"]]],[11,"eq","","",25,[[["self"],["self"]],["bool"]]],[11,"ne","","",25,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",25,[[["self"],["self"]],["m16x4"]]],[11,"ne","","Lane-wise inequality comparison.",25,[[["self"],["self"]],["m16x4"]]],[11,"lt","","Lane-wise less-than comparison.",25,[[["self"],["self"]],["m16x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",25,[[["self"],["self"]],["m16x4"]]],[11,"gt","","Lane-wise greater-than comparison.",25,[[["self"],["self"]],["m16x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",25,[[["self"],["self"]],["m16x4"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",25,[[["self"]],["lexicographicallyordered",["u16x4"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",25,[[["self"]],["lexicographicallyordered",["u16x4"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",26,[[["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",26,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",26,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",26,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",26,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",26,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",26,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",26,[[["self"]],["self"]]],[11,"bitxor","","",26,[[["self"],["self"]],["self"]]],[11,"bitand","","",26,[[["self"],["self"]],["self"]]],[11,"bitor","","",26,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",26,[[["self"],["self"]]]],[11,"bitor_assign","","",26,[[["self"],["self"]]]],[11,"bitxor_assign","","",26,[[["self"],["self"]]]],[11,"bitxor","","",26,[[["self"],["bool"]],["self"]]],[11,"bitand","","",26,[[["self"],["bool"]],["self"]]],[11,"bitor","","",26,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",26,[[["self"],["bool"]]]],[11,"bitor_assign","","",26,[[["self"],["bool"]]]],[11,"bitxor_assign","","",26,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",26,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",26,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",26,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",26,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",26,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",26,[[["self"]],["bool"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"from","","",26,N],[11,"from","","",26,[[["m8x4"]],["self"]]],[11,"from","","",26,[[["m32x4"]],["self"]]],[11,"from","","",26,[[["m64x4"]],["self"]]],[11,"default","","",26,[[],["self"]]],[11,"eq","","",26,[[["self"],["self"]],["bool"]]],[11,"ne","","",26,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",26,[[["self"],["self"]],["m16x4"]]],[11,"ne","","Lane-wise inequality comparison.",26,[[["self"],["self"]],["m16x4"]]],[11,"lt","","Lane-wise less-than comparison.",26,[[["self"],["self"]],["m16x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",26,[[["self"],["self"]],["m16x4"]]],[11,"gt","","Lane-wise greater-than comparison.",26,[[["self"],["self"]],["m16x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",26,[[["self"],["self"]],["m16x4"]]],[11,"select","","Selects elements of `a` and `b` using mask.",26,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",26,[[["self"]],["lexicographicallyordered",["m16x4"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",26,[[["self"]],["lexicographicallyordered",["m16x4"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",27,[[["i32"],["i32"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",27,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",27,[[["i32"]],["self"]]],[11,"extract","","Extracts the value at `index`.",27,[[["self"],["usize"]],["i32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",27,[[["self"],["usize"]],["i32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",27,[[["self"],["usize"],["i32"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",27,[[["self"],["usize"],["i32"]],["self"]]],[11,"add","","",27,[[["self"],["self"]],["self"]]],[11,"sub","","",27,[[["self"],["self"]],["self"]]],[11,"mul","","",27,[[["self"],["self"]],["self"]]],[11,"div","","",27,[[["self"],["self"]],["self"]]],[11,"rem","","",27,[[["self"],["self"]],["self"]]],[11,"add_assign","","",27,[[["self"],["self"]]]],[11,"sub_assign","","",27,[[["self"],["self"]]]],[11,"mul_assign","","",27,[[["self"],["self"]]]],[11,"div_assign","","",27,[[["self"],["self"]]]],[11,"rem_assign","","",27,[[["self"],["self"]]]],[11,"add","","",27,[[["self"],["i32"]],["self"]]],[11,"sub","","",27,[[["self"],["i32"]],["self"]]],[11,"mul","","",27,[[["self"],["i32"]],["self"]]],[11,"div","","",27,[[["self"],["i32"]],["self"]]],[11,"rem","","",27,[[["self"],["i32"]],["self"]]],[11,"add_assign","","",27,[[["self"],["i32"]]]],[11,"sub_assign","","",27,[[["self"],["i32"]]]],[11,"mul_assign","","",27,[[["self"],["i32"]]]],[11,"div_assign","","",27,[[["self"],["i32"]]]],[11,"rem_assign","","",27,[[["self"],["i32"]]]],[11,"not","","",27,[[["self"]],["self"]]],[11,"bitxor","","",27,[[["self"],["self"]],["self"]]],[11,"bitand","","",27,[[["self"],["self"]],["self"]]],[11,"bitor","","",27,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",27,[[["self"],["self"]]]],[11,"bitor_assign","","",27,[[["self"],["self"]]]],[11,"bitxor_assign","","",27,[[["self"],["self"]]]],[11,"bitxor","","",27,[[["self"],["i32"]],["self"]]],[11,"bitand","","",27,[[["self"],["i32"]],["self"]]],[11,"bitor","","",27,[[["self"],["i32"]],["self"]]],[11,"bitand_assign","","",27,[[["self"],["i32"]]]],[11,"bitor_assign","","",27,[[["self"],["i32"]]]],[11,"bitxor_assign","","",27,[[["self"],["i32"]]]],[11,"shl","","",27,[[["self"],["self"]],["self"]]],[11,"shr","","",27,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",27,[[["self"],["self"]]]],[11,"shr_assign","","",27,[[["self"],["self"]]]],[11,"shl","","",27,[[["self"],["u32"]],["self"]]],[11,"shr","","",27,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",27,[[["self"],["u32"]]]],[11,"shr_assign","","",27,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",27,[[["self"],["i32x2"]],["i32x2"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",27,[[["self"],["i32x2"]],["i32x2"]]],[11,"neg","","",27,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",27,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",27,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",27,[[["self"]],["i32"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",27,[[["self"]],["i32"]]],[11,"sum","","",27,[[["i"]],["i32x2"]]],[11,"product","","",27,[[["i"]],["i32x2"]]],[11,"sum","","",27,[[["i"]],["i32x2"]]],[11,"product","","",27,[[["i"]],["i32x2"]]],[11,"max_element","","Largest vector element value.",27,[[["self"]],["i32"]]],[11,"min_element","","Smallest vector element value.",27,[[["self"]],["i32"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",27,[[["self"]],["i32"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",27,[[["self"]],["i32"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",27,[[["self"]],["i32"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"from","","",27,N],[11,"from","","",27,[[["i8x2"]],["self"]]],[11,"from","","",27,[[["u8x2"]],["self"]]],[11,"from","","",27,[[["i16x2"]],["self"]]],[11,"from","","",27,[[["u16x2"]],["self"]]],[11,"default","","",27,[[],["self"]]],[11,"hash","","",27,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",27,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",27,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",27,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",27,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",27,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",27,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",27,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",27,N],[11,"swap_bytes","","Reverses the byte order of the vector.",27,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",27,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",27,[[["self"]],["self"]]],[11,"eq","","",27,[[["self"],["self"]],["bool"]]],[11,"ne","","",27,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",27,[[["self"],["self"]],["m32x2"]]],[11,"ne","","Lane-wise inequality comparison.",27,[[["self"],["self"]],["m32x2"]]],[11,"lt","","Lane-wise less-than comparison.",27,[[["self"],["self"]],["m32x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",27,[[["self"],["self"]],["m32x2"]]],[11,"gt","","Lane-wise greater-than comparison.",27,[[["self"],["self"]],["m32x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",27,[[["self"],["self"]],["m32x2"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",27,[[["self"]],["lexicographicallyordered",["i32x2"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",27,[[["self"]],["lexicographicallyordered",["i32x2"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",28,[[["u32"],["u32"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",28,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",28,[[["u32"]],["self"]]],[11,"extract","","Extracts the value at `index`.",28,[[["self"],["usize"]],["u32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",28,[[["self"],["usize"]],["u32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",28,[[["self"],["usize"],["u32"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",28,[[["self"],["usize"],["u32"]],["self"]]],[11,"add","","",28,[[["self"],["self"]],["self"]]],[11,"sub","","",28,[[["self"],["self"]],["self"]]],[11,"mul","","",28,[[["self"],["self"]],["self"]]],[11,"div","","",28,[[["self"],["self"]],["self"]]],[11,"rem","","",28,[[["self"],["self"]],["self"]]],[11,"add_assign","","",28,[[["self"],["self"]]]],[11,"sub_assign","","",28,[[["self"],["self"]]]],[11,"mul_assign","","",28,[[["self"],["self"]]]],[11,"div_assign","","",28,[[["self"],["self"]]]],[11,"rem_assign","","",28,[[["self"],["self"]]]],[11,"add","","",28,[[["self"],["u32"]],["self"]]],[11,"sub","","",28,[[["self"],["u32"]],["self"]]],[11,"mul","","",28,[[["self"],["u32"]],["self"]]],[11,"div","","",28,[[["self"],["u32"]],["self"]]],[11,"rem","","",28,[[["self"],["u32"]],["self"]]],[11,"add_assign","","",28,[[["self"],["u32"]]]],[11,"sub_assign","","",28,[[["self"],["u32"]]]],[11,"mul_assign","","",28,[[["self"],["u32"]]]],[11,"div_assign","","",28,[[["self"],["u32"]]]],[11,"rem_assign","","",28,[[["self"],["u32"]]]],[11,"not","","",28,[[["self"]],["self"]]],[11,"bitxor","","",28,[[["self"],["self"]],["self"]]],[11,"bitand","","",28,[[["self"],["self"]],["self"]]],[11,"bitor","","",28,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",28,[[["self"],["self"]]]],[11,"bitor_assign","","",28,[[["self"],["self"]]]],[11,"bitxor_assign","","",28,[[["self"],["self"]]]],[11,"bitxor","","",28,[[["self"],["u32"]],["self"]]],[11,"bitand","","",28,[[["self"],["u32"]],["self"]]],[11,"bitor","","",28,[[["self"],["u32"]],["self"]]],[11,"bitand_assign","","",28,[[["self"],["u32"]]]],[11,"bitor_assign","","",28,[[["self"],["u32"]]]],[11,"bitxor_assign","","",28,[[["self"],["u32"]]]],[11,"shl","","",28,[[["self"],["self"]],["self"]]],[11,"shr","","",28,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",28,[[["self"],["self"]]]],[11,"shr_assign","","",28,[[["self"],["self"]]]],[11,"shl","","",28,[[["self"],["u32"]],["self"]]],[11,"shr","","",28,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",28,[[["self"],["u32"]]]],[11,"shr_assign","","",28,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",28,[[["self"],["u32x2"]],["u32x2"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",28,[[["self"],["u32x2"]],["u32x2"]]],[11,"min","","Minimum of two vectors.",28,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",28,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",28,[[["self"]],["u32"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",28,[[["self"]],["u32"]]],[11,"sum","","",28,[[["i"]],["u32x2"]]],[11,"product","","",28,[[["i"]],["u32x2"]]],[11,"sum","","",28,[[["i"]],["u32x2"]]],[11,"product","","",28,[[["i"]],["u32x2"]]],[11,"max_element","","Largest vector element value.",28,[[["self"]],["u32"]]],[11,"min_element","","Smallest vector element value.",28,[[["self"]],["u32"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",28,[[["self"]],["u32"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",28,[[["self"]],["u32"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",28,[[["self"]],["u32"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"from","","",28,N],[11,"from","","",28,[[["u8x2"]],["self"]]],[11,"from","","",28,[[["u16x2"]],["self"]]],[11,"default","","",28,[[],["self"]]],[11,"hash","","",28,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",28,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",28,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",28,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",28,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",28,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",28,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",28,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",28,N],[11,"swap_bytes","","Reverses the byte order of the vector.",28,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",28,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",28,[[["self"]],["self"]]],[11,"shuffle1_dyn","","Shuffle vector elements according to `indices`.",28,[[["self"],["self"]],["self"]]],[11,"eq","","",28,[[["self"],["self"]],["bool"]]],[11,"ne","","",28,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",28,[[["self"],["self"]],["m32x2"]]],[11,"ne","","Lane-wise inequality comparison.",28,[[["self"],["self"]],["m32x2"]]],[11,"lt","","Lane-wise less-than comparison.",28,[[["self"],["self"]],["m32x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",28,[[["self"],["self"]],["m32x2"]]],[11,"gt","","Lane-wise greater-than comparison.",28,[[["self"],["self"]],["m32x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",28,[[["self"],["self"]],["m32x2"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",28,[[["self"]],["lexicographicallyordered",["u32x2"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",28,[[["self"]],["lexicographicallyordered",["u32x2"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",30,[[["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",30,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",30,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",30,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",30,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",30,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",30,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",30,[[["self"]],["self"]]],[11,"bitxor","","",30,[[["self"],["self"]],["self"]]],[11,"bitand","","",30,[[["self"],["self"]],["self"]]],[11,"bitor","","",30,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",30,[[["self"],["self"]]]],[11,"bitor_assign","","",30,[[["self"],["self"]]]],[11,"bitxor_assign","","",30,[[["self"],["self"]]]],[11,"bitxor","","",30,[[["self"],["bool"]],["self"]]],[11,"bitand","","",30,[[["self"],["bool"]],["self"]]],[11,"bitor","","",30,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",30,[[["self"],["bool"]]]],[11,"bitor_assign","","",30,[[["self"],["bool"]]]],[11,"bitxor_assign","","",30,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",30,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",30,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",30,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",30,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",30,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",30,[[["self"]],["bool"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"from","","",30,N],[11,"from","","",30,[[["m8x2"]],["self"]]],[11,"from","","",30,[[["m16x2"]],["self"]]],[11,"from","","",30,[[["m64x2"]],["self"]]],[11,"from","","",30,[[["m128x2"]],["self"]]],[11,"default","","",30,[[],["self"]]],[11,"eq","","",30,[[["self"],["self"]],["bool"]]],[11,"ne","","",30,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",30,[[["self"],["self"]],["m32x2"]]],[11,"ne","","Lane-wise inequality comparison.",30,[[["self"],["self"]],["m32x2"]]],[11,"lt","","Lane-wise less-than comparison.",30,[[["self"],["self"]],["m32x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",30,[[["self"],["self"]],["m32x2"]]],[11,"gt","","Lane-wise greater-than comparison.",30,[[["self"],["self"]],["m32x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",30,[[["self"],["self"]],["m32x2"]]],[11,"select","","Selects elements of `a` and `b` using mask.",30,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",30,[[["self"]],["lexicographicallyordered",["m32x2"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",30,[[["self"]],["lexicographicallyordered",["m32x2"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",29,[[["f32"],["f32"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",29,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",29,[[["f32"]],["self"]]],[11,"extract","","Extracts the value at `index`.",29,[[["self"],["usize"]],["f32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",29,[[["self"],["usize"]],["f32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",29,[[["self"],["usize"],["f32"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",29,[[["self"],["usize"],["f32"]],["self"]]],[11,"add","","",29,[[["self"],["self"]],["self"]]],[11,"sub","","",29,[[["self"],["self"]],["self"]]],[11,"mul","","",29,[[["self"],["self"]],["self"]]],[11,"div","","",29,[[["self"],["self"]],["self"]]],[11,"rem","","",29,[[["self"],["self"]],["self"]]],[11,"add_assign","","",29,[[["self"],["self"]]]],[11,"sub_assign","","",29,[[["self"],["self"]]]],[11,"mul_assign","","",29,[[["self"],["self"]]]],[11,"div_assign","","",29,[[["self"],["self"]]]],[11,"rem_assign","","",29,[[["self"],["self"]]]],[11,"add","","",29,[[["self"],["f32"]],["self"]]],[11,"sub","","",29,[[["self"],["f32"]],["self"]]],[11,"mul","","",29,[[["self"],["f32"]],["self"]]],[11,"div","","",29,[[["self"],["f32"]],["self"]]],[11,"rem","","",29,[[["self"],["f32"]],["self"]]],[11,"add_assign","","",29,[[["self"],["f32"]]]],[11,"sub_assign","","",29,[[["self"],["f32"]]]],[11,"mul_assign","","",29,[[["self"],["f32"]]]],[11,"div_assign","","",29,[[["self"],["f32"]]]],[11,"rem_assign","","",29,[[["self"],["f32"]]]],[11,"neg","","",29,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",29,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",29,[[["self"],["self"]],["self"]]],[11,"sum","","Horizontal sum of the vector elements.",29,[[["self"]],["f32"]]],[11,"product","","Horizontal product of the vector elements.",29,[[["self"]],["f32"]]],[11,"sum","","",29,[[["i"]],["f32x2"]]],[11,"product","","",29,[[["i"]],["f32x2"]]],[11,"sum","","",29,[[["i"]],["f32x2"]]],[11,"product","","",29,[[["i"]],["f32x2"]]],[11,"max_element","","Largest vector element value.",29,[[["self"]],["f32"]]],[11,"min_element","","Smallest vector element value.",29,[[["self"]],["f32"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"from","","",29,N],[11,"from","","",29,[[["i8x2"]],["self"]]],[11,"from","","",29,[[["u8x2"]],["self"]]],[11,"from","","",29,[[["i16x2"]],["self"]]],[11,"from","","",29,[[["u16x2"]],["self"]]],[11,"default","","",29,[[],["self"]]],[11,"eq","","",29,[[["self"],["self"]],["bool"]]],[11,"ne","","",29,[[["self"],["self"]],["bool"]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",29,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",29,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",29,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",29,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",29,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",29,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",29,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",29,N],[11,"abs","","Absolute value.",29,[[["self"]],["self"]]],[11,"cos","","Cosine.",29,[[["self"]],["self"]]],[11,"cos_pi","","Cosine of `self * PI`.",29,[[["self"]],["self"]]],[11,"exp","","Returns the exponential function of `self`: `e^(self)`.",29,[[["self"]],["self"]]],[11,"ln","","Returns the natural logarithm of `self`.",29,[[["self"]],["self"]]],[11,"mul_add","","Fused multiply add: `self * y + z`",29,[[["self"],["self"],["self"]],["self"]]],[11,"mul_adde","","Fused multiply add estimate: ~= `self * y + z`",29,[[["self"],["self"],["self"]],["self"]]],[11,"powf","","Raises `self` number to the floating point power of `x`.",29,[[["self"],["self"]],["self"]]],[11,"recpre","","Reciprocal estimate: `~= 1. / self`.",29,[[["self"]],["self"]]],[11,"rsqrte","","Reciprocal square-root estimate: `~= 1. / self.sqrt()`.",29,[[["self"]],["self"]]],[11,"sin","","Sine.",29,[[["self"]],["self"]]],[11,"sin_pi","","Sine of `self * PI`.",29,[[["self"]],["self"]]],[11,"sin_cos_pi","","Sine and cosine of `self * PI`.",29,N],[11,"sqrt","","",29,[[["self"]],["self"]]],[11,"sqrte","","Square-root estimate.",29,[[["self"]],["self"]]],[11,"eq","","Lane-wise equality comparison.",29,[[["self"],["self"]],["m32x2"]]],[11,"ne","","Lane-wise inequality comparison.",29,[[["self"],["self"]],["m32x2"]]],[11,"lt","","Lane-wise less-than comparison.",29,[[["self"],["self"]],["m32x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",29,[[["self"],["self"]],["m32x2"]]],[11,"gt","","Lane-wise greater-than comparison.",29,[[["self"],["self"]],["m32x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",29,[[["self"],["self"]],["m32x2"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",31,[[["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",31,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",31,[[["i8"]],["self"]]],[11,"extract","","Extracts the value at `index`.",31,[[["self"],["usize"]],["i8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",31,[[["self"],["usize"]],["i8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",31,[[["self"],["usize"],["i8"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",31,[[["self"],["usize"],["i8"]],["self"]]],[11,"add","","",31,[[["self"],["self"]],["self"]]],[11,"sub","","",31,[[["self"],["self"]],["self"]]],[11,"mul","","",31,[[["self"],["self"]],["self"]]],[11,"div","","",31,[[["self"],["self"]],["self"]]],[11,"rem","","",31,[[["self"],["self"]],["self"]]],[11,"add_assign","","",31,[[["self"],["self"]]]],[11,"sub_assign","","",31,[[["self"],["self"]]]],[11,"mul_assign","","",31,[[["self"],["self"]]]],[11,"div_assign","","",31,[[["self"],["self"]]]],[11,"rem_assign","","",31,[[["self"],["self"]]]],[11,"add","","",31,[[["self"],["i8"]],["self"]]],[11,"sub","","",31,[[["self"],["i8"]],["self"]]],[11,"mul","","",31,[[["self"],["i8"]],["self"]]],[11,"div","","",31,[[["self"],["i8"]],["self"]]],[11,"rem","","",31,[[["self"],["i8"]],["self"]]],[11,"add_assign","","",31,[[["self"],["i8"]]]],[11,"sub_assign","","",31,[[["self"],["i8"]]]],[11,"mul_assign","","",31,[[["self"],["i8"]]]],[11,"div_assign","","",31,[[["self"],["i8"]]]],[11,"rem_assign","","",31,[[["self"],["i8"]]]],[11,"not","","",31,[[["self"]],["self"]]],[11,"bitxor","","",31,[[["self"],["self"]],["self"]]],[11,"bitand","","",31,[[["self"],["self"]],["self"]]],[11,"bitor","","",31,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",31,[[["self"],["self"]]]],[11,"bitor_assign","","",31,[[["self"],["self"]]]],[11,"bitxor_assign","","",31,[[["self"],["self"]]]],[11,"bitxor","","",31,[[["self"],["i8"]],["self"]]],[11,"bitand","","",31,[[["self"],["i8"]],["self"]]],[11,"bitor","","",31,[[["self"],["i8"]],["self"]]],[11,"bitand_assign","","",31,[[["self"],["i8"]]]],[11,"bitor_assign","","",31,[[["self"],["i8"]]]],[11,"bitxor_assign","","",31,[[["self"],["i8"]]]],[11,"shl","","",31,[[["self"],["self"]],["self"]]],[11,"shr","","",31,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",31,[[["self"],["self"]]]],[11,"shr_assign","","",31,[[["self"],["self"]]]],[11,"shl","","",31,[[["self"],["u32"]],["self"]]],[11,"shr","","",31,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",31,[[["self"],["u32"]]]],[11,"shr_assign","","",31,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",31,[[["self"],["i8x16"]],["i8x16"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",31,[[["self"],["i8x16"]],["i8x16"]]],[11,"neg","","",31,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",31,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",31,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",31,[[["self"]],["i8"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",31,[[["self"]],["i8"]]],[11,"sum","","",31,[[["i"]],["i8x16"]]],[11,"product","","",31,[[["i"]],["i8x16"]]],[11,"sum","","",31,[[["i"]],["i8x16"]]],[11,"product","","",31,[[["i"]],["i8x16"]]],[11,"max_element","","Largest vector element value.",31,[[["self"]],["i8"]]],[11,"min_element","","Smallest vector element value.",31,[[["self"]],["i8"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",31,[[["self"]],["i8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",31,[[["self"]],["i8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",31,[[["self"]],["i8"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"from","","",31,N],[11,"default","","",31,[[],["self"]]],[11,"hash","","",31,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",31,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",31,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",31,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",31,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",31,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",31,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",31,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",31,N],[11,"swap_bytes","","Reverses the byte order of the vector.",31,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",31,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",31,[[["self"]],["self"]]],[11,"eq","","",31,[[["self"],["self"]],["bool"]]],[11,"ne","","",31,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",31,[[["self"],["self"]],["m8x16"]]],[11,"ne","","Lane-wise inequality comparison.",31,[[["self"],["self"]],["m8x16"]]],[11,"lt","","Lane-wise less-than comparison.",31,[[["self"],["self"]],["m8x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",31,[[["self"],["self"]],["m8x16"]]],[11,"gt","","Lane-wise greater-than comparison.",31,[[["self"],["self"]],["m8x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",31,[[["self"],["self"]],["m8x16"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",31,[[["self"]],["lexicographicallyordered",["i8x16"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",31,[[["self"]],["lexicographicallyordered",["i8x16"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",32,[[["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",32,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",32,[[["u8"]],["self"]]],[11,"extract","","Extracts the value at `index`.",32,[[["self"],["usize"]],["u8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",32,[[["self"],["usize"]],["u8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",32,[[["self"],["usize"],["u8"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",32,[[["self"],["usize"],["u8"]],["self"]]],[11,"add","","",32,[[["self"],["self"]],["self"]]],[11,"sub","","",32,[[["self"],["self"]],["self"]]],[11,"mul","","",32,[[["self"],["self"]],["self"]]],[11,"div","","",32,[[["self"],["self"]],["self"]]],[11,"rem","","",32,[[["self"],["self"]],["self"]]],[11,"add_assign","","",32,[[["self"],["self"]]]],[11,"sub_assign","","",32,[[["self"],["self"]]]],[11,"mul_assign","","",32,[[["self"],["self"]]]],[11,"div_assign","","",32,[[["self"],["self"]]]],[11,"rem_assign","","",32,[[["self"],["self"]]]],[11,"add","","",32,[[["self"],["u8"]],["self"]]],[11,"sub","","",32,[[["self"],["u8"]],["self"]]],[11,"mul","","",32,[[["self"],["u8"]],["self"]]],[11,"div","","",32,[[["self"],["u8"]],["self"]]],[11,"rem","","",32,[[["self"],["u8"]],["self"]]],[11,"add_assign","","",32,[[["self"],["u8"]]]],[11,"sub_assign","","",32,[[["self"],["u8"]]]],[11,"mul_assign","","",32,[[["self"],["u8"]]]],[11,"div_assign","","",32,[[["self"],["u8"]]]],[11,"rem_assign","","",32,[[["self"],["u8"]]]],[11,"not","","",32,[[["self"]],["self"]]],[11,"bitxor","","",32,[[["self"],["self"]],["self"]]],[11,"bitand","","",32,[[["self"],["self"]],["self"]]],[11,"bitor","","",32,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",32,[[["self"],["self"]]]],[11,"bitor_assign","","",32,[[["self"],["self"]]]],[11,"bitxor_assign","","",32,[[["self"],["self"]]]],[11,"bitxor","","",32,[[["self"],["u8"]],["self"]]],[11,"bitand","","",32,[[["self"],["u8"]],["self"]]],[11,"bitor","","",32,[[["self"],["u8"]],["self"]]],[11,"bitand_assign","","",32,[[["self"],["u8"]]]],[11,"bitor_assign","","",32,[[["self"],["u8"]]]],[11,"bitxor_assign","","",32,[[["self"],["u8"]]]],[11,"shl","","",32,[[["self"],["self"]],["self"]]],[11,"shr","","",32,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",32,[[["self"],["self"]]]],[11,"shr_assign","","",32,[[["self"],["self"]]]],[11,"shl","","",32,[[["self"],["u32"]],["self"]]],[11,"shr","","",32,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",32,[[["self"],["u32"]]]],[11,"shr_assign","","",32,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",32,[[["self"],["u8x16"]],["u8x16"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",32,[[["self"],["u8x16"]],["u8x16"]]],[11,"min","","Minimum of two vectors.",32,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",32,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",32,[[["self"]],["u8"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",32,[[["self"]],["u8"]]],[11,"sum","","",32,[[["i"]],["u8x16"]]],[11,"product","","",32,[[["i"]],["u8x16"]]],[11,"sum","","",32,[[["i"]],["u8x16"]]],[11,"product","","",32,[[["i"]],["u8x16"]]],[11,"max_element","","Largest vector element value.",32,[[["self"]],["u8"]]],[11,"min_element","","Smallest vector element value.",32,[[["self"]],["u8"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",32,[[["self"]],["u8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",32,[[["self"]],["u8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",32,[[["self"]],["u8"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"from","","",32,N],[11,"default","","",32,[[],["self"]]],[11,"hash","","",32,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",32,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",32,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",32,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",32,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",32,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",32,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",32,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",32,N],[11,"swap_bytes","","Reverses the byte order of the vector.",32,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",32,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",32,[[["self"]],["self"]]],[11,"shuffle1_dyn","","Shuffle vector elements according to `indices`.",32,[[["self"],["self"]],["self"]]],[11,"eq","","",32,[[["self"],["self"]],["bool"]]],[11,"ne","","",32,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",32,[[["self"],["self"]],["m8x16"]]],[11,"ne","","Lane-wise inequality comparison.",32,[[["self"],["self"]],["m8x16"]]],[11,"lt","","Lane-wise less-than comparison.",32,[[["self"],["self"]],["m8x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",32,[[["self"],["self"]],["m8x16"]]],[11,"gt","","Lane-wise greater-than comparison.",32,[[["self"],["self"]],["m8x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",32,[[["self"],["self"]],["m8x16"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",32,[[["self"]],["lexicographicallyordered",["u8x16"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",32,[[["self"]],["lexicographicallyordered",["u8x16"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",33,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",33,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",33,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",33,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",33,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",33,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",33,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",33,[[["self"]],["self"]]],[11,"bitxor","","",33,[[["self"],["self"]],["self"]]],[11,"bitand","","",33,[[["self"],["self"]],["self"]]],[11,"bitor","","",33,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",33,[[["self"],["self"]]]],[11,"bitor_assign","","",33,[[["self"],["self"]]]],[11,"bitxor_assign","","",33,[[["self"],["self"]]]],[11,"bitxor","","",33,[[["self"],["bool"]],["self"]]],[11,"bitand","","",33,[[["self"],["bool"]],["self"]]],[11,"bitor","","",33,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",33,[[["self"],["bool"]]]],[11,"bitor_assign","","",33,[[["self"],["bool"]]]],[11,"bitxor_assign","","",33,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",33,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",33,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",33,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",33,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",33,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",33,[[["self"]],["bool"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"from","","",33,N],[11,"from","","",33,[[["m16x16"]],["self"]]],[11,"default","","",33,[[],["self"]]],[11,"eq","","",33,[[["self"],["self"]],["bool"]]],[11,"ne","","",33,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",33,[[["self"],["self"]],["m8x16"]]],[11,"ne","","Lane-wise inequality comparison.",33,[[["self"],["self"]],["m8x16"]]],[11,"lt","","Lane-wise less-than comparison.",33,[[["self"],["self"]],["m8x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",33,[[["self"],["self"]],["m8x16"]]],[11,"gt","","Lane-wise greater-than comparison.",33,[[["self"],["self"]],["m8x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",33,[[["self"],["self"]],["m8x16"]]],[11,"select","","Selects elements of `a` and `b` using mask.",33,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",33,[[["self"]],["lexicographicallyordered",["m8x16"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",33,[[["self"]],["lexicographicallyordered",["m8x16"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",34,[[["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",34,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",34,[[["i16"]],["self"]]],[11,"extract","","Extracts the value at `index`.",34,[[["self"],["usize"]],["i16"]]],[11,"extract_unchecked","","Extracts the value at `index`.",34,[[["self"],["usize"]],["i16"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",34,[[["self"],["usize"],["i16"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",34,[[["self"],["usize"],["i16"]],["self"]]],[11,"add","","",34,[[["self"],["self"]],["self"]]],[11,"sub","","",34,[[["self"],["self"]],["self"]]],[11,"mul","","",34,[[["self"],["self"]],["self"]]],[11,"div","","",34,[[["self"],["self"]],["self"]]],[11,"rem","","",34,[[["self"],["self"]],["self"]]],[11,"add_assign","","",34,[[["self"],["self"]]]],[11,"sub_assign","","",34,[[["self"],["self"]]]],[11,"mul_assign","","",34,[[["self"],["self"]]]],[11,"div_assign","","",34,[[["self"],["self"]]]],[11,"rem_assign","","",34,[[["self"],["self"]]]],[11,"add","","",34,[[["self"],["i16"]],["self"]]],[11,"sub","","",34,[[["self"],["i16"]],["self"]]],[11,"mul","","",34,[[["self"],["i16"]],["self"]]],[11,"div","","",34,[[["self"],["i16"]],["self"]]],[11,"rem","","",34,[[["self"],["i16"]],["self"]]],[11,"add_assign","","",34,[[["self"],["i16"]]]],[11,"sub_assign","","",34,[[["self"],["i16"]]]],[11,"mul_assign","","",34,[[["self"],["i16"]]]],[11,"div_assign","","",34,[[["self"],["i16"]]]],[11,"rem_assign","","",34,[[["self"],["i16"]]]],[11,"not","","",34,[[["self"]],["self"]]],[11,"bitxor","","",34,[[["self"],["self"]],["self"]]],[11,"bitand","","",34,[[["self"],["self"]],["self"]]],[11,"bitor","","",34,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",34,[[["self"],["self"]]]],[11,"bitor_assign","","",34,[[["self"],["self"]]]],[11,"bitxor_assign","","",34,[[["self"],["self"]]]],[11,"bitxor","","",34,[[["self"],["i16"]],["self"]]],[11,"bitand","","",34,[[["self"],["i16"]],["self"]]],[11,"bitor","","",34,[[["self"],["i16"]],["self"]]],[11,"bitand_assign","","",34,[[["self"],["i16"]]]],[11,"bitor_assign","","",34,[[["self"],["i16"]]]],[11,"bitxor_assign","","",34,[[["self"],["i16"]]]],[11,"shl","","",34,[[["self"],["self"]],["self"]]],[11,"shr","","",34,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",34,[[["self"],["self"]]]],[11,"shr_assign","","",34,[[["self"],["self"]]]],[11,"shl","","",34,[[["self"],["u32"]],["self"]]],[11,"shr","","",34,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",34,[[["self"],["u32"]]]],[11,"shr_assign","","",34,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",34,[[["self"],["i16x8"]],["i16x8"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",34,[[["self"],["i16x8"]],["i16x8"]]],[11,"neg","","",34,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",34,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",34,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",34,[[["self"]],["i16"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",34,[[["self"]],["i16"]]],[11,"sum","","",34,[[["i"]],["i16x8"]]],[11,"product","","",34,[[["i"]],["i16x8"]]],[11,"sum","","",34,[[["i"]],["i16x8"]]],[11,"product","","",34,[[["i"]],["i16x8"]]],[11,"max_element","","Largest vector element value.",34,[[["self"]],["i16"]]],[11,"min_element","","Smallest vector element value.",34,[[["self"]],["i16"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",34,[[["self"]],["i16"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",34,[[["self"]],["i16"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",34,[[["self"]],["i16"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"from","","",34,N],[11,"from","","",34,[[["i8x8"]],["self"]]],[11,"from","","",34,[[["u8x8"]],["self"]]],[11,"default","","",34,[[],["self"]]],[11,"hash","","",34,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",34,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",34,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",34,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",34,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",34,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",34,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",34,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",34,N],[11,"swap_bytes","","Reverses the byte order of the vector.",34,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",34,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",34,[[["self"]],["self"]]],[11,"eq","","",34,[[["self"],["self"]],["bool"]]],[11,"ne","","",34,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",34,[[["self"],["self"]],["m16x8"]]],[11,"ne","","Lane-wise inequality comparison.",34,[[["self"],["self"]],["m16x8"]]],[11,"lt","","Lane-wise less-than comparison.",34,[[["self"],["self"]],["m16x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",34,[[["self"],["self"]],["m16x8"]]],[11,"gt","","Lane-wise greater-than comparison.",34,[[["self"],["self"]],["m16x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",34,[[["self"],["self"]],["m16x8"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",34,[[["self"]],["lexicographicallyordered",["i16x8"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",34,[[["self"]],["lexicographicallyordered",["i16x8"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",35,[[["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",35,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",35,[[["u16"]],["self"]]],[11,"extract","","Extracts the value at `index`.",35,[[["self"],["usize"]],["u16"]]],[11,"extract_unchecked","","Extracts the value at `index`.",35,[[["self"],["usize"]],["u16"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",35,[[["self"],["usize"],["u16"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",35,[[["self"],["usize"],["u16"]],["self"]]],[11,"add","","",35,[[["self"],["self"]],["self"]]],[11,"sub","","",35,[[["self"],["self"]],["self"]]],[11,"mul","","",35,[[["self"],["self"]],["self"]]],[11,"div","","",35,[[["self"],["self"]],["self"]]],[11,"rem","","",35,[[["self"],["self"]],["self"]]],[11,"add_assign","","",35,[[["self"],["self"]]]],[11,"sub_assign","","",35,[[["self"],["self"]]]],[11,"mul_assign","","",35,[[["self"],["self"]]]],[11,"div_assign","","",35,[[["self"],["self"]]]],[11,"rem_assign","","",35,[[["self"],["self"]]]],[11,"add","","",35,[[["self"],["u16"]],["self"]]],[11,"sub","","",35,[[["self"],["u16"]],["self"]]],[11,"mul","","",35,[[["self"],["u16"]],["self"]]],[11,"div","","",35,[[["self"],["u16"]],["self"]]],[11,"rem","","",35,[[["self"],["u16"]],["self"]]],[11,"add_assign","","",35,[[["self"],["u16"]]]],[11,"sub_assign","","",35,[[["self"],["u16"]]]],[11,"mul_assign","","",35,[[["self"],["u16"]]]],[11,"div_assign","","",35,[[["self"],["u16"]]]],[11,"rem_assign","","",35,[[["self"],["u16"]]]],[11,"not","","",35,[[["self"]],["self"]]],[11,"bitxor","","",35,[[["self"],["self"]],["self"]]],[11,"bitand","","",35,[[["self"],["self"]],["self"]]],[11,"bitor","","",35,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",35,[[["self"],["self"]]]],[11,"bitor_assign","","",35,[[["self"],["self"]]]],[11,"bitxor_assign","","",35,[[["self"],["self"]]]],[11,"bitxor","","",35,[[["self"],["u16"]],["self"]]],[11,"bitand","","",35,[[["self"],["u16"]],["self"]]],[11,"bitor","","",35,[[["self"],["u16"]],["self"]]],[11,"bitand_assign","","",35,[[["self"],["u16"]]]],[11,"bitor_assign","","",35,[[["self"],["u16"]]]],[11,"bitxor_assign","","",35,[[["self"],["u16"]]]],[11,"shl","","",35,[[["self"],["self"]],["self"]]],[11,"shr","","",35,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",35,[[["self"],["self"]]]],[11,"shr_assign","","",35,[[["self"],["self"]]]],[11,"shl","","",35,[[["self"],["u32"]],["self"]]],[11,"shr","","",35,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",35,[[["self"],["u32"]]]],[11,"shr_assign","","",35,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",35,[[["self"],["u16x8"]],["u16x8"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",35,[[["self"],["u16x8"]],["u16x8"]]],[11,"min","","Minimum of two vectors.",35,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",35,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",35,[[["self"]],["u16"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",35,[[["self"]],["u16"]]],[11,"sum","","",35,[[["i"]],["u16x8"]]],[11,"product","","",35,[[["i"]],["u16x8"]]],[11,"sum","","",35,[[["i"]],["u16x8"]]],[11,"product","","",35,[[["i"]],["u16x8"]]],[11,"max_element","","Largest vector element value.",35,[[["self"]],["u16"]]],[11,"min_element","","Smallest vector element value.",35,[[["self"]],["u16"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",35,[[["self"]],["u16"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",35,[[["self"]],["u16"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",35,[[["self"]],["u16"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"from","","",35,N],[11,"from","","",35,[[["u8x8"]],["self"]]],[11,"default","","",35,[[],["self"]]],[11,"hash","","",35,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",35,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",35,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",35,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",35,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",35,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",35,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",35,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",35,N],[11,"swap_bytes","","Reverses the byte order of the vector.",35,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",35,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",35,[[["self"]],["self"]]],[11,"shuffle1_dyn","","Shuffle vector elements according to `indices`.",35,[[["self"],["self"]],["self"]]],[11,"eq","","",35,[[["self"],["self"]],["bool"]]],[11,"ne","","",35,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",35,[[["self"],["self"]],["m16x8"]]],[11,"ne","","Lane-wise inequality comparison.",35,[[["self"],["self"]],["m16x8"]]],[11,"lt","","Lane-wise less-than comparison.",35,[[["self"],["self"]],["m16x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",35,[[["self"],["self"]],["m16x8"]]],[11,"gt","","Lane-wise greater-than comparison.",35,[[["self"],["self"]],["m16x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",35,[[["self"],["self"]],["m16x8"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",35,[[["self"]],["lexicographicallyordered",["u16x8"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",35,[[["self"]],["lexicographicallyordered",["u16x8"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",36,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",36,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",36,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",36,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",36,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",36,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",36,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",36,[[["self"]],["self"]]],[11,"bitxor","","",36,[[["self"],["self"]],["self"]]],[11,"bitand","","",36,[[["self"],["self"]],["self"]]],[11,"bitor","","",36,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",36,[[["self"],["self"]]]],[11,"bitor_assign","","",36,[[["self"],["self"]]]],[11,"bitxor_assign","","",36,[[["self"],["self"]]]],[11,"bitxor","","",36,[[["self"],["bool"]],["self"]]],[11,"bitand","","",36,[[["self"],["bool"]],["self"]]],[11,"bitor","","",36,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",36,[[["self"],["bool"]]]],[11,"bitor_assign","","",36,[[["self"],["bool"]]]],[11,"bitxor_assign","","",36,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",36,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",36,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",36,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",36,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",36,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",36,[[["self"]],["bool"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"from","","",36,N],[11,"from","","",36,[[["m8x8"]],["self"]]],[11,"from","","",36,[[["m32x8"]],["self"]]],[11,"default","","",36,[[],["self"]]],[11,"eq","","",36,[[["self"],["self"]],["bool"]]],[11,"ne","","",36,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",36,[[["self"],["self"]],["m16x8"]]],[11,"ne","","Lane-wise inequality comparison.",36,[[["self"],["self"]],["m16x8"]]],[11,"lt","","Lane-wise less-than comparison.",36,[[["self"],["self"]],["m16x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",36,[[["self"],["self"]],["m16x8"]]],[11,"gt","","Lane-wise greater-than comparison.",36,[[["self"],["self"]],["m16x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",36,[[["self"],["self"]],["m16x8"]]],[11,"select","","Selects elements of `a` and `b` using mask.",36,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",36,[[["self"]],["lexicographicallyordered",["m16x8"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",36,[[["self"]],["lexicographicallyordered",["m16x8"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",37,[[["i32"],["i32"],["i32"],["i32"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",37,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",37,[[["i32"]],["self"]]],[11,"extract","","Extracts the value at `index`.",37,[[["self"],["usize"]],["i32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",37,[[["self"],["usize"]],["i32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",37,[[["self"],["usize"],["i32"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",37,[[["self"],["usize"],["i32"]],["self"]]],[11,"add","","",37,[[["self"],["self"]],["self"]]],[11,"sub","","",37,[[["self"],["self"]],["self"]]],[11,"mul","","",37,[[["self"],["self"]],["self"]]],[11,"div","","",37,[[["self"],["self"]],["self"]]],[11,"rem","","",37,[[["self"],["self"]],["self"]]],[11,"add_assign","","",37,[[["self"],["self"]]]],[11,"sub_assign","","",37,[[["self"],["self"]]]],[11,"mul_assign","","",37,[[["self"],["self"]]]],[11,"div_assign","","",37,[[["self"],["self"]]]],[11,"rem_assign","","",37,[[["self"],["self"]]]],[11,"add","","",37,[[["self"],["i32"]],["self"]]],[11,"sub","","",37,[[["self"],["i32"]],["self"]]],[11,"mul","","",37,[[["self"],["i32"]],["self"]]],[11,"div","","",37,[[["self"],["i32"]],["self"]]],[11,"rem","","",37,[[["self"],["i32"]],["self"]]],[11,"add_assign","","",37,[[["self"],["i32"]]]],[11,"sub_assign","","",37,[[["self"],["i32"]]]],[11,"mul_assign","","",37,[[["self"],["i32"]]]],[11,"div_assign","","",37,[[["self"],["i32"]]]],[11,"rem_assign","","",37,[[["self"],["i32"]]]],[11,"not","","",37,[[["self"]],["self"]]],[11,"bitxor","","",37,[[["self"],["self"]],["self"]]],[11,"bitand","","",37,[[["self"],["self"]],["self"]]],[11,"bitor","","",37,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",37,[[["self"],["self"]]]],[11,"bitor_assign","","",37,[[["self"],["self"]]]],[11,"bitxor_assign","","",37,[[["self"],["self"]]]],[11,"bitxor","","",37,[[["self"],["i32"]],["self"]]],[11,"bitand","","",37,[[["self"],["i32"]],["self"]]],[11,"bitor","","",37,[[["self"],["i32"]],["self"]]],[11,"bitand_assign","","",37,[[["self"],["i32"]]]],[11,"bitor_assign","","",37,[[["self"],["i32"]]]],[11,"bitxor_assign","","",37,[[["self"],["i32"]]]],[11,"shl","","",37,[[["self"],["self"]],["self"]]],[11,"shr","","",37,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",37,[[["self"],["self"]]]],[11,"shr_assign","","",37,[[["self"],["self"]]]],[11,"shl","","",37,[[["self"],["u32"]],["self"]]],[11,"shr","","",37,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",37,[[["self"],["u32"]]]],[11,"shr_assign","","",37,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",37,[[["self"],["i32x4"]],["i32x4"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",37,[[["self"],["i32x4"]],["i32x4"]]],[11,"neg","","",37,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",37,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",37,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",37,[[["self"]],["i32"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",37,[[["self"]],["i32"]]],[11,"sum","","",37,[[["i"]],["i32x4"]]],[11,"product","","",37,[[["i"]],["i32x4"]]],[11,"sum","","",37,[[["i"]],["i32x4"]]],[11,"product","","",37,[[["i"]],["i32x4"]]],[11,"max_element","","Largest vector element value.",37,[[["self"]],["i32"]]],[11,"min_element","","Smallest vector element value.",37,[[["self"]],["i32"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",37,[[["self"]],["i32"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",37,[[["self"]],["i32"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",37,[[["self"]],["i32"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"from","","",37,N],[11,"from","","",37,[[["i8x4"]],["self"]]],[11,"from","","",37,[[["u8x4"]],["self"]]],[11,"from","","",37,[[["i16x4"]],["self"]]],[11,"from","","",37,[[["u16x4"]],["self"]]],[11,"default","","",37,[[],["self"]]],[11,"hash","","",37,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",37,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",37,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",37,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",37,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",37,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",37,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",37,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",37,N],[11,"swap_bytes","","Reverses the byte order of the vector.",37,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",37,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",37,[[["self"]],["self"]]],[11,"eq","","",37,[[["self"],["self"]],["bool"]]],[11,"ne","","",37,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",37,[[["self"],["self"]],["m32x4"]]],[11,"ne","","Lane-wise inequality comparison.",37,[[["self"],["self"]],["m32x4"]]],[11,"lt","","Lane-wise less-than comparison.",37,[[["self"],["self"]],["m32x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",37,[[["self"],["self"]],["m32x4"]]],[11,"gt","","Lane-wise greater-than comparison.",37,[[["self"],["self"]],["m32x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",37,[[["self"],["self"]],["m32x4"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",37,[[["self"]],["lexicographicallyordered",["i32x4"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",37,[[["self"]],["lexicographicallyordered",["i32x4"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",38,[[["u32"],["u32"],["u32"],["u32"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",38,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",38,[[["u32"]],["self"]]],[11,"extract","","Extracts the value at `index`.",38,[[["self"],["usize"]],["u32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",38,[[["self"],["usize"]],["u32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",38,[[["self"],["usize"],["u32"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",38,[[["self"],["usize"],["u32"]],["self"]]],[11,"add","","",38,[[["self"],["self"]],["self"]]],[11,"sub","","",38,[[["self"],["self"]],["self"]]],[11,"mul","","",38,[[["self"],["self"]],["self"]]],[11,"div","","",38,[[["self"],["self"]],["self"]]],[11,"rem","","",38,[[["self"],["self"]],["self"]]],[11,"add_assign","","",38,[[["self"],["self"]]]],[11,"sub_assign","","",38,[[["self"],["self"]]]],[11,"mul_assign","","",38,[[["self"],["self"]]]],[11,"div_assign","","",38,[[["self"],["self"]]]],[11,"rem_assign","","",38,[[["self"],["self"]]]],[11,"add","","",38,[[["self"],["u32"]],["self"]]],[11,"sub","","",38,[[["self"],["u32"]],["self"]]],[11,"mul","","",38,[[["self"],["u32"]],["self"]]],[11,"div","","",38,[[["self"],["u32"]],["self"]]],[11,"rem","","",38,[[["self"],["u32"]],["self"]]],[11,"add_assign","","",38,[[["self"],["u32"]]]],[11,"sub_assign","","",38,[[["self"],["u32"]]]],[11,"mul_assign","","",38,[[["self"],["u32"]]]],[11,"div_assign","","",38,[[["self"],["u32"]]]],[11,"rem_assign","","",38,[[["self"],["u32"]]]],[11,"not","","",38,[[["self"]],["self"]]],[11,"bitxor","","",38,[[["self"],["self"]],["self"]]],[11,"bitand","","",38,[[["self"],["self"]],["self"]]],[11,"bitor","","",38,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",38,[[["self"],["self"]]]],[11,"bitor_assign","","",38,[[["self"],["self"]]]],[11,"bitxor_assign","","",38,[[["self"],["self"]]]],[11,"bitxor","","",38,[[["self"],["u32"]],["self"]]],[11,"bitand","","",38,[[["self"],["u32"]],["self"]]],[11,"bitor","","",38,[[["self"],["u32"]],["self"]]],[11,"bitand_assign","","",38,[[["self"],["u32"]]]],[11,"bitor_assign","","",38,[[["self"],["u32"]]]],[11,"bitxor_assign","","",38,[[["self"],["u32"]]]],[11,"shl","","",38,[[["self"],["self"]],["self"]]],[11,"shr","","",38,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",38,[[["self"],["self"]]]],[11,"shr_assign","","",38,[[["self"],["self"]]]],[11,"shl","","",38,[[["self"],["u32"]],["self"]]],[11,"shr","","",38,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",38,[[["self"],["u32"]]]],[11,"shr_assign","","",38,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",38,[[["self"],["u32x4"]],["u32x4"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",38,[[["self"],["u32x4"]],["u32x4"]]],[11,"min","","Minimum of two vectors.",38,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",38,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",38,[[["self"]],["u32"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",38,[[["self"]],["u32"]]],[11,"sum","","",38,[[["i"]],["u32x4"]]],[11,"product","","",38,[[["i"]],["u32x4"]]],[11,"sum","","",38,[[["i"]],["u32x4"]]],[11,"product","","",38,[[["i"]],["u32x4"]]],[11,"max_element","","Largest vector element value.",38,[[["self"]],["u32"]]],[11,"min_element","","Smallest vector element value.",38,[[["self"]],["u32"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",38,[[["self"]],["u32"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",38,[[["self"]],["u32"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",38,[[["self"]],["u32"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"from","","",38,N],[11,"from","","",38,[[["u8x4"]],["self"]]],[11,"from","","",38,[[["u16x4"]],["self"]]],[11,"default","","",38,[[],["self"]]],[11,"hash","","",38,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",38,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",38,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",38,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",38,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",38,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",38,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",38,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",38,N],[11,"swap_bytes","","Reverses the byte order of the vector.",38,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",38,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",38,[[["self"]],["self"]]],[11,"shuffle1_dyn","","Shuffle vector elements according to `indices`.",38,[[["self"],["self"]],["self"]]],[11,"eq","","",38,[[["self"],["self"]],["bool"]]],[11,"ne","","",38,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",38,[[["self"],["self"]],["m32x4"]]],[11,"ne","","Lane-wise inequality comparison.",38,[[["self"],["self"]],["m32x4"]]],[11,"lt","","Lane-wise less-than comparison.",38,[[["self"],["self"]],["m32x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",38,[[["self"],["self"]],["m32x4"]]],[11,"gt","","Lane-wise greater-than comparison.",38,[[["self"],["self"]],["m32x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",38,[[["self"],["self"]],["m32x4"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",38,[[["self"]],["lexicographicallyordered",["u32x4"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",38,[[["self"]],["lexicographicallyordered",["u32x4"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",39,[[["f32"],["f32"],["f32"],["f32"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",39,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",39,[[["f32"]],["self"]]],[11,"extract","","Extracts the value at `index`.",39,[[["self"],["usize"]],["f32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",39,[[["self"],["usize"]],["f32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",39,[[["self"],["usize"],["f32"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",39,[[["self"],["usize"],["f32"]],["self"]]],[11,"add","","",39,[[["self"],["self"]],["self"]]],[11,"sub","","",39,[[["self"],["self"]],["self"]]],[11,"mul","","",39,[[["self"],["self"]],["self"]]],[11,"div","","",39,[[["self"],["self"]],["self"]]],[11,"rem","","",39,[[["self"],["self"]],["self"]]],[11,"add_assign","","",39,[[["self"],["self"]]]],[11,"sub_assign","","",39,[[["self"],["self"]]]],[11,"mul_assign","","",39,[[["self"],["self"]]]],[11,"div_assign","","",39,[[["self"],["self"]]]],[11,"rem_assign","","",39,[[["self"],["self"]]]],[11,"add","","",39,[[["self"],["f32"]],["self"]]],[11,"sub","","",39,[[["self"],["f32"]],["self"]]],[11,"mul","","",39,[[["self"],["f32"]],["self"]]],[11,"div","","",39,[[["self"],["f32"]],["self"]]],[11,"rem","","",39,[[["self"],["f32"]],["self"]]],[11,"add_assign","","",39,[[["self"],["f32"]]]],[11,"sub_assign","","",39,[[["self"],["f32"]]]],[11,"mul_assign","","",39,[[["self"],["f32"]]]],[11,"div_assign","","",39,[[["self"],["f32"]]]],[11,"rem_assign","","",39,[[["self"],["f32"]]]],[11,"neg","","",39,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",39,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",39,[[["self"],["self"]],["self"]]],[11,"sum","","Horizontal sum of the vector elements.",39,[[["self"]],["f32"]]],[11,"product","","Horizontal product of the vector elements.",39,[[["self"]],["f32"]]],[11,"sum","","",39,[[["i"]],["f32x4"]]],[11,"product","","",39,[[["i"]],["f32x4"]]],[11,"sum","","",39,[[["i"]],["f32x4"]]],[11,"product","","",39,[[["i"]],["f32x4"]]],[11,"max_element","","Largest vector element value.",39,[[["self"]],["f32"]]],[11,"min_element","","Smallest vector element value.",39,[[["self"]],["f32"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"from","","",39,N],[11,"from","","",39,[[["i8x4"]],["self"]]],[11,"from","","",39,[[["u8x4"]],["self"]]],[11,"from","","",39,[[["i16x4"]],["self"]]],[11,"from","","",39,[[["u16x4"]],["self"]]],[11,"default","","",39,[[],["self"]]],[11,"eq","","",39,[[["self"],["self"]],["bool"]]],[11,"ne","","",39,[[["self"],["self"]],["bool"]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",39,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",39,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",39,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",39,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",39,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",39,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",39,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",39,N],[11,"abs","","Absolute value.",39,[[["self"]],["self"]]],[11,"cos","","Cosine.",39,[[["self"]],["self"]]],[11,"cos_pi","","Cosine of `self * PI`.",39,[[["self"]],["self"]]],[11,"exp","","Returns the exponential function of `self`: `e^(self)`.",39,[[["self"]],["self"]]],[11,"ln","","Returns the natural logarithm of `self`.",39,[[["self"]],["self"]]],[11,"mul_add","","Fused multiply add: `self * y + z`",39,[[["self"],["self"],["self"]],["self"]]],[11,"mul_adde","","Fused multiply add estimate: ~= `self * y + z`",39,[[["self"],["self"],["self"]],["self"]]],[11,"powf","","Raises `self` number to the floating point power of `x`.",39,[[["self"],["self"]],["self"]]],[11,"recpre","","Reciprocal estimate: `~= 1. / self`.",39,[[["self"]],["self"]]],[11,"rsqrte","","Reciprocal square-root estimate: `~= 1. / self.sqrt()`.",39,[[["self"]],["self"]]],[11,"sin","","Sine.",39,[[["self"]],["self"]]],[11,"sin_pi","","Sine of `self * PI`.",39,[[["self"]],["self"]]],[11,"sin_cos_pi","","Sine and cosine of `self * PI`.",39,N],[11,"sqrt","","",39,[[["self"]],["self"]]],[11,"sqrte","","Square-root estimate.",39,[[["self"]],["self"]]],[11,"eq","","Lane-wise equality comparison.",39,[[["self"],["self"]],["m32x4"]]],[11,"ne","","Lane-wise inequality comparison.",39,[[["self"],["self"]],["m32x4"]]],[11,"lt","","Lane-wise less-than comparison.",39,[[["self"],["self"]],["m32x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",39,[[["self"],["self"]],["m32x4"]]],[11,"gt","","Lane-wise greater-than comparison.",39,[[["self"],["self"]],["m32x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",39,[[["self"],["self"]],["m32x4"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",40,[[["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",40,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",40,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",40,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",40,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",40,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",40,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",40,[[["self"]],["self"]]],[11,"bitxor","","",40,[[["self"],["self"]],["self"]]],[11,"bitand","","",40,[[["self"],["self"]],["self"]]],[11,"bitor","","",40,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",40,[[["self"],["self"]]]],[11,"bitor_assign","","",40,[[["self"],["self"]]]],[11,"bitxor_assign","","",40,[[["self"],["self"]]]],[11,"bitxor","","",40,[[["self"],["bool"]],["self"]]],[11,"bitand","","",40,[[["self"],["bool"]],["self"]]],[11,"bitor","","",40,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",40,[[["self"],["bool"]]]],[11,"bitor_assign","","",40,[[["self"],["bool"]]]],[11,"bitxor_assign","","",40,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",40,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",40,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",40,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",40,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",40,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",40,[[["self"]],["bool"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"from","","",40,N],[11,"from","","",40,[[["m8x4"]],["self"]]],[11,"from","","",40,[[["m16x4"]],["self"]]],[11,"from","","",40,[[["m64x4"]],["self"]]],[11,"default","","",40,[[],["self"]]],[11,"eq","","",40,[[["self"],["self"]],["bool"]]],[11,"ne","","",40,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",40,[[["self"],["self"]],["m32x4"]]],[11,"ne","","Lane-wise inequality comparison.",40,[[["self"],["self"]],["m32x4"]]],[11,"lt","","Lane-wise less-than comparison.",40,[[["self"],["self"]],["m32x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",40,[[["self"],["self"]],["m32x4"]]],[11,"gt","","Lane-wise greater-than comparison.",40,[[["self"],["self"]],["m32x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",40,[[["self"],["self"]],["m32x4"]]],[11,"select","","Selects elements of `a` and `b` using mask.",40,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",40,[[["self"]],["lexicographicallyordered",["m32x4"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",40,[[["self"]],["lexicographicallyordered",["m32x4"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",41,[[["i64"],["i64"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",41,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",41,[[["i64"]],["self"]]],[11,"extract","","Extracts the value at `index`.",41,[[["self"],["usize"]],["i64"]]],[11,"extract_unchecked","","Extracts the value at `index`.",41,[[["self"],["usize"]],["i64"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",41,[[["self"],["usize"],["i64"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",41,[[["self"],["usize"],["i64"]],["self"]]],[11,"add","","",41,[[["self"],["self"]],["self"]]],[11,"sub","","",41,[[["self"],["self"]],["self"]]],[11,"mul","","",41,[[["self"],["self"]],["self"]]],[11,"div","","",41,[[["self"],["self"]],["self"]]],[11,"rem","","",41,[[["self"],["self"]],["self"]]],[11,"add_assign","","",41,[[["self"],["self"]]]],[11,"sub_assign","","",41,[[["self"],["self"]]]],[11,"mul_assign","","",41,[[["self"],["self"]]]],[11,"div_assign","","",41,[[["self"],["self"]]]],[11,"rem_assign","","",41,[[["self"],["self"]]]],[11,"add","","",41,[[["self"],["i64"]],["self"]]],[11,"sub","","",41,[[["self"],["i64"]],["self"]]],[11,"mul","","",41,[[["self"],["i64"]],["self"]]],[11,"div","","",41,[[["self"],["i64"]],["self"]]],[11,"rem","","",41,[[["self"],["i64"]],["self"]]],[11,"add_assign","","",41,[[["self"],["i64"]]]],[11,"sub_assign","","",41,[[["self"],["i64"]]]],[11,"mul_assign","","",41,[[["self"],["i64"]]]],[11,"div_assign","","",41,[[["self"],["i64"]]]],[11,"rem_assign","","",41,[[["self"],["i64"]]]],[11,"not","","",41,[[["self"]],["self"]]],[11,"bitxor","","",41,[[["self"],["self"]],["self"]]],[11,"bitand","","",41,[[["self"],["self"]],["self"]]],[11,"bitor","","",41,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",41,[[["self"],["self"]]]],[11,"bitor_assign","","",41,[[["self"],["self"]]]],[11,"bitxor_assign","","",41,[[["self"],["self"]]]],[11,"bitxor","","",41,[[["self"],["i64"]],["self"]]],[11,"bitand","","",41,[[["self"],["i64"]],["self"]]],[11,"bitor","","",41,[[["self"],["i64"]],["self"]]],[11,"bitand_assign","","",41,[[["self"],["i64"]]]],[11,"bitor_assign","","",41,[[["self"],["i64"]]]],[11,"bitxor_assign","","",41,[[["self"],["i64"]]]],[11,"shl","","",41,[[["self"],["self"]],["self"]]],[11,"shr","","",41,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",41,[[["self"],["self"]]]],[11,"shr_assign","","",41,[[["self"],["self"]]]],[11,"shl","","",41,[[["self"],["u32"]],["self"]]],[11,"shr","","",41,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",41,[[["self"],["u32"]]]],[11,"shr_assign","","",41,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",41,[[["self"],["i64x2"]],["i64x2"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",41,[[["self"],["i64x2"]],["i64x2"]]],[11,"neg","","",41,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",41,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",41,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",41,[[["self"]],["i64"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",41,[[["self"]],["i64"]]],[11,"sum","","",41,[[["i"]],["i64x2"]]],[11,"product","","",41,[[["i"]],["i64x2"]]],[11,"sum","","",41,[[["i"]],["i64x2"]]],[11,"product","","",41,[[["i"]],["i64x2"]]],[11,"max_element","","Largest vector element value.",41,[[["self"]],["i64"]]],[11,"min_element","","Smallest vector element value.",41,[[["self"]],["i64"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",41,[[["self"]],["i64"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",41,[[["self"]],["i64"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",41,[[["self"]],["i64"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"from","","",41,N],[11,"from","","",41,[[["i8x2"]],["self"]]],[11,"from","","",41,[[["u8x2"]],["self"]]],[11,"from","","",41,[[["i16x2"]],["self"]]],[11,"from","","",41,[[["u16x2"]],["self"]]],[11,"from","","",41,[[["i32x2"]],["self"]]],[11,"from","","",41,[[["u32x2"]],["self"]]],[11,"default","","",41,[[],["self"]]],[11,"hash","","",41,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",41,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",41,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",41,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",41,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",41,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",41,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",41,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",41,N],[11,"swap_bytes","","Reverses the byte order of the vector.",41,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",41,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",41,[[["self"]],["self"]]],[11,"eq","","",41,[[["self"],["self"]],["bool"]]],[11,"ne","","",41,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",41,[[["self"],["self"]],["m64x2"]]],[11,"ne","","Lane-wise inequality comparison.",41,[[["self"],["self"]],["m64x2"]]],[11,"lt","","Lane-wise less-than comparison.",41,[[["self"],["self"]],["m64x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",41,[[["self"],["self"]],["m64x2"]]],[11,"gt","","Lane-wise greater-than comparison.",41,[[["self"],["self"]],["m64x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",41,[[["self"],["self"]],["m64x2"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",41,[[["self"]],["lexicographicallyordered",["i64x2"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",41,[[["self"]],["lexicographicallyordered",["i64x2"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",42,[[["u64"],["u64"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",42,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",42,[[["u64"]],["self"]]],[11,"extract","","Extracts the value at `index`.",42,[[["self"],["usize"]],["u64"]]],[11,"extract_unchecked","","Extracts the value at `index`.",42,[[["self"],["usize"]],["u64"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",42,[[["self"],["usize"],["u64"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",42,[[["self"],["usize"],["u64"]],["self"]]],[11,"add","","",42,[[["self"],["self"]],["self"]]],[11,"sub","","",42,[[["self"],["self"]],["self"]]],[11,"mul","","",42,[[["self"],["self"]],["self"]]],[11,"div","","",42,[[["self"],["self"]],["self"]]],[11,"rem","","",42,[[["self"],["self"]],["self"]]],[11,"add_assign","","",42,[[["self"],["self"]]]],[11,"sub_assign","","",42,[[["self"],["self"]]]],[11,"mul_assign","","",42,[[["self"],["self"]]]],[11,"div_assign","","",42,[[["self"],["self"]]]],[11,"rem_assign","","",42,[[["self"],["self"]]]],[11,"add","","",42,[[["self"],["u64"]],["self"]]],[11,"sub","","",42,[[["self"],["u64"]],["self"]]],[11,"mul","","",42,[[["self"],["u64"]],["self"]]],[11,"div","","",42,[[["self"],["u64"]],["self"]]],[11,"rem","","",42,[[["self"],["u64"]],["self"]]],[11,"add_assign","","",42,[[["self"],["u64"]]]],[11,"sub_assign","","",42,[[["self"],["u64"]]]],[11,"mul_assign","","",42,[[["self"],["u64"]]]],[11,"div_assign","","",42,[[["self"],["u64"]]]],[11,"rem_assign","","",42,[[["self"],["u64"]]]],[11,"not","","",42,[[["self"]],["self"]]],[11,"bitxor","","",42,[[["self"],["self"]],["self"]]],[11,"bitand","","",42,[[["self"],["self"]],["self"]]],[11,"bitor","","",42,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",42,[[["self"],["self"]]]],[11,"bitor_assign","","",42,[[["self"],["self"]]]],[11,"bitxor_assign","","",42,[[["self"],["self"]]]],[11,"bitxor","","",42,[[["self"],["u64"]],["self"]]],[11,"bitand","","",42,[[["self"],["u64"]],["self"]]],[11,"bitor","","",42,[[["self"],["u64"]],["self"]]],[11,"bitand_assign","","",42,[[["self"],["u64"]]]],[11,"bitor_assign","","",42,[[["self"],["u64"]]]],[11,"bitxor_assign","","",42,[[["self"],["u64"]]]],[11,"shl","","",42,[[["self"],["self"]],["self"]]],[11,"shr","","",42,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",42,[[["self"],["self"]]]],[11,"shr_assign","","",42,[[["self"],["self"]]]],[11,"shl","","",42,[[["self"],["u32"]],["self"]]],[11,"shr","","",42,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",42,[[["self"],["u32"]]]],[11,"shr_assign","","",42,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",42,[[["self"],["u64x2"]],["u64x2"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",42,[[["self"],["u64x2"]],["u64x2"]]],[11,"min","","Minimum of two vectors.",42,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",42,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",42,[[["self"]],["u64"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",42,[[["self"]],["u64"]]],[11,"sum","","",42,[[["i"]],["u64x2"]]],[11,"product","","",42,[[["i"]],["u64x2"]]],[11,"sum","","",42,[[["i"]],["u64x2"]]],[11,"product","","",42,[[["i"]],["u64x2"]]],[11,"max_element","","Largest vector element value.",42,[[["self"]],["u64"]]],[11,"min_element","","Smallest vector element value.",42,[[["self"]],["u64"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",42,[[["self"]],["u64"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",42,[[["self"]],["u64"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",42,[[["self"]],["u64"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"from","","",42,N],[11,"from","","",42,[[["u8x2"]],["self"]]],[11,"from","","",42,[[["u16x2"]],["self"]]],[11,"from","","",42,[[["u32x2"]],["self"]]],[11,"default","","",42,[[],["self"]]],[11,"hash","","",42,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",42,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",42,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",42,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",42,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",42,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",42,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",42,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",42,N],[11,"swap_bytes","","Reverses the byte order of the vector.",42,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",42,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",42,[[["self"]],["self"]]],[11,"shuffle1_dyn","","Shuffle vector elements according to `indices`.",42,[[["self"],["self"]],["self"]]],[11,"eq","","",42,[[["self"],["self"]],["bool"]]],[11,"ne","","",42,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",42,[[["self"],["self"]],["m64x2"]]],[11,"ne","","Lane-wise inequality comparison.",42,[[["self"],["self"]],["m64x2"]]],[11,"lt","","Lane-wise less-than comparison.",42,[[["self"],["self"]],["m64x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",42,[[["self"],["self"]],["m64x2"]]],[11,"gt","","Lane-wise greater-than comparison.",42,[[["self"],["self"]],["m64x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",42,[[["self"],["self"]],["m64x2"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",42,[[["self"]],["lexicographicallyordered",["u64x2"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",42,[[["self"]],["lexicographicallyordered",["u64x2"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",43,[[["f64"],["f64"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",43,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",43,[[["f64"]],["self"]]],[11,"extract","","Extracts the value at `index`.",43,[[["self"],["usize"]],["f64"]]],[11,"extract_unchecked","","Extracts the value at `index`.",43,[[["self"],["usize"]],["f64"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",43,[[["self"],["usize"],["f64"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",43,[[["self"],["usize"],["f64"]],["self"]]],[11,"add","","",43,[[["self"],["self"]],["self"]]],[11,"sub","","",43,[[["self"],["self"]],["self"]]],[11,"mul","","",43,[[["self"],["self"]],["self"]]],[11,"div","","",43,[[["self"],["self"]],["self"]]],[11,"rem","","",43,[[["self"],["self"]],["self"]]],[11,"add_assign","","",43,[[["self"],["self"]]]],[11,"sub_assign","","",43,[[["self"],["self"]]]],[11,"mul_assign","","",43,[[["self"],["self"]]]],[11,"div_assign","","",43,[[["self"],["self"]]]],[11,"rem_assign","","",43,[[["self"],["self"]]]],[11,"add","","",43,[[["self"],["f64"]],["self"]]],[11,"sub","","",43,[[["self"],["f64"]],["self"]]],[11,"mul","","",43,[[["self"],["f64"]],["self"]]],[11,"div","","",43,[[["self"],["f64"]],["self"]]],[11,"rem","","",43,[[["self"],["f64"]],["self"]]],[11,"add_assign","","",43,[[["self"],["f64"]]]],[11,"sub_assign","","",43,[[["self"],["f64"]]]],[11,"mul_assign","","",43,[[["self"],["f64"]]]],[11,"div_assign","","",43,[[["self"],["f64"]]]],[11,"rem_assign","","",43,[[["self"],["f64"]]]],[11,"neg","","",43,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",43,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",43,[[["self"],["self"]],["self"]]],[11,"sum","","Horizontal sum of the vector elements.",43,[[["self"]],["f64"]]],[11,"product","","Horizontal product of the vector elements.",43,[[["self"]],["f64"]]],[11,"sum","","",43,[[["i"]],["f64x2"]]],[11,"product","","",43,[[["i"]],["f64x2"]]],[11,"sum","","",43,[[["i"]],["f64x2"]]],[11,"product","","",43,[[["i"]],["f64x2"]]],[11,"max_element","","Largest vector element value.",43,[[["self"]],["f64"]]],[11,"min_element","","Smallest vector element value.",43,[[["self"]],["f64"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"from","","",43,N],[11,"from","","",43,[[["i8x2"]],["self"]]],[11,"from","","",43,[[["u8x2"]],["self"]]],[11,"from","","",43,[[["i16x2"]],["self"]]],[11,"from","","",43,[[["u16x2"]],["self"]]],[11,"from","","",43,[[["i32x2"]],["self"]]],[11,"from","","",43,[[["u32x2"]],["self"]]],[11,"from","","",43,[[["f32x2"]],["self"]]],[11,"default","","",43,[[],["self"]]],[11,"eq","","",43,[[["self"],["self"]],["bool"]]],[11,"ne","","",43,[[["self"],["self"]],["bool"]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",43,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",43,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",43,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",43,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",43,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",43,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",43,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",43,N],[11,"abs","","Absolute value.",43,[[["self"]],["self"]]],[11,"cos","","Cosine.",43,[[["self"]],["self"]]],[11,"cos_pi","","Cosine of `self * PI`.",43,[[["self"]],["self"]]],[11,"exp","","Returns the exponential function of `self`: `e^(self)`.",43,[[["self"]],["self"]]],[11,"ln","","Returns the natural logarithm of `self`.",43,[[["self"]],["self"]]],[11,"mul_add","","Fused multiply add: `self * y + z`",43,[[["self"],["self"],["self"]],["self"]]],[11,"mul_adde","","Fused multiply add estimate: ~= `self * y + z`",43,[[["self"],["self"],["self"]],["self"]]],[11,"powf","","Raises `self` number to the floating point power of `x`.",43,[[["self"],["self"]],["self"]]],[11,"recpre","","Reciprocal estimate: `~= 1. / self`.",43,[[["self"]],["self"]]],[11,"rsqrte","","Reciprocal square-root estimate: `~= 1. / self.sqrt()`.",43,[[["self"]],["self"]]],[11,"sin","","Sine.",43,[[["self"]],["self"]]],[11,"sin_pi","","Sine of `self * PI`.",43,[[["self"]],["self"]]],[11,"sin_cos_pi","","Sine and cosine of `self * PI`.",43,N],[11,"sqrt","","",43,[[["self"]],["self"]]],[11,"sqrte","","Square-root estimate.",43,[[["self"]],["self"]]],[11,"eq","","Lane-wise equality comparison.",43,[[["self"],["self"]],["m64x2"]]],[11,"ne","","Lane-wise inequality comparison.",43,[[["self"],["self"]],["m64x2"]]],[11,"lt","","Lane-wise less-than comparison.",43,[[["self"],["self"]],["m64x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",43,[[["self"],["self"]],["m64x2"]]],[11,"gt","","Lane-wise greater-than comparison.",43,[[["self"],["self"]],["m64x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",43,[[["self"],["self"]],["m64x2"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",44,[[["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",44,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",44,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",44,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",44,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",44,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",44,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",44,[[["self"]],["self"]]],[11,"bitxor","","",44,[[["self"],["self"]],["self"]]],[11,"bitand","","",44,[[["self"],["self"]],["self"]]],[11,"bitor","","",44,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",44,[[["self"],["self"]]]],[11,"bitor_assign","","",44,[[["self"],["self"]]]],[11,"bitxor_assign","","",44,[[["self"],["self"]]]],[11,"bitxor","","",44,[[["self"],["bool"]],["self"]]],[11,"bitand","","",44,[[["self"],["bool"]],["self"]]],[11,"bitor","","",44,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",44,[[["self"],["bool"]]]],[11,"bitor_assign","","",44,[[["self"],["bool"]]]],[11,"bitxor_assign","","",44,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",44,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",44,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",44,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",44,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",44,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",44,[[["self"]],["bool"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"from","","",44,N],[11,"from","","",44,[[["m8x2"]],["self"]]],[11,"from","","",44,[[["m16x2"]],["self"]]],[11,"from","","",44,[[["m32x2"]],["self"]]],[11,"from","","",44,[[["m128x2"]],["self"]]],[11,"default","","",44,[[],["self"]]],[11,"eq","","",44,[[["self"],["self"]],["bool"]]],[11,"ne","","",44,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",44,[[["self"],["self"]],["m64x2"]]],[11,"ne","","Lane-wise inequality comparison.",44,[[["self"],["self"]],["m64x2"]]],[11,"lt","","Lane-wise less-than comparison.",44,[[["self"],["self"]],["m64x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",44,[[["self"],["self"]],["m64x2"]]],[11,"gt","","Lane-wise greater-than comparison.",44,[[["self"],["self"]],["m64x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",44,[[["self"],["self"]],["m64x2"]]],[11,"select","","Selects elements of `a` and `b` using mask.",44,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",44,[[["self"]],["lexicographicallyordered",["m64x2"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",44,[[["self"]],["lexicographicallyordered",["m64x2"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",88,[[["i128"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",88,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",88,[[["i128"]],["self"]]],[11,"extract","","Extracts the value at `index`.",88,[[["self"],["usize"]],["i128"]]],[11,"extract_unchecked","","Extracts the value at `index`.",88,[[["self"],["usize"]],["i128"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",88,[[["self"],["usize"],["i128"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",88,[[["self"],["usize"],["i128"]],["self"]]],[11,"add","","",88,[[["self"],["self"]],["self"]]],[11,"sub","","",88,[[["self"],["self"]],["self"]]],[11,"mul","","",88,[[["self"],["self"]],["self"]]],[11,"div","","",88,[[["self"],["self"]],["self"]]],[11,"rem","","",88,[[["self"],["self"]],["self"]]],[11,"add_assign","","",88,[[["self"],["self"]]]],[11,"sub_assign","","",88,[[["self"],["self"]]]],[11,"mul_assign","","",88,[[["self"],["self"]]]],[11,"div_assign","","",88,[[["self"],["self"]]]],[11,"rem_assign","","",88,[[["self"],["self"]]]],[11,"add","","",88,[[["self"],["i128"]],["self"]]],[11,"sub","","",88,[[["self"],["i128"]],["self"]]],[11,"mul","","",88,[[["self"],["i128"]],["self"]]],[11,"div","","",88,[[["self"],["i128"]],["self"]]],[11,"rem","","",88,[[["self"],["i128"]],["self"]]],[11,"add_assign","","",88,[[["self"],["i128"]]]],[11,"sub_assign","","",88,[[["self"],["i128"]]]],[11,"mul_assign","","",88,[[["self"],["i128"]]]],[11,"div_assign","","",88,[[["self"],["i128"]]]],[11,"rem_assign","","",88,[[["self"],["i128"]]]],[11,"not","","",88,[[["self"]],["self"]]],[11,"bitxor","","",88,[[["self"],["self"]],["self"]]],[11,"bitand","","",88,[[["self"],["self"]],["self"]]],[11,"bitor","","",88,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",88,[[["self"],["self"]]]],[11,"bitor_assign","","",88,[[["self"],["self"]]]],[11,"bitxor_assign","","",88,[[["self"],["self"]]]],[11,"bitxor","","",88,[[["self"],["i128"]],["self"]]],[11,"bitand","","",88,[[["self"],["i128"]],["self"]]],[11,"bitor","","",88,[[["self"],["i128"]],["self"]]],[11,"bitand_assign","","",88,[[["self"],["i128"]]]],[11,"bitor_assign","","",88,[[["self"],["i128"]]]],[11,"bitxor_assign","","",88,[[["self"],["i128"]]]],[11,"shl","","",88,[[["self"],["self"]],["self"]]],[11,"shr","","",88,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",88,[[["self"],["self"]]]],[11,"shr_assign","","",88,[[["self"],["self"]]]],[11,"shl","","",88,[[["self"],["u32"]],["self"]]],[11,"shr","","",88,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",88,[[["self"],["u32"]]]],[11,"shr_assign","","",88,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",88,[[["self"],["i128x1"]],["i128x1"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",88,[[["self"],["i128x1"]],["i128x1"]]],[11,"neg","","",88,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",88,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",88,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",88,[[["self"]],["i128"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",88,[[["self"]],["i128"]]],[11,"sum","","",88,[[["i"]],["i128x1"]]],[11,"product","","",88,[[["i"]],["i128x1"]]],[11,"sum","","",88,[[["i"]],["i128x1"]]],[11,"product","","",88,[[["i"]],["i128x1"]]],[11,"max_element","","Largest vector element value.",88,[[["self"]],["i128"]]],[11,"min_element","","Smallest vector element value.",88,[[["self"]],["i128"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",88,[[["self"]],["i128"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",88,[[["self"]],["i128"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",88,[[["self"]],["i128"]]],[11,"fmt","","",88,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",88,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",88,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",88,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",88,[[["self"],["formatter"]],["result"]]],[11,"from","","",88,N],[11,"default","","",88,[[],["self"]]],[11,"hash","","",88,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",88,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",88,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",88,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",88,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",88,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",88,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",88,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",88,N],[11,"swap_bytes","","Reverses the byte order of the vector.",88,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",88,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",88,[[["self"]],["self"]]],[11,"eq","","",88,[[["self"],["self"]],["bool"]]],[11,"ne","","",88,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",88,[[["self"],["self"]],["m128x1"]]],[11,"ne","","Lane-wise inequality comparison.",88,[[["self"],["self"]],["m128x1"]]],[11,"lt","","Lane-wise less-than comparison.",88,[[["self"],["self"]],["m128x1"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",88,[[["self"],["self"]],["m128x1"]]],[11,"gt","","Lane-wise greater-than comparison.",88,[[["self"],["self"]],["m128x1"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",88,[[["self"],["self"]],["m128x1"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",88,[[["self"]],["lexicographicallyordered",["i128x1"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",88,[[["self"]],["lexicographicallyordered",["i128x1"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",89,[[["u128"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",89,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",89,[[["u128"]],["self"]]],[11,"extract","","Extracts the value at `index`.",89,[[["self"],["usize"]],["u128"]]],[11,"extract_unchecked","","Extracts the value at `index`.",89,[[["self"],["usize"]],["u128"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",89,[[["self"],["usize"],["u128"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",89,[[["self"],["usize"],["u128"]],["self"]]],[11,"add","","",89,[[["self"],["self"]],["self"]]],[11,"sub","","",89,[[["self"],["self"]],["self"]]],[11,"mul","","",89,[[["self"],["self"]],["self"]]],[11,"div","","",89,[[["self"],["self"]],["self"]]],[11,"rem","","",89,[[["self"],["self"]],["self"]]],[11,"add_assign","","",89,[[["self"],["self"]]]],[11,"sub_assign","","",89,[[["self"],["self"]]]],[11,"mul_assign","","",89,[[["self"],["self"]]]],[11,"div_assign","","",89,[[["self"],["self"]]]],[11,"rem_assign","","",89,[[["self"],["self"]]]],[11,"add","","",89,[[["self"],["u128"]],["self"]]],[11,"sub","","",89,[[["self"],["u128"]],["self"]]],[11,"mul","","",89,[[["self"],["u128"]],["self"]]],[11,"div","","",89,[[["self"],["u128"]],["self"]]],[11,"rem","","",89,[[["self"],["u128"]],["self"]]],[11,"add_assign","","",89,[[["self"],["u128"]]]],[11,"sub_assign","","",89,[[["self"],["u128"]]]],[11,"mul_assign","","",89,[[["self"],["u128"]]]],[11,"div_assign","","",89,[[["self"],["u128"]]]],[11,"rem_assign","","",89,[[["self"],["u128"]]]],[11,"not","","",89,[[["self"]],["self"]]],[11,"bitxor","","",89,[[["self"],["self"]],["self"]]],[11,"bitand","","",89,[[["self"],["self"]],["self"]]],[11,"bitor","","",89,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",89,[[["self"],["self"]]]],[11,"bitor_assign","","",89,[[["self"],["self"]]]],[11,"bitxor_assign","","",89,[[["self"],["self"]]]],[11,"bitxor","","",89,[[["self"],["u128"]],["self"]]],[11,"bitand","","",89,[[["self"],["u128"]],["self"]]],[11,"bitor","","",89,[[["self"],["u128"]],["self"]]],[11,"bitand_assign","","",89,[[["self"],["u128"]]]],[11,"bitor_assign","","",89,[[["self"],["u128"]]]],[11,"bitxor_assign","","",89,[[["self"],["u128"]]]],[11,"shl","","",89,[[["self"],["self"]],["self"]]],[11,"shr","","",89,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",89,[[["self"],["self"]]]],[11,"shr_assign","","",89,[[["self"],["self"]]]],[11,"shl","","",89,[[["self"],["u32"]],["self"]]],[11,"shr","","",89,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",89,[[["self"],["u32"]]]],[11,"shr_assign","","",89,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",89,[[["self"],["u128x1"]],["u128x1"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",89,[[["self"],["u128x1"]],["u128x1"]]],[11,"min","","Minimum of two vectors.",89,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",89,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",89,[[["self"]],["u128"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",89,[[["self"]],["u128"]]],[11,"sum","","",89,[[["i"]],["u128x1"]]],[11,"product","","",89,[[["i"]],["u128x1"]]],[11,"sum","","",89,[[["i"]],["u128x1"]]],[11,"product","","",89,[[["i"]],["u128x1"]]],[11,"max_element","","Largest vector element value.",89,[[["self"]],["u128"]]],[11,"min_element","","Smallest vector element value.",89,[[["self"]],["u128"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",89,[[["self"]],["u128"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",89,[[["self"]],["u128"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",89,[[["self"]],["u128"]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result"]]],[11,"from","","",89,N],[11,"default","","",89,[[],["self"]]],[11,"hash","","",89,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",89,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",89,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",89,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",89,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",89,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",89,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",89,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",89,N],[11,"swap_bytes","","Reverses the byte order of the vector.",89,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",89,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",89,[[["self"]],["self"]]],[11,"shuffle1_dyn","","Shuffle vector elements according to `indices`.",89,[[["self"],["self"]],["self"]]],[11,"eq","","",89,[[["self"],["self"]],["bool"]]],[11,"ne","","",89,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",89,[[["self"],["self"]],["m128x1"]]],[11,"ne","","Lane-wise inequality comparison.",89,[[["self"],["self"]],["m128x1"]]],[11,"lt","","Lane-wise less-than comparison.",89,[[["self"],["self"]],["m128x1"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",89,[[["self"],["self"]],["m128x1"]]],[11,"gt","","Lane-wise greater-than comparison.",89,[[["self"],["self"]],["m128x1"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",89,[[["self"],["self"]],["m128x1"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",89,[[["self"]],["lexicographicallyordered",["u128x1"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",89,[[["self"]],["lexicographicallyordered",["u128x1"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",90,[[["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",90,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",90,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",90,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",90,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",90,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",90,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",90,[[["self"]],["self"]]],[11,"bitxor","","",90,[[["self"],["self"]],["self"]]],[11,"bitand","","",90,[[["self"],["self"]],["self"]]],[11,"bitor","","",90,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",90,[[["self"],["self"]]]],[11,"bitor_assign","","",90,[[["self"],["self"]]]],[11,"bitxor_assign","","",90,[[["self"],["self"]]]],[11,"bitxor","","",90,[[["self"],["bool"]],["self"]]],[11,"bitand","","",90,[[["self"],["bool"]],["self"]]],[11,"bitor","","",90,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",90,[[["self"],["bool"]]]],[11,"bitor_assign","","",90,[[["self"],["bool"]]]],[11,"bitxor_assign","","",90,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",90,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",90,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",90,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",90,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",90,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",90,[[["self"]],["bool"]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result"]]],[11,"from","","",90,N],[11,"default","","",90,[[],["self"]]],[11,"eq","","",90,[[["self"],["self"]],["bool"]]],[11,"ne","","",90,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",90,[[["self"],["self"]],["m128x1"]]],[11,"ne","","Lane-wise inequality comparison.",90,[[["self"],["self"]],["m128x1"]]],[11,"lt","","Lane-wise less-than comparison.",90,[[["self"],["self"]],["m128x1"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",90,[[["self"],["self"]],["m128x1"]]],[11,"gt","","Lane-wise greater-than comparison.",90,[[["self"],["self"]],["m128x1"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",90,[[["self"],["self"]],["m128x1"]]],[11,"select","","Selects elements of `a` and `b` using mask.",90,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",90,[[["self"]],["lexicographicallyordered",["m128x1"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",90,[[["self"]],["lexicographicallyordered",["m128x1"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",48,[[["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",48,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",48,[[["i8"]],["self"]]],[11,"extract","","Extracts the value at `index`.",48,[[["self"],["usize"]],["i8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",48,[[["self"],["usize"]],["i8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",48,[[["self"],["usize"],["i8"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",48,[[["self"],["usize"],["i8"]],["self"]]],[11,"add","","",48,[[["self"],["self"]],["self"]]],[11,"sub","","",48,[[["self"],["self"]],["self"]]],[11,"mul","","",48,[[["self"],["self"]],["self"]]],[11,"div","","",48,[[["self"],["self"]],["self"]]],[11,"rem","","",48,[[["self"],["self"]],["self"]]],[11,"add_assign","","",48,[[["self"],["self"]]]],[11,"sub_assign","","",48,[[["self"],["self"]]]],[11,"mul_assign","","",48,[[["self"],["self"]]]],[11,"div_assign","","",48,[[["self"],["self"]]]],[11,"rem_assign","","",48,[[["self"],["self"]]]],[11,"add","","",48,[[["self"],["i8"]],["self"]]],[11,"sub","","",48,[[["self"],["i8"]],["self"]]],[11,"mul","","",48,[[["self"],["i8"]],["self"]]],[11,"div","","",48,[[["self"],["i8"]],["self"]]],[11,"rem","","",48,[[["self"],["i8"]],["self"]]],[11,"add_assign","","",48,[[["self"],["i8"]]]],[11,"sub_assign","","",48,[[["self"],["i8"]]]],[11,"mul_assign","","",48,[[["self"],["i8"]]]],[11,"div_assign","","",48,[[["self"],["i8"]]]],[11,"rem_assign","","",48,[[["self"],["i8"]]]],[11,"not","","",48,[[["self"]],["self"]]],[11,"bitxor","","",48,[[["self"],["self"]],["self"]]],[11,"bitand","","",48,[[["self"],["self"]],["self"]]],[11,"bitor","","",48,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",48,[[["self"],["self"]]]],[11,"bitor_assign","","",48,[[["self"],["self"]]]],[11,"bitxor_assign","","",48,[[["self"],["self"]]]],[11,"bitxor","","",48,[[["self"],["i8"]],["self"]]],[11,"bitand","","",48,[[["self"],["i8"]],["self"]]],[11,"bitor","","",48,[[["self"],["i8"]],["self"]]],[11,"bitand_assign","","",48,[[["self"],["i8"]]]],[11,"bitor_assign","","",48,[[["self"],["i8"]]]],[11,"bitxor_assign","","",48,[[["self"],["i8"]]]],[11,"shl","","",48,[[["self"],["self"]],["self"]]],[11,"shr","","",48,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",48,[[["self"],["self"]]]],[11,"shr_assign","","",48,[[["self"],["self"]]]],[11,"shl","","",48,[[["self"],["u32"]],["self"]]],[11,"shr","","",48,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",48,[[["self"],["u32"]]]],[11,"shr_assign","","",48,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",48,[[["self"],["i8x32"]],["i8x32"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",48,[[["self"],["i8x32"]],["i8x32"]]],[11,"neg","","",48,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",48,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",48,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",48,[[["self"]],["i8"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",48,[[["self"]],["i8"]]],[11,"sum","","",48,[[["i"]],["i8x32"]]],[11,"product","","",48,[[["i"]],["i8x32"]]],[11,"sum","","",48,[[["i"]],["i8x32"]]],[11,"product","","",48,[[["i"]],["i8x32"]]],[11,"max_element","","Largest vector element value.",48,[[["self"]],["i8"]]],[11,"min_element","","Smallest vector element value.",48,[[["self"]],["i8"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",48,[[["self"]],["i8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",48,[[["self"]],["i8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",48,[[["self"]],["i8"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"from","","",48,N],[11,"default","","",48,[[],["self"]]],[11,"hash","","",48,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",48,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",48,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",48,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",48,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",48,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",48,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",48,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",48,N],[11,"swap_bytes","","Reverses the byte order of the vector.",48,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",48,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",48,[[["self"]],["self"]]],[11,"eq","","",48,[[["self"],["self"]],["bool"]]],[11,"ne","","",48,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",48,[[["self"],["self"]],["m8x32"]]],[11,"ne","","Lane-wise inequality comparison.",48,[[["self"],["self"]],["m8x32"]]],[11,"lt","","Lane-wise less-than comparison.",48,[[["self"],["self"]],["m8x32"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",48,[[["self"],["self"]],["m8x32"]]],[11,"gt","","Lane-wise greater-than comparison.",48,[[["self"],["self"]],["m8x32"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",48,[[["self"],["self"]],["m8x32"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",48,[[["self"]],["lexicographicallyordered",["i8x32"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",48,[[["self"]],["lexicographicallyordered",["i8x32"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",49,[[["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",49,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",49,[[["u8"]],["self"]]],[11,"extract","","Extracts the value at `index`.",49,[[["self"],["usize"]],["u8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",49,[[["self"],["usize"]],["u8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",49,[[["self"],["usize"],["u8"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",49,[[["self"],["usize"],["u8"]],["self"]]],[11,"add","","",49,[[["self"],["self"]],["self"]]],[11,"sub","","",49,[[["self"],["self"]],["self"]]],[11,"mul","","",49,[[["self"],["self"]],["self"]]],[11,"div","","",49,[[["self"],["self"]],["self"]]],[11,"rem","","",49,[[["self"],["self"]],["self"]]],[11,"add_assign","","",49,[[["self"],["self"]]]],[11,"sub_assign","","",49,[[["self"],["self"]]]],[11,"mul_assign","","",49,[[["self"],["self"]]]],[11,"div_assign","","",49,[[["self"],["self"]]]],[11,"rem_assign","","",49,[[["self"],["self"]]]],[11,"add","","",49,[[["self"],["u8"]],["self"]]],[11,"sub","","",49,[[["self"],["u8"]],["self"]]],[11,"mul","","",49,[[["self"],["u8"]],["self"]]],[11,"div","","",49,[[["self"],["u8"]],["self"]]],[11,"rem","","",49,[[["self"],["u8"]],["self"]]],[11,"add_assign","","",49,[[["self"],["u8"]]]],[11,"sub_assign","","",49,[[["self"],["u8"]]]],[11,"mul_assign","","",49,[[["self"],["u8"]]]],[11,"div_assign","","",49,[[["self"],["u8"]]]],[11,"rem_assign","","",49,[[["self"],["u8"]]]],[11,"not","","",49,[[["self"]],["self"]]],[11,"bitxor","","",49,[[["self"],["self"]],["self"]]],[11,"bitand","","",49,[[["self"],["self"]],["self"]]],[11,"bitor","","",49,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",49,[[["self"],["self"]]]],[11,"bitor_assign","","",49,[[["self"],["self"]]]],[11,"bitxor_assign","","",49,[[["self"],["self"]]]],[11,"bitxor","","",49,[[["self"],["u8"]],["self"]]],[11,"bitand","","",49,[[["self"],["u8"]],["self"]]],[11,"bitor","","",49,[[["self"],["u8"]],["self"]]],[11,"bitand_assign","","",49,[[["self"],["u8"]]]],[11,"bitor_assign","","",49,[[["self"],["u8"]]]],[11,"bitxor_assign","","",49,[[["self"],["u8"]]]],[11,"shl","","",49,[[["self"],["self"]],["self"]]],[11,"shr","","",49,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",49,[[["self"],["self"]]]],[11,"shr_assign","","",49,[[["self"],["self"]]]],[11,"shl","","",49,[[["self"],["u32"]],["self"]]],[11,"shr","","",49,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",49,[[["self"],["u32"]]]],[11,"shr_assign","","",49,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",49,[[["self"],["u8x32"]],["u8x32"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",49,[[["self"],["u8x32"]],["u8x32"]]],[11,"min","","Minimum of two vectors.",49,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",49,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",49,[[["self"]],["u8"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",49,[[["self"]],["u8"]]],[11,"sum","","",49,[[["i"]],["u8x32"]]],[11,"product","","",49,[[["i"]],["u8x32"]]],[11,"sum","","",49,[[["i"]],["u8x32"]]],[11,"product","","",49,[[["i"]],["u8x32"]]],[11,"max_element","","Largest vector element value.",49,[[["self"]],["u8"]]],[11,"min_element","","Smallest vector element value.",49,[[["self"]],["u8"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",49,[[["self"]],["u8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",49,[[["self"]],["u8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",49,[[["self"]],["u8"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"from","","",49,N],[11,"default","","",49,[[],["self"]]],[11,"hash","","",49,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",49,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",49,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",49,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",49,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",49,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",49,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",49,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",49,N],[11,"swap_bytes","","Reverses the byte order of the vector.",49,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",49,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",49,[[["self"]],["self"]]],[11,"shuffle1_dyn","","Shuffle vector elements according to `indices`.",49,[[["self"],["self"]],["self"]]],[11,"eq","","",49,[[["self"],["self"]],["bool"]]],[11,"ne","","",49,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",49,[[["self"],["self"]],["m8x32"]]],[11,"ne","","Lane-wise inequality comparison.",49,[[["self"],["self"]],["m8x32"]]],[11,"lt","","Lane-wise less-than comparison.",49,[[["self"],["self"]],["m8x32"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",49,[[["self"],["self"]],["m8x32"]]],[11,"gt","","Lane-wise greater-than comparison.",49,[[["self"],["self"]],["m8x32"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",49,[[["self"],["self"]],["m8x32"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",49,[[["self"]],["lexicographicallyordered",["u8x32"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",49,[[["self"]],["lexicographicallyordered",["u8x32"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",50,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",50,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",50,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",50,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",50,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",50,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",50,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",50,[[["self"]],["self"]]],[11,"bitxor","","",50,[[["self"],["self"]],["self"]]],[11,"bitand","","",50,[[["self"],["self"]],["self"]]],[11,"bitor","","",50,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",50,[[["self"],["self"]]]],[11,"bitor_assign","","",50,[[["self"],["self"]]]],[11,"bitxor_assign","","",50,[[["self"],["self"]]]],[11,"bitxor","","",50,[[["self"],["bool"]],["self"]]],[11,"bitand","","",50,[[["self"],["bool"]],["self"]]],[11,"bitor","","",50,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",50,[[["self"],["bool"]]]],[11,"bitor_assign","","",50,[[["self"],["bool"]]]],[11,"bitxor_assign","","",50,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",50,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",50,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",50,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",50,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",50,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",50,[[["self"]],["bool"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"from","","",50,N],[11,"default","","",50,[[],["self"]]],[11,"eq","","",50,[[["self"],["self"]],["bool"]]],[11,"ne","","",50,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",50,[[["self"],["self"]],["m8x32"]]],[11,"ne","","Lane-wise inequality comparison.",50,[[["self"],["self"]],["m8x32"]]],[11,"lt","","Lane-wise less-than comparison.",50,[[["self"],["self"]],["m8x32"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",50,[[["self"],["self"]],["m8x32"]]],[11,"gt","","Lane-wise greater-than comparison.",50,[[["self"],["self"]],["m8x32"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",50,[[["self"],["self"]],["m8x32"]]],[11,"select","","Selects elements of `a` and `b` using mask.",50,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",50,[[["self"]],["lexicographicallyordered",["m8x32"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",50,[[["self"]],["lexicographicallyordered",["m8x32"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",51,[[["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",51,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",51,[[["i16"]],["self"]]],[11,"extract","","Extracts the value at `index`.",51,[[["self"],["usize"]],["i16"]]],[11,"extract_unchecked","","Extracts the value at `index`.",51,[[["self"],["usize"]],["i16"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",51,[[["self"],["usize"],["i16"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",51,[[["self"],["usize"],["i16"]],["self"]]],[11,"add","","",51,[[["self"],["self"]],["self"]]],[11,"sub","","",51,[[["self"],["self"]],["self"]]],[11,"mul","","",51,[[["self"],["self"]],["self"]]],[11,"div","","",51,[[["self"],["self"]],["self"]]],[11,"rem","","",51,[[["self"],["self"]],["self"]]],[11,"add_assign","","",51,[[["self"],["self"]]]],[11,"sub_assign","","",51,[[["self"],["self"]]]],[11,"mul_assign","","",51,[[["self"],["self"]]]],[11,"div_assign","","",51,[[["self"],["self"]]]],[11,"rem_assign","","",51,[[["self"],["self"]]]],[11,"add","","",51,[[["self"],["i16"]],["self"]]],[11,"sub","","",51,[[["self"],["i16"]],["self"]]],[11,"mul","","",51,[[["self"],["i16"]],["self"]]],[11,"div","","",51,[[["self"],["i16"]],["self"]]],[11,"rem","","",51,[[["self"],["i16"]],["self"]]],[11,"add_assign","","",51,[[["self"],["i16"]]]],[11,"sub_assign","","",51,[[["self"],["i16"]]]],[11,"mul_assign","","",51,[[["self"],["i16"]]]],[11,"div_assign","","",51,[[["self"],["i16"]]]],[11,"rem_assign","","",51,[[["self"],["i16"]]]],[11,"not","","",51,[[["self"]],["self"]]],[11,"bitxor","","",51,[[["self"],["self"]],["self"]]],[11,"bitand","","",51,[[["self"],["self"]],["self"]]],[11,"bitor","","",51,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",51,[[["self"],["self"]]]],[11,"bitor_assign","","",51,[[["self"],["self"]]]],[11,"bitxor_assign","","",51,[[["self"],["self"]]]],[11,"bitxor","","",51,[[["self"],["i16"]],["self"]]],[11,"bitand","","",51,[[["self"],["i16"]],["self"]]],[11,"bitor","","",51,[[["self"],["i16"]],["self"]]],[11,"bitand_assign","","",51,[[["self"],["i16"]]]],[11,"bitor_assign","","",51,[[["self"],["i16"]]]],[11,"bitxor_assign","","",51,[[["self"],["i16"]]]],[11,"shl","","",51,[[["self"],["self"]],["self"]]],[11,"shr","","",51,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",51,[[["self"],["self"]]]],[11,"shr_assign","","",51,[[["self"],["self"]]]],[11,"shl","","",51,[[["self"],["u32"]],["self"]]],[11,"shr","","",51,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",51,[[["self"],["u32"]]]],[11,"shr_assign","","",51,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",51,[[["self"],["i16x16"]],["i16x16"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",51,[[["self"],["i16x16"]],["i16x16"]]],[11,"neg","","",51,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",51,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",51,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",51,[[["self"]],["i16"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",51,[[["self"]],["i16"]]],[11,"sum","","",51,[[["i"]],["i16x16"]]],[11,"product","","",51,[[["i"]],["i16x16"]]],[11,"sum","","",51,[[["i"]],["i16x16"]]],[11,"product","","",51,[[["i"]],["i16x16"]]],[11,"max_element","","Largest vector element value.",51,[[["self"]],["i16"]]],[11,"min_element","","Smallest vector element value.",51,[[["self"]],["i16"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",51,[[["self"]],["i16"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",51,[[["self"]],["i16"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",51,[[["self"]],["i16"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"from","","",51,N],[11,"from","","",51,[[["i8x16"]],["self"]]],[11,"from","","",51,[[["u8x16"]],["self"]]],[11,"default","","",51,[[],["self"]]],[11,"hash","","",51,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",51,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",51,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",51,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",51,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",51,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",51,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",51,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",51,N],[11,"swap_bytes","","Reverses the byte order of the vector.",51,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",51,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",51,[[["self"]],["self"]]],[11,"eq","","",51,[[["self"],["self"]],["bool"]]],[11,"ne","","",51,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",51,[[["self"],["self"]],["m16x16"]]],[11,"ne","","Lane-wise inequality comparison.",51,[[["self"],["self"]],["m16x16"]]],[11,"lt","","Lane-wise less-than comparison.",51,[[["self"],["self"]],["m16x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",51,[[["self"],["self"]],["m16x16"]]],[11,"gt","","Lane-wise greater-than comparison.",51,[[["self"],["self"]],["m16x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",51,[[["self"],["self"]],["m16x16"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",51,[[["self"]],["lexicographicallyordered",["i16x16"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",51,[[["self"]],["lexicographicallyordered",["i16x16"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",52,[[["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",52,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",52,[[["u16"]],["self"]]],[11,"extract","","Extracts the value at `index`.",52,[[["self"],["usize"]],["u16"]]],[11,"extract_unchecked","","Extracts the value at `index`.",52,[[["self"],["usize"]],["u16"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",52,[[["self"],["usize"],["u16"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",52,[[["self"],["usize"],["u16"]],["self"]]],[11,"add","","",52,[[["self"],["self"]],["self"]]],[11,"sub","","",52,[[["self"],["self"]],["self"]]],[11,"mul","","",52,[[["self"],["self"]],["self"]]],[11,"div","","",52,[[["self"],["self"]],["self"]]],[11,"rem","","",52,[[["self"],["self"]],["self"]]],[11,"add_assign","","",52,[[["self"],["self"]]]],[11,"sub_assign","","",52,[[["self"],["self"]]]],[11,"mul_assign","","",52,[[["self"],["self"]]]],[11,"div_assign","","",52,[[["self"],["self"]]]],[11,"rem_assign","","",52,[[["self"],["self"]]]],[11,"add","","",52,[[["self"],["u16"]],["self"]]],[11,"sub","","",52,[[["self"],["u16"]],["self"]]],[11,"mul","","",52,[[["self"],["u16"]],["self"]]],[11,"div","","",52,[[["self"],["u16"]],["self"]]],[11,"rem","","",52,[[["self"],["u16"]],["self"]]],[11,"add_assign","","",52,[[["self"],["u16"]]]],[11,"sub_assign","","",52,[[["self"],["u16"]]]],[11,"mul_assign","","",52,[[["self"],["u16"]]]],[11,"div_assign","","",52,[[["self"],["u16"]]]],[11,"rem_assign","","",52,[[["self"],["u16"]]]],[11,"not","","",52,[[["self"]],["self"]]],[11,"bitxor","","",52,[[["self"],["self"]],["self"]]],[11,"bitand","","",52,[[["self"],["self"]],["self"]]],[11,"bitor","","",52,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",52,[[["self"],["self"]]]],[11,"bitor_assign","","",52,[[["self"],["self"]]]],[11,"bitxor_assign","","",52,[[["self"],["self"]]]],[11,"bitxor","","",52,[[["self"],["u16"]],["self"]]],[11,"bitand","","",52,[[["self"],["u16"]],["self"]]],[11,"bitor","","",52,[[["self"],["u16"]],["self"]]],[11,"bitand_assign","","",52,[[["self"],["u16"]]]],[11,"bitor_assign","","",52,[[["self"],["u16"]]]],[11,"bitxor_assign","","",52,[[["self"],["u16"]]]],[11,"shl","","",52,[[["self"],["self"]],["self"]]],[11,"shr","","",52,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",52,[[["self"],["self"]]]],[11,"shr_assign","","",52,[[["self"],["self"]]]],[11,"shl","","",52,[[["self"],["u32"]],["self"]]],[11,"shr","","",52,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",52,[[["self"],["u32"]]]],[11,"shr_assign","","",52,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",52,[[["self"],["u16x16"]],["u16x16"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",52,[[["self"],["u16x16"]],["u16x16"]]],[11,"min","","Minimum of two vectors.",52,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",52,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",52,[[["self"]],["u16"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",52,[[["self"]],["u16"]]],[11,"sum","","",52,[[["i"]],["u16x16"]]],[11,"product","","",52,[[["i"]],["u16x16"]]],[11,"sum","","",52,[[["i"]],["u16x16"]]],[11,"product","","",52,[[["i"]],["u16x16"]]],[11,"max_element","","Largest vector element value.",52,[[["self"]],["u16"]]],[11,"min_element","","Smallest vector element value.",52,[[["self"]],["u16"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",52,[[["self"]],["u16"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",52,[[["self"]],["u16"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",52,[[["self"]],["u16"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"from","","",52,N],[11,"from","","",52,[[["u8x16"]],["self"]]],[11,"default","","",52,[[],["self"]]],[11,"hash","","",52,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",52,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",52,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",52,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",52,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",52,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",52,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",52,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",52,N],[11,"swap_bytes","","Reverses the byte order of the vector.",52,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",52,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",52,[[["self"]],["self"]]],[11,"shuffle1_dyn","","Shuffle vector elements according to `indices`.",52,[[["self"],["self"]],["self"]]],[11,"eq","","",52,[[["self"],["self"]],["bool"]]],[11,"ne","","",52,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",52,[[["self"],["self"]],["m16x16"]]],[11,"ne","","Lane-wise inequality comparison.",52,[[["self"],["self"]],["m16x16"]]],[11,"lt","","Lane-wise less-than comparison.",52,[[["self"],["self"]],["m16x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",52,[[["self"],["self"]],["m16x16"]]],[11,"gt","","Lane-wise greater-than comparison.",52,[[["self"],["self"]],["m16x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",52,[[["self"],["self"]],["m16x16"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",52,[[["self"]],["lexicographicallyordered",["u16x16"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",52,[[["self"]],["lexicographicallyordered",["u16x16"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",53,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",53,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",53,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",53,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",53,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",53,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",53,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",53,[[["self"]],["self"]]],[11,"bitxor","","",53,[[["self"],["self"]],["self"]]],[11,"bitand","","",53,[[["self"],["self"]],["self"]]],[11,"bitor","","",53,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",53,[[["self"],["self"]]]],[11,"bitor_assign","","",53,[[["self"],["self"]]]],[11,"bitxor_assign","","",53,[[["self"],["self"]]]],[11,"bitxor","","",53,[[["self"],["bool"]],["self"]]],[11,"bitand","","",53,[[["self"],["bool"]],["self"]]],[11,"bitor","","",53,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",53,[[["self"],["bool"]]]],[11,"bitor_assign","","",53,[[["self"],["bool"]]]],[11,"bitxor_assign","","",53,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",53,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",53,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",53,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",53,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",53,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",53,[[["self"]],["bool"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"from","","",53,N],[11,"from","","",53,[[["m8x16"]],["self"]]],[11,"default","","",53,[[],["self"]]],[11,"eq","","",53,[[["self"],["self"]],["bool"]]],[11,"ne","","",53,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",53,[[["self"],["self"]],["m16x16"]]],[11,"ne","","Lane-wise inequality comparison.",53,[[["self"],["self"]],["m16x16"]]],[11,"lt","","Lane-wise less-than comparison.",53,[[["self"],["self"]],["m16x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",53,[[["self"],["self"]],["m16x16"]]],[11,"gt","","Lane-wise greater-than comparison.",53,[[["self"],["self"]],["m16x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",53,[[["self"],["self"]],["m16x16"]]],[11,"select","","Selects elements of `a` and `b` using mask.",53,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",53,[[["self"]],["lexicographicallyordered",["m16x16"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",53,[[["self"]],["lexicographicallyordered",["m16x16"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",54,[[["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",54,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",54,[[["i32"]],["self"]]],[11,"extract","","Extracts the value at `index`.",54,[[["self"],["usize"]],["i32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",54,[[["self"],["usize"]],["i32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",54,[[["self"],["usize"],["i32"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",54,[[["self"],["usize"],["i32"]],["self"]]],[11,"add","","",54,[[["self"],["self"]],["self"]]],[11,"sub","","",54,[[["self"],["self"]],["self"]]],[11,"mul","","",54,[[["self"],["self"]],["self"]]],[11,"div","","",54,[[["self"],["self"]],["self"]]],[11,"rem","","",54,[[["self"],["self"]],["self"]]],[11,"add_assign","","",54,[[["self"],["self"]]]],[11,"sub_assign","","",54,[[["self"],["self"]]]],[11,"mul_assign","","",54,[[["self"],["self"]]]],[11,"div_assign","","",54,[[["self"],["self"]]]],[11,"rem_assign","","",54,[[["self"],["self"]]]],[11,"add","","",54,[[["self"],["i32"]],["self"]]],[11,"sub","","",54,[[["self"],["i32"]],["self"]]],[11,"mul","","",54,[[["self"],["i32"]],["self"]]],[11,"div","","",54,[[["self"],["i32"]],["self"]]],[11,"rem","","",54,[[["self"],["i32"]],["self"]]],[11,"add_assign","","",54,[[["self"],["i32"]]]],[11,"sub_assign","","",54,[[["self"],["i32"]]]],[11,"mul_assign","","",54,[[["self"],["i32"]]]],[11,"div_assign","","",54,[[["self"],["i32"]]]],[11,"rem_assign","","",54,[[["self"],["i32"]]]],[11,"not","","",54,[[["self"]],["self"]]],[11,"bitxor","","",54,[[["self"],["self"]],["self"]]],[11,"bitand","","",54,[[["self"],["self"]],["self"]]],[11,"bitor","","",54,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",54,[[["self"],["self"]]]],[11,"bitor_assign","","",54,[[["self"],["self"]]]],[11,"bitxor_assign","","",54,[[["self"],["self"]]]],[11,"bitxor","","",54,[[["self"],["i32"]],["self"]]],[11,"bitand","","",54,[[["self"],["i32"]],["self"]]],[11,"bitor","","",54,[[["self"],["i32"]],["self"]]],[11,"bitand_assign","","",54,[[["self"],["i32"]]]],[11,"bitor_assign","","",54,[[["self"],["i32"]]]],[11,"bitxor_assign","","",54,[[["self"],["i32"]]]],[11,"shl","","",54,[[["self"],["self"]],["self"]]],[11,"shr","","",54,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",54,[[["self"],["self"]]]],[11,"shr_assign","","",54,[[["self"],["self"]]]],[11,"shl","","",54,[[["self"],["u32"]],["self"]]],[11,"shr","","",54,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",54,[[["self"],["u32"]]]],[11,"shr_assign","","",54,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",54,[[["self"],["i32x8"]],["i32x8"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",54,[[["self"],["i32x8"]],["i32x8"]]],[11,"neg","","",54,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",54,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",54,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",54,[[["self"]],["i32"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",54,[[["self"]],["i32"]]],[11,"sum","","",54,[[["i"]],["i32x8"]]],[11,"product","","",54,[[["i"]],["i32x8"]]],[11,"sum","","",54,[[["i"]],["i32x8"]]],[11,"product","","",54,[[["i"]],["i32x8"]]],[11,"max_element","","Largest vector element value.",54,[[["self"]],["i32"]]],[11,"min_element","","Smallest vector element value.",54,[[["self"]],["i32"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",54,[[["self"]],["i32"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",54,[[["self"]],["i32"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",54,[[["self"]],["i32"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"from","","",54,N],[11,"from","","",54,[[["i8x8"]],["self"]]],[11,"from","","",54,[[["u8x8"]],["self"]]],[11,"from","","",54,[[["i16x8"]],["self"]]],[11,"from","","",54,[[["u16x8"]],["self"]]],[11,"default","","",54,[[],["self"]]],[11,"hash","","",54,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",54,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",54,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",54,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",54,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",54,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",54,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",54,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",54,N],[11,"swap_bytes","","Reverses the byte order of the vector.",54,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",54,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",54,[[["self"]],["self"]]],[11,"eq","","",54,[[["self"],["self"]],["bool"]]],[11,"ne","","",54,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",54,[[["self"],["self"]],["m32x8"]]],[11,"ne","","Lane-wise inequality comparison.",54,[[["self"],["self"]],["m32x8"]]],[11,"lt","","Lane-wise less-than comparison.",54,[[["self"],["self"]],["m32x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",54,[[["self"],["self"]],["m32x8"]]],[11,"gt","","Lane-wise greater-than comparison.",54,[[["self"],["self"]],["m32x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",54,[[["self"],["self"]],["m32x8"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",54,[[["self"]],["lexicographicallyordered",["i32x8"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",54,[[["self"]],["lexicographicallyordered",["i32x8"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",55,[[["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",55,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",55,[[["u32"]],["self"]]],[11,"extract","","Extracts the value at `index`.",55,[[["self"],["usize"]],["u32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",55,[[["self"],["usize"]],["u32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",55,[[["self"],["usize"],["u32"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",55,[[["self"],["usize"],["u32"]],["self"]]],[11,"add","","",55,[[["self"],["self"]],["self"]]],[11,"sub","","",55,[[["self"],["self"]],["self"]]],[11,"mul","","",55,[[["self"],["self"]],["self"]]],[11,"div","","",55,[[["self"],["self"]],["self"]]],[11,"rem","","",55,[[["self"],["self"]],["self"]]],[11,"add_assign","","",55,[[["self"],["self"]]]],[11,"sub_assign","","",55,[[["self"],["self"]]]],[11,"mul_assign","","",55,[[["self"],["self"]]]],[11,"div_assign","","",55,[[["self"],["self"]]]],[11,"rem_assign","","",55,[[["self"],["self"]]]],[11,"add","","",55,[[["self"],["u32"]],["self"]]],[11,"sub","","",55,[[["self"],["u32"]],["self"]]],[11,"mul","","",55,[[["self"],["u32"]],["self"]]],[11,"div","","",55,[[["self"],["u32"]],["self"]]],[11,"rem","","",55,[[["self"],["u32"]],["self"]]],[11,"add_assign","","",55,[[["self"],["u32"]]]],[11,"sub_assign","","",55,[[["self"],["u32"]]]],[11,"mul_assign","","",55,[[["self"],["u32"]]]],[11,"div_assign","","",55,[[["self"],["u32"]]]],[11,"rem_assign","","",55,[[["self"],["u32"]]]],[11,"not","","",55,[[["self"]],["self"]]],[11,"bitxor","","",55,[[["self"],["self"]],["self"]]],[11,"bitand","","",55,[[["self"],["self"]],["self"]]],[11,"bitor","","",55,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",55,[[["self"],["self"]]]],[11,"bitor_assign","","",55,[[["self"],["self"]]]],[11,"bitxor_assign","","",55,[[["self"],["self"]]]],[11,"bitxor","","",55,[[["self"],["u32"]],["self"]]],[11,"bitand","","",55,[[["self"],["u32"]],["self"]]],[11,"bitor","","",55,[[["self"],["u32"]],["self"]]],[11,"bitand_assign","","",55,[[["self"],["u32"]]]],[11,"bitor_assign","","",55,[[["self"],["u32"]]]],[11,"bitxor_assign","","",55,[[["self"],["u32"]]]],[11,"shl","","",55,[[["self"],["self"]],["self"]]],[11,"shr","","",55,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",55,[[["self"],["self"]]]],[11,"shr_assign","","",55,[[["self"],["self"]]]],[11,"shl","","",55,[[["self"],["u32"]],["self"]]],[11,"shr","","",55,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",55,[[["self"],["u32"]]]],[11,"shr_assign","","",55,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",55,[[["self"],["u32x8"]],["u32x8"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",55,[[["self"],["u32x8"]],["u32x8"]]],[11,"min","","Minimum of two vectors.",55,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",55,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",55,[[["self"]],["u32"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",55,[[["self"]],["u32"]]],[11,"sum","","",55,[[["i"]],["u32x8"]]],[11,"product","","",55,[[["i"]],["u32x8"]]],[11,"sum","","",55,[[["i"]],["u32x8"]]],[11,"product","","",55,[[["i"]],["u32x8"]]],[11,"max_element","","Largest vector element value.",55,[[["self"]],["u32"]]],[11,"min_element","","Smallest vector element value.",55,[[["self"]],["u32"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",55,[[["self"]],["u32"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",55,[[["self"]],["u32"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",55,[[["self"]],["u32"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"from","","",55,N],[11,"from","","",55,[[["u8x8"]],["self"]]],[11,"from","","",55,[[["u16x8"]],["self"]]],[11,"default","","",55,[[],["self"]]],[11,"hash","","",55,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",55,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",55,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",55,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",55,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",55,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",55,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",55,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",55,N],[11,"swap_bytes","","Reverses the byte order of the vector.",55,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",55,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",55,[[["self"]],["self"]]],[11,"shuffle1_dyn","","Shuffle vector elements according to `indices`.",55,[[["self"],["self"]],["self"]]],[11,"eq","","",55,[[["self"],["self"]],["bool"]]],[11,"ne","","",55,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",55,[[["self"],["self"]],["m32x8"]]],[11,"ne","","Lane-wise inequality comparison.",55,[[["self"],["self"]],["m32x8"]]],[11,"lt","","Lane-wise less-than comparison.",55,[[["self"],["self"]],["m32x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",55,[[["self"],["self"]],["m32x8"]]],[11,"gt","","Lane-wise greater-than comparison.",55,[[["self"],["self"]],["m32x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",55,[[["self"],["self"]],["m32x8"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",55,[[["self"]],["lexicographicallyordered",["u32x8"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",55,[[["self"]],["lexicographicallyordered",["u32x8"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",56,[[["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",56,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",56,[[["f32"]],["self"]]],[11,"extract","","Extracts the value at `index`.",56,[[["self"],["usize"]],["f32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",56,[[["self"],["usize"]],["f32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",56,[[["self"],["usize"],["f32"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",56,[[["self"],["usize"],["f32"]],["self"]]],[11,"add","","",56,[[["self"],["self"]],["self"]]],[11,"sub","","",56,[[["self"],["self"]],["self"]]],[11,"mul","","",56,[[["self"],["self"]],["self"]]],[11,"div","","",56,[[["self"],["self"]],["self"]]],[11,"rem","","",56,[[["self"],["self"]],["self"]]],[11,"add_assign","","",56,[[["self"],["self"]]]],[11,"sub_assign","","",56,[[["self"],["self"]]]],[11,"mul_assign","","",56,[[["self"],["self"]]]],[11,"div_assign","","",56,[[["self"],["self"]]]],[11,"rem_assign","","",56,[[["self"],["self"]]]],[11,"add","","",56,[[["self"],["f32"]],["self"]]],[11,"sub","","",56,[[["self"],["f32"]],["self"]]],[11,"mul","","",56,[[["self"],["f32"]],["self"]]],[11,"div","","",56,[[["self"],["f32"]],["self"]]],[11,"rem","","",56,[[["self"],["f32"]],["self"]]],[11,"add_assign","","",56,[[["self"],["f32"]]]],[11,"sub_assign","","",56,[[["self"],["f32"]]]],[11,"mul_assign","","",56,[[["self"],["f32"]]]],[11,"div_assign","","",56,[[["self"],["f32"]]]],[11,"rem_assign","","",56,[[["self"],["f32"]]]],[11,"neg","","",56,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",56,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",56,[[["self"],["self"]],["self"]]],[11,"sum","","Horizontal sum of the vector elements.",56,[[["self"]],["f32"]]],[11,"product","","Horizontal product of the vector elements.",56,[[["self"]],["f32"]]],[11,"sum","","",56,[[["i"]],["f32x8"]]],[11,"product","","",56,[[["i"]],["f32x8"]]],[11,"sum","","",56,[[["i"]],["f32x8"]]],[11,"product","","",56,[[["i"]],["f32x8"]]],[11,"max_element","","Largest vector element value.",56,[[["self"]],["f32"]]],[11,"min_element","","Smallest vector element value.",56,[[["self"]],["f32"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"from","","",56,N],[11,"from","","",56,[[["i8x8"]],["self"]]],[11,"from","","",56,[[["u8x8"]],["self"]]],[11,"from","","",56,[[["i16x8"]],["self"]]],[11,"from","","",56,[[["u16x8"]],["self"]]],[11,"default","","",56,[[],["self"]]],[11,"eq","","",56,[[["self"],["self"]],["bool"]]],[11,"ne","","",56,[[["self"],["self"]],["bool"]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",56,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",56,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",56,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",56,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",56,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",56,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",56,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",56,N],[11,"abs","","Absolute value.",56,[[["self"]],["self"]]],[11,"cos","","Cosine.",56,[[["self"]],["self"]]],[11,"cos_pi","","Cosine of `self * PI`.",56,[[["self"]],["self"]]],[11,"exp","","Returns the exponential function of `self`: `e^(self)`.",56,[[["self"]],["self"]]],[11,"ln","","Returns the natural logarithm of `self`.",56,[[["self"]],["self"]]],[11,"mul_add","","Fused multiply add: `self * y + z`",56,[[["self"],["self"],["self"]],["self"]]],[11,"mul_adde","","Fused multiply add estimate: ~= `self * y + z`",56,[[["self"],["self"],["self"]],["self"]]],[11,"powf","","Raises `self` number to the floating point power of `x`.",56,[[["self"],["self"]],["self"]]],[11,"recpre","","Reciprocal estimate: `~= 1. / self`.",56,[[["self"]],["self"]]],[11,"rsqrte","","Reciprocal square-root estimate: `~= 1. / self.sqrt()`.",56,[[["self"]],["self"]]],[11,"sin","","Sine.",56,[[["self"]],["self"]]],[11,"sin_pi","","Sine of `self * PI`.",56,[[["self"]],["self"]]],[11,"sin_cos_pi","","Sine and cosine of `self * PI`.",56,N],[11,"sqrt","","",56,[[["self"]],["self"]]],[11,"sqrte","","Square-root estimate.",56,[[["self"]],["self"]]],[11,"eq","","Lane-wise equality comparison.",56,[[["self"],["self"]],["m32x8"]]],[11,"ne","","Lane-wise inequality comparison.",56,[[["self"],["self"]],["m32x8"]]],[11,"lt","","Lane-wise less-than comparison.",56,[[["self"],["self"]],["m32x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",56,[[["self"],["self"]],["m32x8"]]],[11,"gt","","Lane-wise greater-than comparison.",56,[[["self"],["self"]],["m32x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",56,[[["self"],["self"]],["m32x8"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",57,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",57,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",57,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",57,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",57,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",57,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",57,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",57,[[["self"]],["self"]]],[11,"bitxor","","",57,[[["self"],["self"]],["self"]]],[11,"bitand","","",57,[[["self"],["self"]],["self"]]],[11,"bitor","","",57,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",57,[[["self"],["self"]]]],[11,"bitor_assign","","",57,[[["self"],["self"]]]],[11,"bitxor_assign","","",57,[[["self"],["self"]]]],[11,"bitxor","","",57,[[["self"],["bool"]],["self"]]],[11,"bitand","","",57,[[["self"],["bool"]],["self"]]],[11,"bitor","","",57,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",57,[[["self"],["bool"]]]],[11,"bitor_assign","","",57,[[["self"],["bool"]]]],[11,"bitxor_assign","","",57,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",57,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",57,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",57,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",57,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",57,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",57,[[["self"]],["bool"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"from","","",57,N],[11,"from","","",57,[[["m8x8"]],["self"]]],[11,"from","","",57,[[["m16x8"]],["self"]]],[11,"default","","",57,[[],["self"]]],[11,"eq","","",57,[[["self"],["self"]],["bool"]]],[11,"ne","","",57,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",57,[[["self"],["self"]],["m32x8"]]],[11,"ne","","Lane-wise inequality comparison.",57,[[["self"],["self"]],["m32x8"]]],[11,"lt","","Lane-wise less-than comparison.",57,[[["self"],["self"]],["m32x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",57,[[["self"],["self"]],["m32x8"]]],[11,"gt","","Lane-wise greater-than comparison.",57,[[["self"],["self"]],["m32x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",57,[[["self"],["self"]],["m32x8"]]],[11,"select","","Selects elements of `a` and `b` using mask.",57,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",57,[[["self"]],["lexicographicallyordered",["m32x8"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",57,[[["self"]],["lexicographicallyordered",["m32x8"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",58,[[["i64"],["i64"],["i64"],["i64"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",58,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",58,[[["i64"]],["self"]]],[11,"extract","","Extracts the value at `index`.",58,[[["self"],["usize"]],["i64"]]],[11,"extract_unchecked","","Extracts the value at `index`.",58,[[["self"],["usize"]],["i64"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",58,[[["self"],["usize"],["i64"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",58,[[["self"],["usize"],["i64"]],["self"]]],[11,"add","","",58,[[["self"],["self"]],["self"]]],[11,"sub","","",58,[[["self"],["self"]],["self"]]],[11,"mul","","",58,[[["self"],["self"]],["self"]]],[11,"div","","",58,[[["self"],["self"]],["self"]]],[11,"rem","","",58,[[["self"],["self"]],["self"]]],[11,"add_assign","","",58,[[["self"],["self"]]]],[11,"sub_assign","","",58,[[["self"],["self"]]]],[11,"mul_assign","","",58,[[["self"],["self"]]]],[11,"div_assign","","",58,[[["self"],["self"]]]],[11,"rem_assign","","",58,[[["self"],["self"]]]],[11,"add","","",58,[[["self"],["i64"]],["self"]]],[11,"sub","","",58,[[["self"],["i64"]],["self"]]],[11,"mul","","",58,[[["self"],["i64"]],["self"]]],[11,"div","","",58,[[["self"],["i64"]],["self"]]],[11,"rem","","",58,[[["self"],["i64"]],["self"]]],[11,"add_assign","","",58,[[["self"],["i64"]]]],[11,"sub_assign","","",58,[[["self"],["i64"]]]],[11,"mul_assign","","",58,[[["self"],["i64"]]]],[11,"div_assign","","",58,[[["self"],["i64"]]]],[11,"rem_assign","","",58,[[["self"],["i64"]]]],[11,"not","","",58,[[["self"]],["self"]]],[11,"bitxor","","",58,[[["self"],["self"]],["self"]]],[11,"bitand","","",58,[[["self"],["self"]],["self"]]],[11,"bitor","","",58,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",58,[[["self"],["self"]]]],[11,"bitor_assign","","",58,[[["self"],["self"]]]],[11,"bitxor_assign","","",58,[[["self"],["self"]]]],[11,"bitxor","","",58,[[["self"],["i64"]],["self"]]],[11,"bitand","","",58,[[["self"],["i64"]],["self"]]],[11,"bitor","","",58,[[["self"],["i64"]],["self"]]],[11,"bitand_assign","","",58,[[["self"],["i64"]]]],[11,"bitor_assign","","",58,[[["self"],["i64"]]]],[11,"bitxor_assign","","",58,[[["self"],["i64"]]]],[11,"shl","","",58,[[["self"],["self"]],["self"]]],[11,"shr","","",58,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",58,[[["self"],["self"]]]],[11,"shr_assign","","",58,[[["self"],["self"]]]],[11,"shl","","",58,[[["self"],["u32"]],["self"]]],[11,"shr","","",58,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",58,[[["self"],["u32"]]]],[11,"shr_assign","","",58,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",58,[[["self"],["i64x4"]],["i64x4"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",58,[[["self"],["i64x4"]],["i64x4"]]],[11,"neg","","",58,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",58,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",58,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",58,[[["self"]],["i64"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",58,[[["self"]],["i64"]]],[11,"sum","","",58,[[["i"]],["i64x4"]]],[11,"product","","",58,[[["i"]],["i64x4"]]],[11,"sum","","",58,[[["i"]],["i64x4"]]],[11,"product","","",58,[[["i"]],["i64x4"]]],[11,"max_element","","Largest vector element value.",58,[[["self"]],["i64"]]],[11,"min_element","","Smallest vector element value.",58,[[["self"]],["i64"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",58,[[["self"]],["i64"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",58,[[["self"]],["i64"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",58,[[["self"]],["i64"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"from","","",58,N],[11,"from","","",58,[[["i8x4"]],["self"]]],[11,"from","","",58,[[["u8x4"]],["self"]]],[11,"from","","",58,[[["i16x4"]],["self"]]],[11,"from","","",58,[[["u16x4"]],["self"]]],[11,"from","","",58,[[["i32x4"]],["self"]]],[11,"from","","",58,[[["u32x4"]],["self"]]],[11,"default","","",58,[[],["self"]]],[11,"hash","","",58,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",58,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",58,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",58,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",58,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",58,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",58,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",58,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",58,N],[11,"swap_bytes","","Reverses the byte order of the vector.",58,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",58,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",58,[[["self"]],["self"]]],[11,"eq","","",58,[[["self"],["self"]],["bool"]]],[11,"ne","","",58,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",58,[[["self"],["self"]],["m64x4"]]],[11,"ne","","Lane-wise inequality comparison.",58,[[["self"],["self"]],["m64x4"]]],[11,"lt","","Lane-wise less-than comparison.",58,[[["self"],["self"]],["m64x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",58,[[["self"],["self"]],["m64x4"]]],[11,"gt","","Lane-wise greater-than comparison.",58,[[["self"],["self"]],["m64x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",58,[[["self"],["self"]],["m64x4"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",58,[[["self"]],["lexicographicallyordered",["i64x4"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",58,[[["self"]],["lexicographicallyordered",["i64x4"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",59,[[["u64"],["u64"],["u64"],["u64"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",59,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",59,[[["u64"]],["self"]]],[11,"extract","","Extracts the value at `index`.",59,[[["self"],["usize"]],["u64"]]],[11,"extract_unchecked","","Extracts the value at `index`.",59,[[["self"],["usize"]],["u64"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",59,[[["self"],["usize"],["u64"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",59,[[["self"],["usize"],["u64"]],["self"]]],[11,"add","","",59,[[["self"],["self"]],["self"]]],[11,"sub","","",59,[[["self"],["self"]],["self"]]],[11,"mul","","",59,[[["self"],["self"]],["self"]]],[11,"div","","",59,[[["self"],["self"]],["self"]]],[11,"rem","","",59,[[["self"],["self"]],["self"]]],[11,"add_assign","","",59,[[["self"],["self"]]]],[11,"sub_assign","","",59,[[["self"],["self"]]]],[11,"mul_assign","","",59,[[["self"],["self"]]]],[11,"div_assign","","",59,[[["self"],["self"]]]],[11,"rem_assign","","",59,[[["self"],["self"]]]],[11,"add","","",59,[[["self"],["u64"]],["self"]]],[11,"sub","","",59,[[["self"],["u64"]],["self"]]],[11,"mul","","",59,[[["self"],["u64"]],["self"]]],[11,"div","","",59,[[["self"],["u64"]],["self"]]],[11,"rem","","",59,[[["self"],["u64"]],["self"]]],[11,"add_assign","","",59,[[["self"],["u64"]]]],[11,"sub_assign","","",59,[[["self"],["u64"]]]],[11,"mul_assign","","",59,[[["self"],["u64"]]]],[11,"div_assign","","",59,[[["self"],["u64"]]]],[11,"rem_assign","","",59,[[["self"],["u64"]]]],[11,"not","","",59,[[["self"]],["self"]]],[11,"bitxor","","",59,[[["self"],["self"]],["self"]]],[11,"bitand","","",59,[[["self"],["self"]],["self"]]],[11,"bitor","","",59,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",59,[[["self"],["self"]]]],[11,"bitor_assign","","",59,[[["self"],["self"]]]],[11,"bitxor_assign","","",59,[[["self"],["self"]]]],[11,"bitxor","","",59,[[["self"],["u64"]],["self"]]],[11,"bitand","","",59,[[["self"],["u64"]],["self"]]],[11,"bitor","","",59,[[["self"],["u64"]],["self"]]],[11,"bitand_assign","","",59,[[["self"],["u64"]]]],[11,"bitor_assign","","",59,[[["self"],["u64"]]]],[11,"bitxor_assign","","",59,[[["self"],["u64"]]]],[11,"shl","","",59,[[["self"],["self"]],["self"]]],[11,"shr","","",59,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",59,[[["self"],["self"]]]],[11,"shr_assign","","",59,[[["self"],["self"]]]],[11,"shl","","",59,[[["self"],["u32"]],["self"]]],[11,"shr","","",59,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",59,[[["self"],["u32"]]]],[11,"shr_assign","","",59,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",59,[[["self"],["u64x4"]],["u64x4"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",59,[[["self"],["u64x4"]],["u64x4"]]],[11,"min","","Minimum of two vectors.",59,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",59,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",59,[[["self"]],["u64"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",59,[[["self"]],["u64"]]],[11,"sum","","",59,[[["i"]],["u64x4"]]],[11,"product","","",59,[[["i"]],["u64x4"]]],[11,"sum","","",59,[[["i"]],["u64x4"]]],[11,"product","","",59,[[["i"]],["u64x4"]]],[11,"max_element","","Largest vector element value.",59,[[["self"]],["u64"]]],[11,"min_element","","Smallest vector element value.",59,[[["self"]],["u64"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",59,[[["self"]],["u64"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",59,[[["self"]],["u64"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",59,[[["self"]],["u64"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"from","","",59,N],[11,"from","","",59,[[["u8x4"]],["self"]]],[11,"from","","",59,[[["u16x4"]],["self"]]],[11,"from","","",59,[[["u32x4"]],["self"]]],[11,"default","","",59,[[],["self"]]],[11,"hash","","",59,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",59,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",59,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",59,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",59,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",59,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",59,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",59,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",59,N],[11,"swap_bytes","","Reverses the byte order of the vector.",59,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",59,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",59,[[["self"]],["self"]]],[11,"shuffle1_dyn","","Shuffle vector elements according to `indices`.",59,[[["self"],["self"]],["self"]]],[11,"eq","","",59,[[["self"],["self"]],["bool"]]],[11,"ne","","",59,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",59,[[["self"],["self"]],["m64x4"]]],[11,"ne","","Lane-wise inequality comparison.",59,[[["self"],["self"]],["m64x4"]]],[11,"lt","","Lane-wise less-than comparison.",59,[[["self"],["self"]],["m64x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",59,[[["self"],["self"]],["m64x4"]]],[11,"gt","","Lane-wise greater-than comparison.",59,[[["self"],["self"]],["m64x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",59,[[["self"],["self"]],["m64x4"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",59,[[["self"]],["lexicographicallyordered",["u64x4"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",59,[[["self"]],["lexicographicallyordered",["u64x4"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",60,[[["f64"],["f64"],["f64"],["f64"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",60,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",60,[[["f64"]],["self"]]],[11,"extract","","Extracts the value at `index`.",60,[[["self"],["usize"]],["f64"]]],[11,"extract_unchecked","","Extracts the value at `index`.",60,[[["self"],["usize"]],["f64"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",60,[[["self"],["usize"],["f64"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",60,[[["self"],["usize"],["f64"]],["self"]]],[11,"add","","",60,[[["self"],["self"]],["self"]]],[11,"sub","","",60,[[["self"],["self"]],["self"]]],[11,"mul","","",60,[[["self"],["self"]],["self"]]],[11,"div","","",60,[[["self"],["self"]],["self"]]],[11,"rem","","",60,[[["self"],["self"]],["self"]]],[11,"add_assign","","",60,[[["self"],["self"]]]],[11,"sub_assign","","",60,[[["self"],["self"]]]],[11,"mul_assign","","",60,[[["self"],["self"]]]],[11,"div_assign","","",60,[[["self"],["self"]]]],[11,"rem_assign","","",60,[[["self"],["self"]]]],[11,"add","","",60,[[["self"],["f64"]],["self"]]],[11,"sub","","",60,[[["self"],["f64"]],["self"]]],[11,"mul","","",60,[[["self"],["f64"]],["self"]]],[11,"div","","",60,[[["self"],["f64"]],["self"]]],[11,"rem","","",60,[[["self"],["f64"]],["self"]]],[11,"add_assign","","",60,[[["self"],["f64"]]]],[11,"sub_assign","","",60,[[["self"],["f64"]]]],[11,"mul_assign","","",60,[[["self"],["f64"]]]],[11,"div_assign","","",60,[[["self"],["f64"]]]],[11,"rem_assign","","",60,[[["self"],["f64"]]]],[11,"neg","","",60,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",60,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",60,[[["self"],["self"]],["self"]]],[11,"sum","","Horizontal sum of the vector elements.",60,[[["self"]],["f64"]]],[11,"product","","Horizontal product of the vector elements.",60,[[["self"]],["f64"]]],[11,"sum","","",60,[[["i"]],["f64x4"]]],[11,"product","","",60,[[["i"]],["f64x4"]]],[11,"sum","","",60,[[["i"]],["f64x4"]]],[11,"product","","",60,[[["i"]],["f64x4"]]],[11,"max_element","","Largest vector element value.",60,[[["self"]],["f64"]]],[11,"min_element","","Smallest vector element value.",60,[[["self"]],["f64"]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"from","","",60,N],[11,"from","","",60,[[["i8x4"]],["self"]]],[11,"from","","",60,[[["u8x4"]],["self"]]],[11,"from","","",60,[[["i16x4"]],["self"]]],[11,"from","","",60,[[["u16x4"]],["self"]]],[11,"from","","",60,[[["i32x4"]],["self"]]],[11,"from","","",60,[[["u32x4"]],["self"]]],[11,"from","","",60,[[["f32x4"]],["self"]]],[11,"default","","",60,[[],["self"]]],[11,"eq","","",60,[[["self"],["self"]],["bool"]]],[11,"ne","","",60,[[["self"],["self"]],["bool"]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",60,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",60,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",60,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",60,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",60,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",60,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",60,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",60,N],[11,"abs","","Absolute value.",60,[[["self"]],["self"]]],[11,"cos","","Cosine.",60,[[["self"]],["self"]]],[11,"cos_pi","","Cosine of `self * PI`.",60,[[["self"]],["self"]]],[11,"exp","","Returns the exponential function of `self`: `e^(self)`.",60,[[["self"]],["self"]]],[11,"ln","","Returns the natural logarithm of `self`.",60,[[["self"]],["self"]]],[11,"mul_add","","Fused multiply add: `self * y + z`",60,[[["self"],["self"],["self"]],["self"]]],[11,"mul_adde","","Fused multiply add estimate: ~= `self * y + z`",60,[[["self"],["self"],["self"]],["self"]]],[11,"powf","","Raises `self` number to the floating point power of `x`.",60,[[["self"],["self"]],["self"]]],[11,"recpre","","Reciprocal estimate: `~= 1. / self`.",60,[[["self"]],["self"]]],[11,"rsqrte","","Reciprocal square-root estimate: `~= 1. / self.sqrt()`.",60,[[["self"]],["self"]]],[11,"sin","","Sine.",60,[[["self"]],["self"]]],[11,"sin_pi","","Sine of `self * PI`.",60,[[["self"]],["self"]]],[11,"sin_cos_pi","","Sine and cosine of `self * PI`.",60,N],[11,"sqrt","","",60,[[["self"]],["self"]]],[11,"sqrte","","Square-root estimate.",60,[[["self"]],["self"]]],[11,"eq","","Lane-wise equality comparison.",60,[[["self"],["self"]],["m64x4"]]],[11,"ne","","Lane-wise inequality comparison.",60,[[["self"],["self"]],["m64x4"]]],[11,"lt","","Lane-wise less-than comparison.",60,[[["self"],["self"]],["m64x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",60,[[["self"],["self"]],["m64x4"]]],[11,"gt","","Lane-wise greater-than comparison.",60,[[["self"],["self"]],["m64x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",60,[[["self"],["self"]],["m64x4"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",61,[[["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",61,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",61,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",61,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",61,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",61,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",61,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",61,[[["self"]],["self"]]],[11,"bitxor","","",61,[[["self"],["self"]],["self"]]],[11,"bitand","","",61,[[["self"],["self"]],["self"]]],[11,"bitor","","",61,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",61,[[["self"],["self"]]]],[11,"bitor_assign","","",61,[[["self"],["self"]]]],[11,"bitxor_assign","","",61,[[["self"],["self"]]]],[11,"bitxor","","",61,[[["self"],["bool"]],["self"]]],[11,"bitand","","",61,[[["self"],["bool"]],["self"]]],[11,"bitor","","",61,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",61,[[["self"],["bool"]]]],[11,"bitor_assign","","",61,[[["self"],["bool"]]]],[11,"bitxor_assign","","",61,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",61,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",61,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",61,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",61,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",61,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",61,[[["self"]],["bool"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"from","","",61,N],[11,"from","","",61,[[["m8x4"]],["self"]]],[11,"from","","",61,[[["m16x4"]],["self"]]],[11,"from","","",61,[[["m32x4"]],["self"]]],[11,"default","","",61,[[],["self"]]],[11,"eq","","",61,[[["self"],["self"]],["bool"]]],[11,"ne","","",61,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",61,[[["self"],["self"]],["m64x4"]]],[11,"ne","","Lane-wise inequality comparison.",61,[[["self"],["self"]],["m64x4"]]],[11,"lt","","Lane-wise less-than comparison.",61,[[["self"],["self"]],["m64x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",61,[[["self"],["self"]],["m64x4"]]],[11,"gt","","Lane-wise greater-than comparison.",61,[[["self"],["self"]],["m64x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",61,[[["self"],["self"]],["m64x4"]]],[11,"select","","Selects elements of `a` and `b` using mask.",61,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",61,[[["self"]],["lexicographicallyordered",["m64x4"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",61,[[["self"]],["lexicographicallyordered",["m64x4"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",62,[[["i128"],["i128"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",62,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",62,[[["i128"]],["self"]]],[11,"extract","","Extracts the value at `index`.",62,[[["self"],["usize"]],["i128"]]],[11,"extract_unchecked","","Extracts the value at `index`.",62,[[["self"],["usize"]],["i128"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",62,[[["self"],["usize"],["i128"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",62,[[["self"],["usize"],["i128"]],["self"]]],[11,"add","","",62,[[["self"],["self"]],["self"]]],[11,"sub","","",62,[[["self"],["self"]],["self"]]],[11,"mul","","",62,[[["self"],["self"]],["self"]]],[11,"div","","",62,[[["self"],["self"]],["self"]]],[11,"rem","","",62,[[["self"],["self"]],["self"]]],[11,"add_assign","","",62,[[["self"],["self"]]]],[11,"sub_assign","","",62,[[["self"],["self"]]]],[11,"mul_assign","","",62,[[["self"],["self"]]]],[11,"div_assign","","",62,[[["self"],["self"]]]],[11,"rem_assign","","",62,[[["self"],["self"]]]],[11,"add","","",62,[[["self"],["i128"]],["self"]]],[11,"sub","","",62,[[["self"],["i128"]],["self"]]],[11,"mul","","",62,[[["self"],["i128"]],["self"]]],[11,"div","","",62,[[["self"],["i128"]],["self"]]],[11,"rem","","",62,[[["self"],["i128"]],["self"]]],[11,"add_assign","","",62,[[["self"],["i128"]]]],[11,"sub_assign","","",62,[[["self"],["i128"]]]],[11,"mul_assign","","",62,[[["self"],["i128"]]]],[11,"div_assign","","",62,[[["self"],["i128"]]]],[11,"rem_assign","","",62,[[["self"],["i128"]]]],[11,"not","","",62,[[["self"]],["self"]]],[11,"bitxor","","",62,[[["self"],["self"]],["self"]]],[11,"bitand","","",62,[[["self"],["self"]],["self"]]],[11,"bitor","","",62,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",62,[[["self"],["self"]]]],[11,"bitor_assign","","",62,[[["self"],["self"]]]],[11,"bitxor_assign","","",62,[[["self"],["self"]]]],[11,"bitxor","","",62,[[["self"],["i128"]],["self"]]],[11,"bitand","","",62,[[["self"],["i128"]],["self"]]],[11,"bitor","","",62,[[["self"],["i128"]],["self"]]],[11,"bitand_assign","","",62,[[["self"],["i128"]]]],[11,"bitor_assign","","",62,[[["self"],["i128"]]]],[11,"bitxor_assign","","",62,[[["self"],["i128"]]]],[11,"shl","","",62,[[["self"],["self"]],["self"]]],[11,"shr","","",62,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",62,[[["self"],["self"]]]],[11,"shr_assign","","",62,[[["self"],["self"]]]],[11,"shl","","",62,[[["self"],["u32"]],["self"]]],[11,"shr","","",62,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",62,[[["self"],["u32"]]]],[11,"shr_assign","","",62,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",62,[[["self"],["i128x2"]],["i128x2"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",62,[[["self"],["i128x2"]],["i128x2"]]],[11,"neg","","",62,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",62,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",62,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",62,[[["self"]],["i128"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",62,[[["self"]],["i128"]]],[11,"sum","","",62,[[["i"]],["i128x2"]]],[11,"product","","",62,[[["i"]],["i128x2"]]],[11,"sum","","",62,[[["i"]],["i128x2"]]],[11,"product","","",62,[[["i"]],["i128x2"]]],[11,"max_element","","Largest vector element value.",62,[[["self"]],["i128"]]],[11,"min_element","","Smallest vector element value.",62,[[["self"]],["i128"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",62,[[["self"]],["i128"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",62,[[["self"]],["i128"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",62,[[["self"]],["i128"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"from","","",62,N],[11,"from","","",62,[[["i8x2"]],["self"]]],[11,"from","","",62,[[["u8x2"]],["self"]]],[11,"from","","",62,[[["i16x2"]],["self"]]],[11,"from","","",62,[[["u16x2"]],["self"]]],[11,"from","","",62,[[["i32x2"]],["self"]]],[11,"from","","",62,[[["u32x2"]],["self"]]],[11,"from","","",62,[[["i64x2"]],["self"]]],[11,"from","","",62,[[["u64x2"]],["self"]]],[11,"default","","",62,[[],["self"]]],[11,"hash","","",62,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",62,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",62,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",62,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",62,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",62,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",62,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",62,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",62,N],[11,"swap_bytes","","Reverses the byte order of the vector.",62,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",62,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",62,[[["self"]],["self"]]],[11,"eq","","",62,[[["self"],["self"]],["bool"]]],[11,"ne","","",62,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",62,[[["self"],["self"]],["m128x2"]]],[11,"ne","","Lane-wise inequality comparison.",62,[[["self"],["self"]],["m128x2"]]],[11,"lt","","Lane-wise less-than comparison.",62,[[["self"],["self"]],["m128x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",62,[[["self"],["self"]],["m128x2"]]],[11,"gt","","Lane-wise greater-than comparison.",62,[[["self"],["self"]],["m128x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",62,[[["self"],["self"]],["m128x2"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",62,[[["self"]],["lexicographicallyordered",["i128x2"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",62,[[["self"]],["lexicographicallyordered",["i128x2"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",63,[[["u128"],["u128"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",63,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",63,[[["u128"]],["self"]]],[11,"extract","","Extracts the value at `index`.",63,[[["self"],["usize"]],["u128"]]],[11,"extract_unchecked","","Extracts the value at `index`.",63,[[["self"],["usize"]],["u128"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",63,[[["self"],["usize"],["u128"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",63,[[["self"],["usize"],["u128"]],["self"]]],[11,"add","","",63,[[["self"],["self"]],["self"]]],[11,"sub","","",63,[[["self"],["self"]],["self"]]],[11,"mul","","",63,[[["self"],["self"]],["self"]]],[11,"div","","",63,[[["self"],["self"]],["self"]]],[11,"rem","","",63,[[["self"],["self"]],["self"]]],[11,"add_assign","","",63,[[["self"],["self"]]]],[11,"sub_assign","","",63,[[["self"],["self"]]]],[11,"mul_assign","","",63,[[["self"],["self"]]]],[11,"div_assign","","",63,[[["self"],["self"]]]],[11,"rem_assign","","",63,[[["self"],["self"]]]],[11,"add","","",63,[[["self"],["u128"]],["self"]]],[11,"sub","","",63,[[["self"],["u128"]],["self"]]],[11,"mul","","",63,[[["self"],["u128"]],["self"]]],[11,"div","","",63,[[["self"],["u128"]],["self"]]],[11,"rem","","",63,[[["self"],["u128"]],["self"]]],[11,"add_assign","","",63,[[["self"],["u128"]]]],[11,"sub_assign","","",63,[[["self"],["u128"]]]],[11,"mul_assign","","",63,[[["self"],["u128"]]]],[11,"div_assign","","",63,[[["self"],["u128"]]]],[11,"rem_assign","","",63,[[["self"],["u128"]]]],[11,"not","","",63,[[["self"]],["self"]]],[11,"bitxor","","",63,[[["self"],["self"]],["self"]]],[11,"bitand","","",63,[[["self"],["self"]],["self"]]],[11,"bitor","","",63,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",63,[[["self"],["self"]]]],[11,"bitor_assign","","",63,[[["self"],["self"]]]],[11,"bitxor_assign","","",63,[[["self"],["self"]]]],[11,"bitxor","","",63,[[["self"],["u128"]],["self"]]],[11,"bitand","","",63,[[["self"],["u128"]],["self"]]],[11,"bitor","","",63,[[["self"],["u128"]],["self"]]],[11,"bitand_assign","","",63,[[["self"],["u128"]]]],[11,"bitor_assign","","",63,[[["self"],["u128"]]]],[11,"bitxor_assign","","",63,[[["self"],["u128"]]]],[11,"shl","","",63,[[["self"],["self"]],["self"]]],[11,"shr","","",63,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",63,[[["self"],["self"]]]],[11,"shr_assign","","",63,[[["self"],["self"]]]],[11,"shl","","",63,[[["self"],["u32"]],["self"]]],[11,"shr","","",63,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",63,[[["self"],["u32"]]]],[11,"shr_assign","","",63,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",63,[[["self"],["u128x2"]],["u128x2"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",63,[[["self"],["u128x2"]],["u128x2"]]],[11,"min","","Minimum of two vectors.",63,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",63,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",63,[[["self"]],["u128"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",63,[[["self"]],["u128"]]],[11,"sum","","",63,[[["i"]],["u128x2"]]],[11,"product","","",63,[[["i"]],["u128x2"]]],[11,"sum","","",63,[[["i"]],["u128x2"]]],[11,"product","","",63,[[["i"]],["u128x2"]]],[11,"max_element","","Largest vector element value.",63,[[["self"]],["u128"]]],[11,"min_element","","Smallest vector element value.",63,[[["self"]],["u128"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",63,[[["self"]],["u128"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",63,[[["self"]],["u128"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",63,[[["self"]],["u128"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"from","","",63,N],[11,"from","","",63,[[["u8x2"]],["self"]]],[11,"from","","",63,[[["u16x2"]],["self"]]],[11,"from","","",63,[[["u32x2"]],["self"]]],[11,"from","","",63,[[["u64x2"]],["self"]]],[11,"default","","",63,[[],["self"]]],[11,"hash","","",63,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",63,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",63,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",63,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",63,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",63,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",63,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",63,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",63,N],[11,"swap_bytes","","Reverses the byte order of the vector.",63,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",63,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",63,[[["self"]],["self"]]],[11,"shuffle1_dyn","","Shuffle vector elements according to `indices`.",63,[[["self"],["self"]],["self"]]],[11,"eq","","",63,[[["self"],["self"]],["bool"]]],[11,"ne","","",63,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",63,[[["self"],["self"]],["m128x2"]]],[11,"ne","","Lane-wise inequality comparison.",63,[[["self"],["self"]],["m128x2"]]],[11,"lt","","Lane-wise less-than comparison.",63,[[["self"],["self"]],["m128x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",63,[[["self"],["self"]],["m128x2"]]],[11,"gt","","Lane-wise greater-than comparison.",63,[[["self"],["self"]],["m128x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",63,[[["self"],["self"]],["m128x2"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",63,[[["self"]],["lexicographicallyordered",["u128x2"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",63,[[["self"]],["lexicographicallyordered",["u128x2"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",64,[[["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",64,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",64,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",64,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",64,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",64,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",64,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",64,[[["self"]],["self"]]],[11,"bitxor","","",64,[[["self"],["self"]],["self"]]],[11,"bitand","","",64,[[["self"],["self"]],["self"]]],[11,"bitor","","",64,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",64,[[["self"],["self"]]]],[11,"bitor_assign","","",64,[[["self"],["self"]]]],[11,"bitxor_assign","","",64,[[["self"],["self"]]]],[11,"bitxor","","",64,[[["self"],["bool"]],["self"]]],[11,"bitand","","",64,[[["self"],["bool"]],["self"]]],[11,"bitor","","",64,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",64,[[["self"],["bool"]]]],[11,"bitor_assign","","",64,[[["self"],["bool"]]]],[11,"bitxor_assign","","",64,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",64,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",64,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",64,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",64,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",64,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",64,[[["self"]],["bool"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"from","","",64,N],[11,"from","","",64,[[["m8x2"]],["self"]]],[11,"from","","",64,[[["m16x2"]],["self"]]],[11,"from","","",64,[[["m32x2"]],["self"]]],[11,"from","","",64,[[["m64x2"]],["self"]]],[11,"default","","",64,[[],["self"]]],[11,"eq","","",64,[[["self"],["self"]],["bool"]]],[11,"ne","","",64,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",64,[[["self"],["self"]],["m128x2"]]],[11,"ne","","Lane-wise inequality comparison.",64,[[["self"],["self"]],["m128x2"]]],[11,"lt","","Lane-wise less-than comparison.",64,[[["self"],["self"]],["m128x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",64,[[["self"],["self"]],["m128x2"]]],[11,"gt","","Lane-wise greater-than comparison.",64,[[["self"],["self"]],["m128x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",64,[[["self"],["self"]],["m128x2"]]],[11,"select","","Selects elements of `a` and `b` using mask.",64,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",64,[[["self"]],["lexicographicallyordered",["m128x2"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",64,[[["self"]],["lexicographicallyordered",["m128x2"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",68,[[["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",68,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",68,[[["i8"]],["self"]]],[11,"extract","","Extracts the value at `index`.",68,[[["self"],["usize"]],["i8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",68,[[["self"],["usize"]],["i8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",68,[[["self"],["usize"],["i8"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",68,[[["self"],["usize"],["i8"]],["self"]]],[11,"add","","",68,[[["self"],["self"]],["self"]]],[11,"sub","","",68,[[["self"],["self"]],["self"]]],[11,"mul","","",68,[[["self"],["self"]],["self"]]],[11,"div","","",68,[[["self"],["self"]],["self"]]],[11,"rem","","",68,[[["self"],["self"]],["self"]]],[11,"add_assign","","",68,[[["self"],["self"]]]],[11,"sub_assign","","",68,[[["self"],["self"]]]],[11,"mul_assign","","",68,[[["self"],["self"]]]],[11,"div_assign","","",68,[[["self"],["self"]]]],[11,"rem_assign","","",68,[[["self"],["self"]]]],[11,"add","","",68,[[["self"],["i8"]],["self"]]],[11,"sub","","",68,[[["self"],["i8"]],["self"]]],[11,"mul","","",68,[[["self"],["i8"]],["self"]]],[11,"div","","",68,[[["self"],["i8"]],["self"]]],[11,"rem","","",68,[[["self"],["i8"]],["self"]]],[11,"add_assign","","",68,[[["self"],["i8"]]]],[11,"sub_assign","","",68,[[["self"],["i8"]]]],[11,"mul_assign","","",68,[[["self"],["i8"]]]],[11,"div_assign","","",68,[[["self"],["i8"]]]],[11,"rem_assign","","",68,[[["self"],["i8"]]]],[11,"not","","",68,[[["self"]],["self"]]],[11,"bitxor","","",68,[[["self"],["self"]],["self"]]],[11,"bitand","","",68,[[["self"],["self"]],["self"]]],[11,"bitor","","",68,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",68,[[["self"],["self"]]]],[11,"bitor_assign","","",68,[[["self"],["self"]]]],[11,"bitxor_assign","","",68,[[["self"],["self"]]]],[11,"bitxor","","",68,[[["self"],["i8"]],["self"]]],[11,"bitand","","",68,[[["self"],["i8"]],["self"]]],[11,"bitor","","",68,[[["self"],["i8"]],["self"]]],[11,"bitand_assign","","",68,[[["self"],["i8"]]]],[11,"bitor_assign","","",68,[[["self"],["i8"]]]],[11,"bitxor_assign","","",68,[[["self"],["i8"]]]],[11,"shl","","",68,[[["self"],["self"]],["self"]]],[11,"shr","","",68,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",68,[[["self"],["self"]]]],[11,"shr_assign","","",68,[[["self"],["self"]]]],[11,"shl","","",68,[[["self"],["u32"]],["self"]]],[11,"shr","","",68,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",68,[[["self"],["u32"]]]],[11,"shr_assign","","",68,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",68,[[["self"],["i8x64"]],["i8x64"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",68,[[["self"],["i8x64"]],["i8x64"]]],[11,"neg","","",68,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",68,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",68,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",68,[[["self"]],["i8"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",68,[[["self"]],["i8"]]],[11,"sum","","",68,[[["i"]],["i8x64"]]],[11,"product","","",68,[[["i"]],["i8x64"]]],[11,"sum","","",68,[[["i"]],["i8x64"]]],[11,"product","","",68,[[["i"]],["i8x64"]]],[11,"max_element","","Largest vector element value.",68,[[["self"]],["i8"]]],[11,"min_element","","Smallest vector element value.",68,[[["self"]],["i8"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",68,[[["self"]],["i8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",68,[[["self"]],["i8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",68,[[["self"]],["i8"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"from","","",68,N],[11,"default","","",68,[[],["self"]]],[11,"hash","","",68,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",68,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",68,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",68,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",68,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",68,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",68,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",68,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",68,N],[11,"swap_bytes","","Reverses the byte order of the vector.",68,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",68,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",68,[[["self"]],["self"]]],[11,"eq","","",68,[[["self"],["self"]],["bool"]]],[11,"ne","","",68,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",68,[[["self"],["self"]],["m8x64"]]],[11,"ne","","Lane-wise inequality comparison.",68,[[["self"],["self"]],["m8x64"]]],[11,"lt","","Lane-wise less-than comparison.",68,[[["self"],["self"]],["m8x64"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",68,[[["self"],["self"]],["m8x64"]]],[11,"gt","","Lane-wise greater-than comparison.",68,[[["self"],["self"]],["m8x64"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",68,[[["self"],["self"]],["m8x64"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",68,[[["self"]],["lexicographicallyordered",["i8x64"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",68,[[["self"]],["lexicographicallyordered",["i8x64"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",69,[[["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",69,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",69,[[["u8"]],["self"]]],[11,"extract","","Extracts the value at `index`.",69,[[["self"],["usize"]],["u8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",69,[[["self"],["usize"]],["u8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",69,[[["self"],["usize"],["u8"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",69,[[["self"],["usize"],["u8"]],["self"]]],[11,"add","","",69,[[["self"],["self"]],["self"]]],[11,"sub","","",69,[[["self"],["self"]],["self"]]],[11,"mul","","",69,[[["self"],["self"]],["self"]]],[11,"div","","",69,[[["self"],["self"]],["self"]]],[11,"rem","","",69,[[["self"],["self"]],["self"]]],[11,"add_assign","","",69,[[["self"],["self"]]]],[11,"sub_assign","","",69,[[["self"],["self"]]]],[11,"mul_assign","","",69,[[["self"],["self"]]]],[11,"div_assign","","",69,[[["self"],["self"]]]],[11,"rem_assign","","",69,[[["self"],["self"]]]],[11,"add","","",69,[[["self"],["u8"]],["self"]]],[11,"sub","","",69,[[["self"],["u8"]],["self"]]],[11,"mul","","",69,[[["self"],["u8"]],["self"]]],[11,"div","","",69,[[["self"],["u8"]],["self"]]],[11,"rem","","",69,[[["self"],["u8"]],["self"]]],[11,"add_assign","","",69,[[["self"],["u8"]]]],[11,"sub_assign","","",69,[[["self"],["u8"]]]],[11,"mul_assign","","",69,[[["self"],["u8"]]]],[11,"div_assign","","",69,[[["self"],["u8"]]]],[11,"rem_assign","","",69,[[["self"],["u8"]]]],[11,"not","","",69,[[["self"]],["self"]]],[11,"bitxor","","",69,[[["self"],["self"]],["self"]]],[11,"bitand","","",69,[[["self"],["self"]],["self"]]],[11,"bitor","","",69,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",69,[[["self"],["self"]]]],[11,"bitor_assign","","",69,[[["self"],["self"]]]],[11,"bitxor_assign","","",69,[[["self"],["self"]]]],[11,"bitxor","","",69,[[["self"],["u8"]],["self"]]],[11,"bitand","","",69,[[["self"],["u8"]],["self"]]],[11,"bitor","","",69,[[["self"],["u8"]],["self"]]],[11,"bitand_assign","","",69,[[["self"],["u8"]]]],[11,"bitor_assign","","",69,[[["self"],["u8"]]]],[11,"bitxor_assign","","",69,[[["self"],["u8"]]]],[11,"shl","","",69,[[["self"],["self"]],["self"]]],[11,"shr","","",69,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",69,[[["self"],["self"]]]],[11,"shr_assign","","",69,[[["self"],["self"]]]],[11,"shl","","",69,[[["self"],["u32"]],["self"]]],[11,"shr","","",69,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",69,[[["self"],["u32"]]]],[11,"shr_assign","","",69,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",69,[[["self"],["u8x64"]],["u8x64"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",69,[[["self"],["u8x64"]],["u8x64"]]],[11,"min","","Minimum of two vectors.",69,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",69,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",69,[[["self"]],["u8"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",69,[[["self"]],["u8"]]],[11,"sum","","",69,[[["i"]],["u8x64"]]],[11,"product","","",69,[[["i"]],["u8x64"]]],[11,"sum","","",69,[[["i"]],["u8x64"]]],[11,"product","","",69,[[["i"]],["u8x64"]]],[11,"max_element","","Largest vector element value.",69,[[["self"]],["u8"]]],[11,"min_element","","Smallest vector element value.",69,[[["self"]],["u8"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",69,[[["self"]],["u8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",69,[[["self"]],["u8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",69,[[["self"]],["u8"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"from","","",69,N],[11,"default","","",69,[[],["self"]]],[11,"hash","","",69,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",69,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",69,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",69,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",69,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",69,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",69,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",69,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",69,N],[11,"swap_bytes","","Reverses the byte order of the vector.",69,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",69,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",69,[[["self"]],["self"]]],[11,"shuffle1_dyn","","Shuffle vector elements according to `indices`.",69,[[["self"],["self"]],["self"]]],[11,"eq","","",69,[[["self"],["self"]],["bool"]]],[11,"ne","","",69,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",69,[[["self"],["self"]],["m8x64"]]],[11,"ne","","Lane-wise inequality comparison.",69,[[["self"],["self"]],["m8x64"]]],[11,"lt","","Lane-wise less-than comparison.",69,[[["self"],["self"]],["m8x64"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",69,[[["self"],["self"]],["m8x64"]]],[11,"gt","","Lane-wise greater-than comparison.",69,[[["self"],["self"]],["m8x64"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",69,[[["self"],["self"]],["m8x64"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",69,[[["self"]],["lexicographicallyordered",["u8x64"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",69,[[["self"]],["lexicographicallyordered",["u8x64"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",70,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",70,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",70,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",70,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",70,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",70,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",70,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",70,[[["self"]],["self"]]],[11,"bitxor","","",70,[[["self"],["self"]],["self"]]],[11,"bitand","","",70,[[["self"],["self"]],["self"]]],[11,"bitor","","",70,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",70,[[["self"],["self"]]]],[11,"bitor_assign","","",70,[[["self"],["self"]]]],[11,"bitxor_assign","","",70,[[["self"],["self"]]]],[11,"bitxor","","",70,[[["self"],["bool"]],["self"]]],[11,"bitand","","",70,[[["self"],["bool"]],["self"]]],[11,"bitor","","",70,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",70,[[["self"],["bool"]]]],[11,"bitor_assign","","",70,[[["self"],["bool"]]]],[11,"bitxor_assign","","",70,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",70,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",70,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",70,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",70,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",70,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",70,[[["self"]],["bool"]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"from","","",70,N],[11,"default","","",70,[[],["self"]]],[11,"eq","","",70,[[["self"],["self"]],["bool"]]],[11,"ne","","",70,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",70,[[["self"],["self"]],["m8x64"]]],[11,"ne","","Lane-wise inequality comparison.",70,[[["self"],["self"]],["m8x64"]]],[11,"lt","","Lane-wise less-than comparison.",70,[[["self"],["self"]],["m8x64"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",70,[[["self"],["self"]],["m8x64"]]],[11,"gt","","Lane-wise greater-than comparison.",70,[[["self"],["self"]],["m8x64"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",70,[[["self"],["self"]],["m8x64"]]],[11,"select","","Selects elements of `a` and `b` using mask.",70,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",70,[[["self"]],["lexicographicallyordered",["m8x64"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",70,[[["self"]],["lexicographicallyordered",["m8x64"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",71,[[["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",71,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",71,[[["i16"]],["self"]]],[11,"extract","","Extracts the value at `index`.",71,[[["self"],["usize"]],["i16"]]],[11,"extract_unchecked","","Extracts the value at `index`.",71,[[["self"],["usize"]],["i16"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",71,[[["self"],["usize"],["i16"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",71,[[["self"],["usize"],["i16"]],["self"]]],[11,"add","","",71,[[["self"],["self"]],["self"]]],[11,"sub","","",71,[[["self"],["self"]],["self"]]],[11,"mul","","",71,[[["self"],["self"]],["self"]]],[11,"div","","",71,[[["self"],["self"]],["self"]]],[11,"rem","","",71,[[["self"],["self"]],["self"]]],[11,"add_assign","","",71,[[["self"],["self"]]]],[11,"sub_assign","","",71,[[["self"],["self"]]]],[11,"mul_assign","","",71,[[["self"],["self"]]]],[11,"div_assign","","",71,[[["self"],["self"]]]],[11,"rem_assign","","",71,[[["self"],["self"]]]],[11,"add","","",71,[[["self"],["i16"]],["self"]]],[11,"sub","","",71,[[["self"],["i16"]],["self"]]],[11,"mul","","",71,[[["self"],["i16"]],["self"]]],[11,"div","","",71,[[["self"],["i16"]],["self"]]],[11,"rem","","",71,[[["self"],["i16"]],["self"]]],[11,"add_assign","","",71,[[["self"],["i16"]]]],[11,"sub_assign","","",71,[[["self"],["i16"]]]],[11,"mul_assign","","",71,[[["self"],["i16"]]]],[11,"div_assign","","",71,[[["self"],["i16"]]]],[11,"rem_assign","","",71,[[["self"],["i16"]]]],[11,"not","","",71,[[["self"]],["self"]]],[11,"bitxor","","",71,[[["self"],["self"]],["self"]]],[11,"bitand","","",71,[[["self"],["self"]],["self"]]],[11,"bitor","","",71,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",71,[[["self"],["self"]]]],[11,"bitor_assign","","",71,[[["self"],["self"]]]],[11,"bitxor_assign","","",71,[[["self"],["self"]]]],[11,"bitxor","","",71,[[["self"],["i16"]],["self"]]],[11,"bitand","","",71,[[["self"],["i16"]],["self"]]],[11,"bitor","","",71,[[["self"],["i16"]],["self"]]],[11,"bitand_assign","","",71,[[["self"],["i16"]]]],[11,"bitor_assign","","",71,[[["self"],["i16"]]]],[11,"bitxor_assign","","",71,[[["self"],["i16"]]]],[11,"shl","","",71,[[["self"],["self"]],["self"]]],[11,"shr","","",71,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",71,[[["self"],["self"]]]],[11,"shr_assign","","",71,[[["self"],["self"]]]],[11,"shl","","",71,[[["self"],["u32"]],["self"]]],[11,"shr","","",71,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",71,[[["self"],["u32"]]]],[11,"shr_assign","","",71,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",71,[[["self"],["i16x32"]],["i16x32"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",71,[[["self"],["i16x32"]],["i16x32"]]],[11,"neg","","",71,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",71,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",71,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",71,[[["self"]],["i16"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",71,[[["self"]],["i16"]]],[11,"sum","","",71,[[["i"]],["i16x32"]]],[11,"product","","",71,[[["i"]],["i16x32"]]],[11,"sum","","",71,[[["i"]],["i16x32"]]],[11,"product","","",71,[[["i"]],["i16x32"]]],[11,"max_element","","Largest vector element value.",71,[[["self"]],["i16"]]],[11,"min_element","","Smallest vector element value.",71,[[["self"]],["i16"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",71,[[["self"]],["i16"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",71,[[["self"]],["i16"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",71,[[["self"]],["i16"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"from","","",71,N],[11,"from","","",71,[[["i8x32"]],["self"]]],[11,"from","","",71,[[["u8x32"]],["self"]]],[11,"default","","",71,[[],["self"]]],[11,"hash","","",71,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",71,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",71,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",71,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",71,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",71,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",71,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",71,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",71,N],[11,"swap_bytes","","Reverses the byte order of the vector.",71,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",71,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",71,[[["self"]],["self"]]],[11,"eq","","",71,[[["self"],["self"]],["bool"]]],[11,"ne","","",71,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",71,[[["self"],["self"]],["m16x32"]]],[11,"ne","","Lane-wise inequality comparison.",71,[[["self"],["self"]],["m16x32"]]],[11,"lt","","Lane-wise less-than comparison.",71,[[["self"],["self"]],["m16x32"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",71,[[["self"],["self"]],["m16x32"]]],[11,"gt","","Lane-wise greater-than comparison.",71,[[["self"],["self"]],["m16x32"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",71,[[["self"],["self"]],["m16x32"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",71,[[["self"]],["lexicographicallyordered",["i16x32"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",71,[[["self"]],["lexicographicallyordered",["i16x32"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",72,[[["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",72,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",72,[[["u16"]],["self"]]],[11,"extract","","Extracts the value at `index`.",72,[[["self"],["usize"]],["u16"]]],[11,"extract_unchecked","","Extracts the value at `index`.",72,[[["self"],["usize"]],["u16"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",72,[[["self"],["usize"],["u16"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",72,[[["self"],["usize"],["u16"]],["self"]]],[11,"add","","",72,[[["self"],["self"]],["self"]]],[11,"sub","","",72,[[["self"],["self"]],["self"]]],[11,"mul","","",72,[[["self"],["self"]],["self"]]],[11,"div","","",72,[[["self"],["self"]],["self"]]],[11,"rem","","",72,[[["self"],["self"]],["self"]]],[11,"add_assign","","",72,[[["self"],["self"]]]],[11,"sub_assign","","",72,[[["self"],["self"]]]],[11,"mul_assign","","",72,[[["self"],["self"]]]],[11,"div_assign","","",72,[[["self"],["self"]]]],[11,"rem_assign","","",72,[[["self"],["self"]]]],[11,"add","","",72,[[["self"],["u16"]],["self"]]],[11,"sub","","",72,[[["self"],["u16"]],["self"]]],[11,"mul","","",72,[[["self"],["u16"]],["self"]]],[11,"div","","",72,[[["self"],["u16"]],["self"]]],[11,"rem","","",72,[[["self"],["u16"]],["self"]]],[11,"add_assign","","",72,[[["self"],["u16"]]]],[11,"sub_assign","","",72,[[["self"],["u16"]]]],[11,"mul_assign","","",72,[[["self"],["u16"]]]],[11,"div_assign","","",72,[[["self"],["u16"]]]],[11,"rem_assign","","",72,[[["self"],["u16"]]]],[11,"not","","",72,[[["self"]],["self"]]],[11,"bitxor","","",72,[[["self"],["self"]],["self"]]],[11,"bitand","","",72,[[["self"],["self"]],["self"]]],[11,"bitor","","",72,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",72,[[["self"],["self"]]]],[11,"bitor_assign","","",72,[[["self"],["self"]]]],[11,"bitxor_assign","","",72,[[["self"],["self"]]]],[11,"bitxor","","",72,[[["self"],["u16"]],["self"]]],[11,"bitand","","",72,[[["self"],["u16"]],["self"]]],[11,"bitor","","",72,[[["self"],["u16"]],["self"]]],[11,"bitand_assign","","",72,[[["self"],["u16"]]]],[11,"bitor_assign","","",72,[[["self"],["u16"]]]],[11,"bitxor_assign","","",72,[[["self"],["u16"]]]],[11,"shl","","",72,[[["self"],["self"]],["self"]]],[11,"shr","","",72,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",72,[[["self"],["self"]]]],[11,"shr_assign","","",72,[[["self"],["self"]]]],[11,"shl","","",72,[[["self"],["u32"]],["self"]]],[11,"shr","","",72,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",72,[[["self"],["u32"]]]],[11,"shr_assign","","",72,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",72,[[["self"],["u16x32"]],["u16x32"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",72,[[["self"],["u16x32"]],["u16x32"]]],[11,"min","","Minimum of two vectors.",72,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",72,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",72,[[["self"]],["u16"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",72,[[["self"]],["u16"]]],[11,"sum","","",72,[[["i"]],["u16x32"]]],[11,"product","","",72,[[["i"]],["u16x32"]]],[11,"sum","","",72,[[["i"]],["u16x32"]]],[11,"product","","",72,[[["i"]],["u16x32"]]],[11,"max_element","","Largest vector element value.",72,[[["self"]],["u16"]]],[11,"min_element","","Smallest vector element value.",72,[[["self"]],["u16"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",72,[[["self"]],["u16"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",72,[[["self"]],["u16"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",72,[[["self"]],["u16"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"from","","",72,N],[11,"from","","",72,[[["u8x32"]],["self"]]],[11,"default","","",72,[[],["self"]]],[11,"hash","","",72,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",72,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",72,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",72,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",72,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",72,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",72,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",72,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",72,N],[11,"swap_bytes","","Reverses the byte order of the vector.",72,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",72,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",72,[[["self"]],["self"]]],[11,"shuffle1_dyn","","Shuffle vector elements according to `indices`.",72,[[["self"],["self"]],["self"]]],[11,"eq","","",72,[[["self"],["self"]],["bool"]]],[11,"ne","","",72,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",72,[[["self"],["self"]],["m16x32"]]],[11,"ne","","Lane-wise inequality comparison.",72,[[["self"],["self"]],["m16x32"]]],[11,"lt","","Lane-wise less-than comparison.",72,[[["self"],["self"]],["m16x32"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",72,[[["self"],["self"]],["m16x32"]]],[11,"gt","","Lane-wise greater-than comparison.",72,[[["self"],["self"]],["m16x32"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",72,[[["self"],["self"]],["m16x32"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",72,[[["self"]],["lexicographicallyordered",["u16x32"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",72,[[["self"]],["lexicographicallyordered",["u16x32"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",73,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",73,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",73,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",73,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",73,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",73,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",73,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",73,[[["self"]],["self"]]],[11,"bitxor","","",73,[[["self"],["self"]],["self"]]],[11,"bitand","","",73,[[["self"],["self"]],["self"]]],[11,"bitor","","",73,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",73,[[["self"],["self"]]]],[11,"bitor_assign","","",73,[[["self"],["self"]]]],[11,"bitxor_assign","","",73,[[["self"],["self"]]]],[11,"bitxor","","",73,[[["self"],["bool"]],["self"]]],[11,"bitand","","",73,[[["self"],["bool"]],["self"]]],[11,"bitor","","",73,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",73,[[["self"],["bool"]]]],[11,"bitor_assign","","",73,[[["self"],["bool"]]]],[11,"bitxor_assign","","",73,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",73,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",73,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",73,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",73,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",73,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",73,[[["self"]],["bool"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"from","","",73,N],[11,"from","","",73,[[["m8x32"]],["self"]]],[11,"default","","",73,[[],["self"]]],[11,"eq","","",73,[[["self"],["self"]],["bool"]]],[11,"ne","","",73,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",73,[[["self"],["self"]],["m16x32"]]],[11,"ne","","Lane-wise inequality comparison.",73,[[["self"],["self"]],["m16x32"]]],[11,"lt","","Lane-wise less-than comparison.",73,[[["self"],["self"]],["m16x32"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",73,[[["self"],["self"]],["m16x32"]]],[11,"gt","","Lane-wise greater-than comparison.",73,[[["self"],["self"]],["m16x32"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",73,[[["self"],["self"]],["m16x32"]]],[11,"select","","Selects elements of `a` and `b` using mask.",73,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",73,[[["self"]],["lexicographicallyordered",["m16x32"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",73,[[["self"]],["lexicographicallyordered",["m16x32"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",74,[[["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",74,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",74,[[["i32"]],["self"]]],[11,"extract","","Extracts the value at `index`.",74,[[["self"],["usize"]],["i32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",74,[[["self"],["usize"]],["i32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",74,[[["self"],["usize"],["i32"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",74,[[["self"],["usize"],["i32"]],["self"]]],[11,"add","","",74,[[["self"],["self"]],["self"]]],[11,"sub","","",74,[[["self"],["self"]],["self"]]],[11,"mul","","",74,[[["self"],["self"]],["self"]]],[11,"div","","",74,[[["self"],["self"]],["self"]]],[11,"rem","","",74,[[["self"],["self"]],["self"]]],[11,"add_assign","","",74,[[["self"],["self"]]]],[11,"sub_assign","","",74,[[["self"],["self"]]]],[11,"mul_assign","","",74,[[["self"],["self"]]]],[11,"div_assign","","",74,[[["self"],["self"]]]],[11,"rem_assign","","",74,[[["self"],["self"]]]],[11,"add","","",74,[[["self"],["i32"]],["self"]]],[11,"sub","","",74,[[["self"],["i32"]],["self"]]],[11,"mul","","",74,[[["self"],["i32"]],["self"]]],[11,"div","","",74,[[["self"],["i32"]],["self"]]],[11,"rem","","",74,[[["self"],["i32"]],["self"]]],[11,"add_assign","","",74,[[["self"],["i32"]]]],[11,"sub_assign","","",74,[[["self"],["i32"]]]],[11,"mul_assign","","",74,[[["self"],["i32"]]]],[11,"div_assign","","",74,[[["self"],["i32"]]]],[11,"rem_assign","","",74,[[["self"],["i32"]]]],[11,"not","","",74,[[["self"]],["self"]]],[11,"bitxor","","",74,[[["self"],["self"]],["self"]]],[11,"bitand","","",74,[[["self"],["self"]],["self"]]],[11,"bitor","","",74,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",74,[[["self"],["self"]]]],[11,"bitor_assign","","",74,[[["self"],["self"]]]],[11,"bitxor_assign","","",74,[[["self"],["self"]]]],[11,"bitxor","","",74,[[["self"],["i32"]],["self"]]],[11,"bitand","","",74,[[["self"],["i32"]],["self"]]],[11,"bitor","","",74,[[["self"],["i32"]],["self"]]],[11,"bitand_assign","","",74,[[["self"],["i32"]]]],[11,"bitor_assign","","",74,[[["self"],["i32"]]]],[11,"bitxor_assign","","",74,[[["self"],["i32"]]]],[11,"shl","","",74,[[["self"],["self"]],["self"]]],[11,"shr","","",74,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",74,[[["self"],["self"]]]],[11,"shr_assign","","",74,[[["self"],["self"]]]],[11,"shl","","",74,[[["self"],["u32"]],["self"]]],[11,"shr","","",74,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",74,[[["self"],["u32"]]]],[11,"shr_assign","","",74,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",74,[[["self"],["i32x16"]],["i32x16"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",74,[[["self"],["i32x16"]],["i32x16"]]],[11,"neg","","",74,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",74,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",74,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",74,[[["self"]],["i32"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",74,[[["self"]],["i32"]]],[11,"sum","","",74,[[["i"]],["i32x16"]]],[11,"product","","",74,[[["i"]],["i32x16"]]],[11,"sum","","",74,[[["i"]],["i32x16"]]],[11,"product","","",74,[[["i"]],["i32x16"]]],[11,"max_element","","Largest vector element value.",74,[[["self"]],["i32"]]],[11,"min_element","","Smallest vector element value.",74,[[["self"]],["i32"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",74,[[["self"]],["i32"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",74,[[["self"]],["i32"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",74,[[["self"]],["i32"]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"from","","",74,N],[11,"from","","",74,[[["i8x16"]],["self"]]],[11,"from","","",74,[[["u8x16"]],["self"]]],[11,"from","","",74,[[["i16x16"]],["self"]]],[11,"from","","",74,[[["u16x16"]],["self"]]],[11,"default","","",74,[[],["self"]]],[11,"hash","","",74,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",74,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",74,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",74,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",74,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",74,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",74,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",74,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",74,N],[11,"swap_bytes","","Reverses the byte order of the vector.",74,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",74,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",74,[[["self"]],["self"]]],[11,"eq","","",74,[[["self"],["self"]],["bool"]]],[11,"ne","","",74,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",74,[[["self"],["self"]],["m32x16"]]],[11,"ne","","Lane-wise inequality comparison.",74,[[["self"],["self"]],["m32x16"]]],[11,"lt","","Lane-wise less-than comparison.",74,[[["self"],["self"]],["m32x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",74,[[["self"],["self"]],["m32x16"]]],[11,"gt","","Lane-wise greater-than comparison.",74,[[["self"],["self"]],["m32x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",74,[[["self"],["self"]],["m32x16"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",74,[[["self"]],["lexicographicallyordered",["i32x16"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",74,[[["self"]],["lexicographicallyordered",["i32x16"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",75,[[["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",75,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",75,[[["u32"]],["self"]]],[11,"extract","","Extracts the value at `index`.",75,[[["self"],["usize"]],["u32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",75,[[["self"],["usize"]],["u32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",75,[[["self"],["usize"],["u32"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",75,[[["self"],["usize"],["u32"]],["self"]]],[11,"add","","",75,[[["self"],["self"]],["self"]]],[11,"sub","","",75,[[["self"],["self"]],["self"]]],[11,"mul","","",75,[[["self"],["self"]],["self"]]],[11,"div","","",75,[[["self"],["self"]],["self"]]],[11,"rem","","",75,[[["self"],["self"]],["self"]]],[11,"add_assign","","",75,[[["self"],["self"]]]],[11,"sub_assign","","",75,[[["self"],["self"]]]],[11,"mul_assign","","",75,[[["self"],["self"]]]],[11,"div_assign","","",75,[[["self"],["self"]]]],[11,"rem_assign","","",75,[[["self"],["self"]]]],[11,"add","","",75,[[["self"],["u32"]],["self"]]],[11,"sub","","",75,[[["self"],["u32"]],["self"]]],[11,"mul","","",75,[[["self"],["u32"]],["self"]]],[11,"div","","",75,[[["self"],["u32"]],["self"]]],[11,"rem","","",75,[[["self"],["u32"]],["self"]]],[11,"add_assign","","",75,[[["self"],["u32"]]]],[11,"sub_assign","","",75,[[["self"],["u32"]]]],[11,"mul_assign","","",75,[[["self"],["u32"]]]],[11,"div_assign","","",75,[[["self"],["u32"]]]],[11,"rem_assign","","",75,[[["self"],["u32"]]]],[11,"not","","",75,[[["self"]],["self"]]],[11,"bitxor","","",75,[[["self"],["self"]],["self"]]],[11,"bitand","","",75,[[["self"],["self"]],["self"]]],[11,"bitor","","",75,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",75,[[["self"],["self"]]]],[11,"bitor_assign","","",75,[[["self"],["self"]]]],[11,"bitxor_assign","","",75,[[["self"],["self"]]]],[11,"bitxor","","",75,[[["self"],["u32"]],["self"]]],[11,"bitand","","",75,[[["self"],["u32"]],["self"]]],[11,"bitor","","",75,[[["self"],["u32"]],["self"]]],[11,"bitand_assign","","",75,[[["self"],["u32"]]]],[11,"bitor_assign","","",75,[[["self"],["u32"]]]],[11,"bitxor_assign","","",75,[[["self"],["u32"]]]],[11,"shl","","",75,[[["self"],["self"]],["self"]]],[11,"shr","","",75,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",75,[[["self"],["self"]]]],[11,"shr_assign","","",75,[[["self"],["self"]]]],[11,"shl","","",75,[[["self"],["u32"]],["self"]]],[11,"shr","","",75,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",75,[[["self"],["u32"]]]],[11,"shr_assign","","",75,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",75,[[["self"],["u32x16"]],["u32x16"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",75,[[["self"],["u32x16"]],["u32x16"]]],[11,"min","","Minimum of two vectors.",75,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",75,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",75,[[["self"]],["u32"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",75,[[["self"]],["u32"]]],[11,"sum","","",75,[[["i"]],["u32x16"]]],[11,"product","","",75,[[["i"]],["u32x16"]]],[11,"sum","","",75,[[["i"]],["u32x16"]]],[11,"product","","",75,[[["i"]],["u32x16"]]],[11,"max_element","","Largest vector element value.",75,[[["self"]],["u32"]]],[11,"min_element","","Smallest vector element value.",75,[[["self"]],["u32"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",75,[[["self"]],["u32"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",75,[[["self"]],["u32"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",75,[[["self"]],["u32"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"from","","",75,N],[11,"from","","",75,[[["u8x16"]],["self"]]],[11,"from","","",75,[[["u16x16"]],["self"]]],[11,"default","","",75,[[],["self"]]],[11,"hash","","",75,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",75,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",75,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",75,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",75,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",75,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",75,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",75,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",75,N],[11,"swap_bytes","","Reverses the byte order of the vector.",75,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",75,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",75,[[["self"]],["self"]]],[11,"shuffle1_dyn","","Shuffle vector elements according to `indices`.",75,[[["self"],["self"]],["self"]]],[11,"eq","","",75,[[["self"],["self"]],["bool"]]],[11,"ne","","",75,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",75,[[["self"],["self"]],["m32x16"]]],[11,"ne","","Lane-wise inequality comparison.",75,[[["self"],["self"]],["m32x16"]]],[11,"lt","","Lane-wise less-than comparison.",75,[[["self"],["self"]],["m32x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",75,[[["self"],["self"]],["m32x16"]]],[11,"gt","","Lane-wise greater-than comparison.",75,[[["self"],["self"]],["m32x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",75,[[["self"],["self"]],["m32x16"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",75,[[["self"]],["lexicographicallyordered",["u32x16"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",75,[[["self"]],["lexicographicallyordered",["u32x16"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",76,[[["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",76,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",76,[[["f32"]],["self"]]],[11,"extract","","Extracts the value at `index`.",76,[[["self"],["usize"]],["f32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",76,[[["self"],["usize"]],["f32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",76,[[["self"],["usize"],["f32"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",76,[[["self"],["usize"],["f32"]],["self"]]],[11,"add","","",76,[[["self"],["self"]],["self"]]],[11,"sub","","",76,[[["self"],["self"]],["self"]]],[11,"mul","","",76,[[["self"],["self"]],["self"]]],[11,"div","","",76,[[["self"],["self"]],["self"]]],[11,"rem","","",76,[[["self"],["self"]],["self"]]],[11,"add_assign","","",76,[[["self"],["self"]]]],[11,"sub_assign","","",76,[[["self"],["self"]]]],[11,"mul_assign","","",76,[[["self"],["self"]]]],[11,"div_assign","","",76,[[["self"],["self"]]]],[11,"rem_assign","","",76,[[["self"],["self"]]]],[11,"add","","",76,[[["self"],["f32"]],["self"]]],[11,"sub","","",76,[[["self"],["f32"]],["self"]]],[11,"mul","","",76,[[["self"],["f32"]],["self"]]],[11,"div","","",76,[[["self"],["f32"]],["self"]]],[11,"rem","","",76,[[["self"],["f32"]],["self"]]],[11,"add_assign","","",76,[[["self"],["f32"]]]],[11,"sub_assign","","",76,[[["self"],["f32"]]]],[11,"mul_assign","","",76,[[["self"],["f32"]]]],[11,"div_assign","","",76,[[["self"],["f32"]]]],[11,"rem_assign","","",76,[[["self"],["f32"]]]],[11,"neg","","",76,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",76,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",76,[[["self"],["self"]],["self"]]],[11,"sum","","Horizontal sum of the vector elements.",76,[[["self"]],["f32"]]],[11,"product","","Horizontal product of the vector elements.",76,[[["self"]],["f32"]]],[11,"sum","","",76,[[["i"]],["f32x16"]]],[11,"product","","",76,[[["i"]],["f32x16"]]],[11,"sum","","",76,[[["i"]],["f32x16"]]],[11,"product","","",76,[[["i"]],["f32x16"]]],[11,"max_element","","Largest vector element value.",76,[[["self"]],["f32"]]],[11,"min_element","","Smallest vector element value.",76,[[["self"]],["f32"]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"from","","",76,N],[11,"from","","",76,[[["i8x16"]],["self"]]],[11,"from","","",76,[[["u8x16"]],["self"]]],[11,"from","","",76,[[["i16x16"]],["self"]]],[11,"from","","",76,[[["u16x16"]],["self"]]],[11,"default","","",76,[[],["self"]]],[11,"eq","","",76,[[["self"],["self"]],["bool"]]],[11,"ne","","",76,[[["self"],["self"]],["bool"]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",76,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",76,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",76,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",76,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",76,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",76,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",76,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",76,N],[11,"abs","","Absolute value.",76,[[["self"]],["self"]]],[11,"cos","","Cosine.",76,[[["self"]],["self"]]],[11,"cos_pi","","Cosine of `self * PI`.",76,[[["self"]],["self"]]],[11,"exp","","Returns the exponential function of `self`: `e^(self)`.",76,[[["self"]],["self"]]],[11,"ln","","Returns the natural logarithm of `self`.",76,[[["self"]],["self"]]],[11,"mul_add","","Fused multiply add: `self * y + z`",76,[[["self"],["self"],["self"]],["self"]]],[11,"mul_adde","","Fused multiply add estimate: ~= `self * y + z`",76,[[["self"],["self"],["self"]],["self"]]],[11,"powf","","Raises `self` number to the floating point power of `x`.",76,[[["self"],["self"]],["self"]]],[11,"recpre","","Reciprocal estimate: `~= 1. / self`.",76,[[["self"]],["self"]]],[11,"rsqrte","","Reciprocal square-root estimate: `~= 1. / self.sqrt()`.",76,[[["self"]],["self"]]],[11,"sin","","Sine.",76,[[["self"]],["self"]]],[11,"sin_pi","","Sine of `self * PI`.",76,[[["self"]],["self"]]],[11,"sin_cos_pi","","Sine and cosine of `self * PI`.",76,N],[11,"sqrt","","",76,[[["self"]],["self"]]],[11,"sqrte","","Square-root estimate.",76,[[["self"]],["self"]]],[11,"eq","","Lane-wise equality comparison.",76,[[["self"],["self"]],["m32x16"]]],[11,"ne","","Lane-wise inequality comparison.",76,[[["self"],["self"]],["m32x16"]]],[11,"lt","","Lane-wise less-than comparison.",76,[[["self"],["self"]],["m32x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",76,[[["self"],["self"]],["m32x16"]]],[11,"gt","","Lane-wise greater-than comparison.",76,[[["self"],["self"]],["m32x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",76,[[["self"],["self"]],["m32x16"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",77,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",77,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",77,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",77,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",77,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",77,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",77,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",77,[[["self"]],["self"]]],[11,"bitxor","","",77,[[["self"],["self"]],["self"]]],[11,"bitand","","",77,[[["self"],["self"]],["self"]]],[11,"bitor","","",77,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",77,[[["self"],["self"]]]],[11,"bitor_assign","","",77,[[["self"],["self"]]]],[11,"bitxor_assign","","",77,[[["self"],["self"]]]],[11,"bitxor","","",77,[[["self"],["bool"]],["self"]]],[11,"bitand","","",77,[[["self"],["bool"]],["self"]]],[11,"bitor","","",77,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",77,[[["self"],["bool"]]]],[11,"bitor_assign","","",77,[[["self"],["bool"]]]],[11,"bitxor_assign","","",77,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",77,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",77,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",77,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",77,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",77,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",77,[[["self"]],["bool"]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"from","","",77,N],[11,"from","","",77,[[["m8x16"]],["self"]]],[11,"from","","",77,[[["m16x16"]],["self"]]],[11,"default","","",77,[[],["self"]]],[11,"eq","","",77,[[["self"],["self"]],["bool"]]],[11,"ne","","",77,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",77,[[["self"],["self"]],["m32x16"]]],[11,"ne","","Lane-wise inequality comparison.",77,[[["self"],["self"]],["m32x16"]]],[11,"lt","","Lane-wise less-than comparison.",77,[[["self"],["self"]],["m32x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",77,[[["self"],["self"]],["m32x16"]]],[11,"gt","","Lane-wise greater-than comparison.",77,[[["self"],["self"]],["m32x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",77,[[["self"],["self"]],["m32x16"]]],[11,"select","","Selects elements of `a` and `b` using mask.",77,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",77,[[["self"]],["lexicographicallyordered",["m32x16"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",77,[[["self"]],["lexicographicallyordered",["m32x16"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",78,[[["i64"],["i64"],["i64"],["i64"],["i64"],["i64"],["i64"],["i64"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",78,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",78,[[["i64"]],["self"]]],[11,"extract","","Extracts the value at `index`.",78,[[["self"],["usize"]],["i64"]]],[11,"extract_unchecked","","Extracts the value at `index`.",78,[[["self"],["usize"]],["i64"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",78,[[["self"],["usize"],["i64"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",78,[[["self"],["usize"],["i64"]],["self"]]],[11,"add","","",78,[[["self"],["self"]],["self"]]],[11,"sub","","",78,[[["self"],["self"]],["self"]]],[11,"mul","","",78,[[["self"],["self"]],["self"]]],[11,"div","","",78,[[["self"],["self"]],["self"]]],[11,"rem","","",78,[[["self"],["self"]],["self"]]],[11,"add_assign","","",78,[[["self"],["self"]]]],[11,"sub_assign","","",78,[[["self"],["self"]]]],[11,"mul_assign","","",78,[[["self"],["self"]]]],[11,"div_assign","","",78,[[["self"],["self"]]]],[11,"rem_assign","","",78,[[["self"],["self"]]]],[11,"add","","",78,[[["self"],["i64"]],["self"]]],[11,"sub","","",78,[[["self"],["i64"]],["self"]]],[11,"mul","","",78,[[["self"],["i64"]],["self"]]],[11,"div","","",78,[[["self"],["i64"]],["self"]]],[11,"rem","","",78,[[["self"],["i64"]],["self"]]],[11,"add_assign","","",78,[[["self"],["i64"]]]],[11,"sub_assign","","",78,[[["self"],["i64"]]]],[11,"mul_assign","","",78,[[["self"],["i64"]]]],[11,"div_assign","","",78,[[["self"],["i64"]]]],[11,"rem_assign","","",78,[[["self"],["i64"]]]],[11,"not","","",78,[[["self"]],["self"]]],[11,"bitxor","","",78,[[["self"],["self"]],["self"]]],[11,"bitand","","",78,[[["self"],["self"]],["self"]]],[11,"bitor","","",78,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",78,[[["self"],["self"]]]],[11,"bitor_assign","","",78,[[["self"],["self"]]]],[11,"bitxor_assign","","",78,[[["self"],["self"]]]],[11,"bitxor","","",78,[[["self"],["i64"]],["self"]]],[11,"bitand","","",78,[[["self"],["i64"]],["self"]]],[11,"bitor","","",78,[[["self"],["i64"]],["self"]]],[11,"bitand_assign","","",78,[[["self"],["i64"]]]],[11,"bitor_assign","","",78,[[["self"],["i64"]]]],[11,"bitxor_assign","","",78,[[["self"],["i64"]]]],[11,"shl","","",78,[[["self"],["self"]],["self"]]],[11,"shr","","",78,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",78,[[["self"],["self"]]]],[11,"shr_assign","","",78,[[["self"],["self"]]]],[11,"shl","","",78,[[["self"],["u32"]],["self"]]],[11,"shr","","",78,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",78,[[["self"],["u32"]]]],[11,"shr_assign","","",78,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",78,[[["self"],["i64x8"]],["i64x8"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",78,[[["self"],["i64x8"]],["i64x8"]]],[11,"neg","","",78,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",78,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",78,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",78,[[["self"]],["i64"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",78,[[["self"]],["i64"]]],[11,"sum","","",78,[[["i"]],["i64x8"]]],[11,"product","","",78,[[["i"]],["i64x8"]]],[11,"sum","","",78,[[["i"]],["i64x8"]]],[11,"product","","",78,[[["i"]],["i64x8"]]],[11,"max_element","","Largest vector element value.",78,[[["self"]],["i64"]]],[11,"min_element","","Smallest vector element value.",78,[[["self"]],["i64"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",78,[[["self"]],["i64"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",78,[[["self"]],["i64"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",78,[[["self"]],["i64"]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"from","","",78,N],[11,"from","","",78,[[["i8x8"]],["self"]]],[11,"from","","",78,[[["u8x8"]],["self"]]],[11,"from","","",78,[[["i16x8"]],["self"]]],[11,"from","","",78,[[["u16x8"]],["self"]]],[11,"from","","",78,[[["i32x8"]],["self"]]],[11,"from","","",78,[[["u32x8"]],["self"]]],[11,"default","","",78,[[],["self"]]],[11,"hash","","",78,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",78,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",78,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",78,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",78,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",78,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",78,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",78,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",78,N],[11,"swap_bytes","","Reverses the byte order of the vector.",78,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",78,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",78,[[["self"]],["self"]]],[11,"eq","","",78,[[["self"],["self"]],["bool"]]],[11,"ne","","",78,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",78,[[["self"],["self"]],["m64x8"]]],[11,"ne","","Lane-wise inequality comparison.",78,[[["self"],["self"]],["m64x8"]]],[11,"lt","","Lane-wise less-than comparison.",78,[[["self"],["self"]],["m64x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",78,[[["self"],["self"]],["m64x8"]]],[11,"gt","","Lane-wise greater-than comparison.",78,[[["self"],["self"]],["m64x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",78,[[["self"],["self"]],["m64x8"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",78,[[["self"]],["lexicographicallyordered",["i64x8"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",78,[[["self"]],["lexicographicallyordered",["i64x8"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",79,[[["u64"],["u64"],["u64"],["u64"],["u64"],["u64"],["u64"],["u64"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",79,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",79,[[["u64"]],["self"]]],[11,"extract","","Extracts the value at `index`.",79,[[["self"],["usize"]],["u64"]]],[11,"extract_unchecked","","Extracts the value at `index`.",79,[[["self"],["usize"]],["u64"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",79,[[["self"],["usize"],["u64"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",79,[[["self"],["usize"],["u64"]],["self"]]],[11,"add","","",79,[[["self"],["self"]],["self"]]],[11,"sub","","",79,[[["self"],["self"]],["self"]]],[11,"mul","","",79,[[["self"],["self"]],["self"]]],[11,"div","","",79,[[["self"],["self"]],["self"]]],[11,"rem","","",79,[[["self"],["self"]],["self"]]],[11,"add_assign","","",79,[[["self"],["self"]]]],[11,"sub_assign","","",79,[[["self"],["self"]]]],[11,"mul_assign","","",79,[[["self"],["self"]]]],[11,"div_assign","","",79,[[["self"],["self"]]]],[11,"rem_assign","","",79,[[["self"],["self"]]]],[11,"add","","",79,[[["self"],["u64"]],["self"]]],[11,"sub","","",79,[[["self"],["u64"]],["self"]]],[11,"mul","","",79,[[["self"],["u64"]],["self"]]],[11,"div","","",79,[[["self"],["u64"]],["self"]]],[11,"rem","","",79,[[["self"],["u64"]],["self"]]],[11,"add_assign","","",79,[[["self"],["u64"]]]],[11,"sub_assign","","",79,[[["self"],["u64"]]]],[11,"mul_assign","","",79,[[["self"],["u64"]]]],[11,"div_assign","","",79,[[["self"],["u64"]]]],[11,"rem_assign","","",79,[[["self"],["u64"]]]],[11,"not","","",79,[[["self"]],["self"]]],[11,"bitxor","","",79,[[["self"],["self"]],["self"]]],[11,"bitand","","",79,[[["self"],["self"]],["self"]]],[11,"bitor","","",79,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",79,[[["self"],["self"]]]],[11,"bitor_assign","","",79,[[["self"],["self"]]]],[11,"bitxor_assign","","",79,[[["self"],["self"]]]],[11,"bitxor","","",79,[[["self"],["u64"]],["self"]]],[11,"bitand","","",79,[[["self"],["u64"]],["self"]]],[11,"bitor","","",79,[[["self"],["u64"]],["self"]]],[11,"bitand_assign","","",79,[[["self"],["u64"]]]],[11,"bitor_assign","","",79,[[["self"],["u64"]]]],[11,"bitxor_assign","","",79,[[["self"],["u64"]]]],[11,"shl","","",79,[[["self"],["self"]],["self"]]],[11,"shr","","",79,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",79,[[["self"],["self"]]]],[11,"shr_assign","","",79,[[["self"],["self"]]]],[11,"shl","","",79,[[["self"],["u32"]],["self"]]],[11,"shr","","",79,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",79,[[["self"],["u32"]]]],[11,"shr_assign","","",79,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",79,[[["self"],["u64x8"]],["u64x8"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",79,[[["self"],["u64x8"]],["u64x8"]]],[11,"min","","Minimum of two vectors.",79,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",79,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",79,[[["self"]],["u64"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",79,[[["self"]],["u64"]]],[11,"sum","","",79,[[["i"]],["u64x8"]]],[11,"product","","",79,[[["i"]],["u64x8"]]],[11,"sum","","",79,[[["i"]],["u64x8"]]],[11,"product","","",79,[[["i"]],["u64x8"]]],[11,"max_element","","Largest vector element value.",79,[[["self"]],["u64"]]],[11,"min_element","","Smallest vector element value.",79,[[["self"]],["u64"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",79,[[["self"]],["u64"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",79,[[["self"]],["u64"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",79,[[["self"]],["u64"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"from","","",79,N],[11,"from","","",79,[[["u8x8"]],["self"]]],[11,"from","","",79,[[["u16x8"]],["self"]]],[11,"from","","",79,[[["u32x8"]],["self"]]],[11,"default","","",79,[[],["self"]]],[11,"hash","","",79,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",79,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",79,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",79,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",79,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",79,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",79,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",79,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",79,N],[11,"swap_bytes","","Reverses the byte order of the vector.",79,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",79,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",79,[[["self"]],["self"]]],[11,"shuffle1_dyn","","Shuffle vector elements according to `indices`.",79,[[["self"],["self"]],["self"]]],[11,"eq","","",79,[[["self"],["self"]],["bool"]]],[11,"ne","","",79,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",79,[[["self"],["self"]],["m64x8"]]],[11,"ne","","Lane-wise inequality comparison.",79,[[["self"],["self"]],["m64x8"]]],[11,"lt","","Lane-wise less-than comparison.",79,[[["self"],["self"]],["m64x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",79,[[["self"],["self"]],["m64x8"]]],[11,"gt","","Lane-wise greater-than comparison.",79,[[["self"],["self"]],["m64x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",79,[[["self"],["self"]],["m64x8"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",79,[[["self"]],["lexicographicallyordered",["u64x8"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",79,[[["self"]],["lexicographicallyordered",["u64x8"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",80,[[["f64"],["f64"],["f64"],["f64"],["f64"],["f64"],["f64"],["f64"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",80,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",80,[[["f64"]],["self"]]],[11,"extract","","Extracts the value at `index`.",80,[[["self"],["usize"]],["f64"]]],[11,"extract_unchecked","","Extracts the value at `index`.",80,[[["self"],["usize"]],["f64"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",80,[[["self"],["usize"],["f64"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",80,[[["self"],["usize"],["f64"]],["self"]]],[11,"add","","",80,[[["self"],["self"]],["self"]]],[11,"sub","","",80,[[["self"],["self"]],["self"]]],[11,"mul","","",80,[[["self"],["self"]],["self"]]],[11,"div","","",80,[[["self"],["self"]],["self"]]],[11,"rem","","",80,[[["self"],["self"]],["self"]]],[11,"add_assign","","",80,[[["self"],["self"]]]],[11,"sub_assign","","",80,[[["self"],["self"]]]],[11,"mul_assign","","",80,[[["self"],["self"]]]],[11,"div_assign","","",80,[[["self"],["self"]]]],[11,"rem_assign","","",80,[[["self"],["self"]]]],[11,"add","","",80,[[["self"],["f64"]],["self"]]],[11,"sub","","",80,[[["self"],["f64"]],["self"]]],[11,"mul","","",80,[[["self"],["f64"]],["self"]]],[11,"div","","",80,[[["self"],["f64"]],["self"]]],[11,"rem","","",80,[[["self"],["f64"]],["self"]]],[11,"add_assign","","",80,[[["self"],["f64"]]]],[11,"sub_assign","","",80,[[["self"],["f64"]]]],[11,"mul_assign","","",80,[[["self"],["f64"]]]],[11,"div_assign","","",80,[[["self"],["f64"]]]],[11,"rem_assign","","",80,[[["self"],["f64"]]]],[11,"neg","","",80,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",80,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",80,[[["self"],["self"]],["self"]]],[11,"sum","","Horizontal sum of the vector elements.",80,[[["self"]],["f64"]]],[11,"product","","Horizontal product of the vector elements.",80,[[["self"]],["f64"]]],[11,"sum","","",80,[[["i"]],["f64x8"]]],[11,"product","","",80,[[["i"]],["f64x8"]]],[11,"sum","","",80,[[["i"]],["f64x8"]]],[11,"product","","",80,[[["i"]],["f64x8"]]],[11,"max_element","","Largest vector element value.",80,[[["self"]],["f64"]]],[11,"min_element","","Smallest vector element value.",80,[[["self"]],["f64"]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"from","","",80,N],[11,"from","","",80,[[["i8x8"]],["self"]]],[11,"from","","",80,[[["u8x8"]],["self"]]],[11,"from","","",80,[[["i16x8"]],["self"]]],[11,"from","","",80,[[["u16x8"]],["self"]]],[11,"from","","",80,[[["i32x8"]],["self"]]],[11,"from","","",80,[[["u32x8"]],["self"]]],[11,"from","","",80,[[["f32x8"]],["self"]]],[11,"default","","",80,[[],["self"]]],[11,"eq","","",80,[[["self"],["self"]],["bool"]]],[11,"ne","","",80,[[["self"],["self"]],["bool"]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",80,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",80,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",80,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",80,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",80,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",80,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",80,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",80,N],[11,"abs","","Absolute value.",80,[[["self"]],["self"]]],[11,"cos","","Cosine.",80,[[["self"]],["self"]]],[11,"cos_pi","","Cosine of `self * PI`.",80,[[["self"]],["self"]]],[11,"exp","","Returns the exponential function of `self`: `e^(self)`.",80,[[["self"]],["self"]]],[11,"ln","","Returns the natural logarithm of `self`.",80,[[["self"]],["self"]]],[11,"mul_add","","Fused multiply add: `self * y + z`",80,[[["self"],["self"],["self"]],["self"]]],[11,"mul_adde","","Fused multiply add estimate: ~= `self * y + z`",80,[[["self"],["self"],["self"]],["self"]]],[11,"powf","","Raises `self` number to the floating point power of `x`.",80,[[["self"],["self"]],["self"]]],[11,"recpre","","Reciprocal estimate: `~= 1. / self`.",80,[[["self"]],["self"]]],[11,"rsqrte","","Reciprocal square-root estimate: `~= 1. / self.sqrt()`.",80,[[["self"]],["self"]]],[11,"sin","","Sine.",80,[[["self"]],["self"]]],[11,"sin_pi","","Sine of `self * PI`.",80,[[["self"]],["self"]]],[11,"sin_cos_pi","","Sine and cosine of `self * PI`.",80,N],[11,"sqrt","","",80,[[["self"]],["self"]]],[11,"sqrte","","Square-root estimate.",80,[[["self"]],["self"]]],[11,"eq","","Lane-wise equality comparison.",80,[[["self"],["self"]],["m64x8"]]],[11,"ne","","Lane-wise inequality comparison.",80,[[["self"],["self"]],["m64x8"]]],[11,"lt","","Lane-wise less-than comparison.",80,[[["self"],["self"]],["m64x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",80,[[["self"],["self"]],["m64x8"]]],[11,"gt","","Lane-wise greater-than comparison.",80,[[["self"],["self"]],["m64x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",80,[[["self"],["self"]],["m64x8"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",81,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",81,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",81,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",81,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",81,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",81,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",81,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",81,[[["self"]],["self"]]],[11,"bitxor","","",81,[[["self"],["self"]],["self"]]],[11,"bitand","","",81,[[["self"],["self"]],["self"]]],[11,"bitor","","",81,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",81,[[["self"],["self"]]]],[11,"bitor_assign","","",81,[[["self"],["self"]]]],[11,"bitxor_assign","","",81,[[["self"],["self"]]]],[11,"bitxor","","",81,[[["self"],["bool"]],["self"]]],[11,"bitand","","",81,[[["self"],["bool"]],["self"]]],[11,"bitor","","",81,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",81,[[["self"],["bool"]]]],[11,"bitor_assign","","",81,[[["self"],["bool"]]]],[11,"bitxor_assign","","",81,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",81,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",81,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",81,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",81,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",81,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",81,[[["self"]],["bool"]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"from","","",81,N],[11,"from","","",81,[[["m8x8"]],["self"]]],[11,"from","","",81,[[["m16x8"]],["self"]]],[11,"from","","",81,[[["m32x8"]],["self"]]],[11,"default","","",81,[[],["self"]]],[11,"eq","","",81,[[["self"],["self"]],["bool"]]],[11,"ne","","",81,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",81,[[["self"],["self"]],["m64x8"]]],[11,"ne","","Lane-wise inequality comparison.",81,[[["self"],["self"]],["m64x8"]]],[11,"lt","","Lane-wise less-than comparison.",81,[[["self"],["self"]],["m64x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",81,[[["self"],["self"]],["m64x8"]]],[11,"gt","","Lane-wise greater-than comparison.",81,[[["self"],["self"]],["m64x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",81,[[["self"],["self"]],["m64x8"]]],[11,"select","","Selects elements of `a` and `b` using mask.",81,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",81,[[["self"]],["lexicographicallyordered",["m64x8"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",81,[[["self"]],["lexicographicallyordered",["m64x8"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",82,[[["i128"],["i128"],["i128"],["i128"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",82,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",82,[[["i128"]],["self"]]],[11,"extract","","Extracts the value at `index`.",82,[[["self"],["usize"]],["i128"]]],[11,"extract_unchecked","","Extracts the value at `index`.",82,[[["self"],["usize"]],["i128"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",82,[[["self"],["usize"],["i128"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",82,[[["self"],["usize"],["i128"]],["self"]]],[11,"add","","",82,[[["self"],["self"]],["self"]]],[11,"sub","","",82,[[["self"],["self"]],["self"]]],[11,"mul","","",82,[[["self"],["self"]],["self"]]],[11,"div","","",82,[[["self"],["self"]],["self"]]],[11,"rem","","",82,[[["self"],["self"]],["self"]]],[11,"add_assign","","",82,[[["self"],["self"]]]],[11,"sub_assign","","",82,[[["self"],["self"]]]],[11,"mul_assign","","",82,[[["self"],["self"]]]],[11,"div_assign","","",82,[[["self"],["self"]]]],[11,"rem_assign","","",82,[[["self"],["self"]]]],[11,"add","","",82,[[["self"],["i128"]],["self"]]],[11,"sub","","",82,[[["self"],["i128"]],["self"]]],[11,"mul","","",82,[[["self"],["i128"]],["self"]]],[11,"div","","",82,[[["self"],["i128"]],["self"]]],[11,"rem","","",82,[[["self"],["i128"]],["self"]]],[11,"add_assign","","",82,[[["self"],["i128"]]]],[11,"sub_assign","","",82,[[["self"],["i128"]]]],[11,"mul_assign","","",82,[[["self"],["i128"]]]],[11,"div_assign","","",82,[[["self"],["i128"]]]],[11,"rem_assign","","",82,[[["self"],["i128"]]]],[11,"not","","",82,[[["self"]],["self"]]],[11,"bitxor","","",82,[[["self"],["self"]],["self"]]],[11,"bitand","","",82,[[["self"],["self"]],["self"]]],[11,"bitor","","",82,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",82,[[["self"],["self"]]]],[11,"bitor_assign","","",82,[[["self"],["self"]]]],[11,"bitxor_assign","","",82,[[["self"],["self"]]]],[11,"bitxor","","",82,[[["self"],["i128"]],["self"]]],[11,"bitand","","",82,[[["self"],["i128"]],["self"]]],[11,"bitor","","",82,[[["self"],["i128"]],["self"]]],[11,"bitand_assign","","",82,[[["self"],["i128"]]]],[11,"bitor_assign","","",82,[[["self"],["i128"]]]],[11,"bitxor_assign","","",82,[[["self"],["i128"]]]],[11,"shl","","",82,[[["self"],["self"]],["self"]]],[11,"shr","","",82,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",82,[[["self"],["self"]]]],[11,"shr_assign","","",82,[[["self"],["self"]]]],[11,"shl","","",82,[[["self"],["u32"]],["self"]]],[11,"shr","","",82,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",82,[[["self"],["u32"]]]],[11,"shr_assign","","",82,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",82,[[["self"],["i128x4"]],["i128x4"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",82,[[["self"],["i128x4"]],["i128x4"]]],[11,"neg","","",82,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",82,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",82,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",82,[[["self"]],["i128"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",82,[[["self"]],["i128"]]],[11,"sum","","",82,[[["i"]],["i128x4"]]],[11,"product","","",82,[[["i"]],["i128x4"]]],[11,"sum","","",82,[[["i"]],["i128x4"]]],[11,"product","","",82,[[["i"]],["i128x4"]]],[11,"max_element","","Largest vector element value.",82,[[["self"]],["i128"]]],[11,"min_element","","Smallest vector element value.",82,[[["self"]],["i128"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",82,[[["self"]],["i128"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",82,[[["self"]],["i128"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",82,[[["self"]],["i128"]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"from","","",82,N],[11,"from","","",82,[[["i8x4"]],["self"]]],[11,"from","","",82,[[["u8x4"]],["self"]]],[11,"from","","",82,[[["i16x4"]],["self"]]],[11,"from","","",82,[[["u16x4"]],["self"]]],[11,"from","","",82,[[["i32x4"]],["self"]]],[11,"from","","",82,[[["u32x4"]],["self"]]],[11,"from","","",82,[[["i64x4"]],["self"]]],[11,"from","","",82,[[["u64x4"]],["self"]]],[11,"default","","",82,[[],["self"]]],[11,"hash","","",82,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",82,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",82,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",82,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",82,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",82,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",82,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",82,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",82,N],[11,"swap_bytes","","Reverses the byte order of the vector.",82,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",82,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",82,[[["self"]],["self"]]],[11,"eq","","",82,[[["self"],["self"]],["bool"]]],[11,"ne","","",82,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",82,[[["self"],["self"]],["m128x4"]]],[11,"ne","","Lane-wise inequality comparison.",82,[[["self"],["self"]],["m128x4"]]],[11,"lt","","Lane-wise less-than comparison.",82,[[["self"],["self"]],["m128x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",82,[[["self"],["self"]],["m128x4"]]],[11,"gt","","Lane-wise greater-than comparison.",82,[[["self"],["self"]],["m128x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",82,[[["self"],["self"]],["m128x4"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",82,[[["self"]],["lexicographicallyordered",["i128x4"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",82,[[["self"]],["lexicographicallyordered",["i128x4"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",83,[[["u128"],["u128"],["u128"],["u128"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",83,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",83,[[["u128"]],["self"]]],[11,"extract","","Extracts the value at `index`.",83,[[["self"],["usize"]],["u128"]]],[11,"extract_unchecked","","Extracts the value at `index`.",83,[[["self"],["usize"]],["u128"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",83,[[["self"],["usize"],["u128"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",83,[[["self"],["usize"],["u128"]],["self"]]],[11,"add","","",83,[[["self"],["self"]],["self"]]],[11,"sub","","",83,[[["self"],["self"]],["self"]]],[11,"mul","","",83,[[["self"],["self"]],["self"]]],[11,"div","","",83,[[["self"],["self"]],["self"]]],[11,"rem","","",83,[[["self"],["self"]],["self"]]],[11,"add_assign","","",83,[[["self"],["self"]]]],[11,"sub_assign","","",83,[[["self"],["self"]]]],[11,"mul_assign","","",83,[[["self"],["self"]]]],[11,"div_assign","","",83,[[["self"],["self"]]]],[11,"rem_assign","","",83,[[["self"],["self"]]]],[11,"add","","",83,[[["self"],["u128"]],["self"]]],[11,"sub","","",83,[[["self"],["u128"]],["self"]]],[11,"mul","","",83,[[["self"],["u128"]],["self"]]],[11,"div","","",83,[[["self"],["u128"]],["self"]]],[11,"rem","","",83,[[["self"],["u128"]],["self"]]],[11,"add_assign","","",83,[[["self"],["u128"]]]],[11,"sub_assign","","",83,[[["self"],["u128"]]]],[11,"mul_assign","","",83,[[["self"],["u128"]]]],[11,"div_assign","","",83,[[["self"],["u128"]]]],[11,"rem_assign","","",83,[[["self"],["u128"]]]],[11,"not","","",83,[[["self"]],["self"]]],[11,"bitxor","","",83,[[["self"],["self"]],["self"]]],[11,"bitand","","",83,[[["self"],["self"]],["self"]]],[11,"bitor","","",83,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",83,[[["self"],["self"]]]],[11,"bitor_assign","","",83,[[["self"],["self"]]]],[11,"bitxor_assign","","",83,[[["self"],["self"]]]],[11,"bitxor","","",83,[[["self"],["u128"]],["self"]]],[11,"bitand","","",83,[[["self"],["u128"]],["self"]]],[11,"bitor","","",83,[[["self"],["u128"]],["self"]]],[11,"bitand_assign","","",83,[[["self"],["u128"]]]],[11,"bitor_assign","","",83,[[["self"],["u128"]]]],[11,"bitxor_assign","","",83,[[["self"],["u128"]]]],[11,"shl","","",83,[[["self"],["self"]],["self"]]],[11,"shr","","",83,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",83,[[["self"],["self"]]]],[11,"shr_assign","","",83,[[["self"],["self"]]]],[11,"shl","","",83,[[["self"],["u32"]],["self"]]],[11,"shr","","",83,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",83,[[["self"],["u32"]]]],[11,"shr_assign","","",83,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",83,[[["self"],["u128x4"]],["u128x4"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",83,[[["self"],["u128x4"]],["u128x4"]]],[11,"min","","Minimum of two vectors.",83,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",83,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",83,[[["self"]],["u128"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",83,[[["self"]],["u128"]]],[11,"sum","","",83,[[["i"]],["u128x4"]]],[11,"product","","",83,[[["i"]],["u128x4"]]],[11,"sum","","",83,[[["i"]],["u128x4"]]],[11,"product","","",83,[[["i"]],["u128x4"]]],[11,"max_element","","Largest vector element value.",83,[[["self"]],["u128"]]],[11,"min_element","","Smallest vector element value.",83,[[["self"]],["u128"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",83,[[["self"]],["u128"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",83,[[["self"]],["u128"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",83,[[["self"]],["u128"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"from","","",83,N],[11,"from","","",83,[[["u8x4"]],["self"]]],[11,"from","","",83,[[["u16x4"]],["self"]]],[11,"from","","",83,[[["u32x4"]],["self"]]],[11,"from","","",83,[[["u64x4"]],["self"]]],[11,"default","","",83,[[],["self"]]],[11,"hash","","",83,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",83,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",83,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",83,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",83,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",83,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",83,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",83,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",83,N],[11,"swap_bytes","","Reverses the byte order of the vector.",83,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",83,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",83,[[["self"]],["self"]]],[11,"shuffle1_dyn","","Shuffle vector elements according to `indices`.",83,[[["self"],["self"]],["self"]]],[11,"eq","","",83,[[["self"],["self"]],["bool"]]],[11,"ne","","",83,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",83,[[["self"],["self"]],["m128x4"]]],[11,"ne","","Lane-wise inequality comparison.",83,[[["self"],["self"]],["m128x4"]]],[11,"lt","","Lane-wise less-than comparison.",83,[[["self"],["self"]],["m128x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",83,[[["self"],["self"]],["m128x4"]]],[11,"gt","","Lane-wise greater-than comparison.",83,[[["self"],["self"]],["m128x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",83,[[["self"],["self"]],["m128x4"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",83,[[["self"]],["lexicographicallyordered",["u128x4"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",83,[[["self"]],["lexicographicallyordered",["u128x4"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",84,[[["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",84,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",84,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",84,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",84,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",84,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",84,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",84,[[["self"]],["self"]]],[11,"bitxor","","",84,[[["self"],["self"]],["self"]]],[11,"bitand","","",84,[[["self"],["self"]],["self"]]],[11,"bitor","","",84,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",84,[[["self"],["self"]]]],[11,"bitor_assign","","",84,[[["self"],["self"]]]],[11,"bitxor_assign","","",84,[[["self"],["self"]]]],[11,"bitxor","","",84,[[["self"],["bool"]],["self"]]],[11,"bitand","","",84,[[["self"],["bool"]],["self"]]],[11,"bitor","","",84,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",84,[[["self"],["bool"]]]],[11,"bitor_assign","","",84,[[["self"],["bool"]]]],[11,"bitxor_assign","","",84,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",84,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",84,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",84,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",84,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",84,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",84,[[["self"]],["bool"]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"from","","",84,N],[11,"from","","",84,[[["m8x4"]],["self"]]],[11,"from","","",84,[[["m16x4"]],["self"]]],[11,"from","","",84,[[["m32x4"]],["self"]]],[11,"from","","",84,[[["m64x4"]],["self"]]],[11,"default","","",84,[[],["self"]]],[11,"eq","","",84,[[["self"],["self"]],["bool"]]],[11,"ne","","",84,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",84,[[["self"],["self"]],["m128x4"]]],[11,"ne","","Lane-wise inequality comparison.",84,[[["self"],["self"]],["m128x4"]]],[11,"lt","","Lane-wise less-than comparison.",84,[[["self"],["self"]],["m128x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",84,[[["self"],["self"]],["m128x4"]]],[11,"gt","","Lane-wise greater-than comparison.",84,[[["self"],["self"]],["m128x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",84,[[["self"],["self"]],["m128x4"]]],[11,"select","","Selects elements of `a` and `b` using mask.",84,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",84,[[["self"]],["lexicographicallyordered",["m128x4"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",84,[[["self"]],["lexicographicallyordered",["m128x4"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",45,[[["isize"],["isize"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",45,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",45,[[["isize"]],["self"]]],[11,"extract","","Extracts the value at `index`.",45,[[["self"],["usize"]],["isize"]]],[11,"extract_unchecked","","Extracts the value at `index`.",45,[[["self"],["usize"]],["isize"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",45,[[["self"],["usize"],["isize"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",45,[[["self"],["usize"],["isize"]],["self"]]],[11,"add","","",45,[[["self"],["self"]],["self"]]],[11,"sub","","",45,[[["self"],["self"]],["self"]]],[11,"mul","","",45,[[["self"],["self"]],["self"]]],[11,"div","","",45,[[["self"],["self"]],["self"]]],[11,"rem","","",45,[[["self"],["self"]],["self"]]],[11,"add_assign","","",45,[[["self"],["self"]]]],[11,"sub_assign","","",45,[[["self"],["self"]]]],[11,"mul_assign","","",45,[[["self"],["self"]]]],[11,"div_assign","","",45,[[["self"],["self"]]]],[11,"rem_assign","","",45,[[["self"],["self"]]]],[11,"add","","",45,[[["self"],["isize"]],["self"]]],[11,"sub","","",45,[[["self"],["isize"]],["self"]]],[11,"mul","","",45,[[["self"],["isize"]],["self"]]],[11,"div","","",45,[[["self"],["isize"]],["self"]]],[11,"rem","","",45,[[["self"],["isize"]],["self"]]],[11,"add_assign","","",45,[[["self"],["isize"]]]],[11,"sub_assign","","",45,[[["self"],["isize"]]]],[11,"mul_assign","","",45,[[["self"],["isize"]]]],[11,"div_assign","","",45,[[["self"],["isize"]]]],[11,"rem_assign","","",45,[[["self"],["isize"]]]],[11,"not","","",45,[[["self"]],["self"]]],[11,"bitxor","","",45,[[["self"],["self"]],["self"]]],[11,"bitand","","",45,[[["self"],["self"]],["self"]]],[11,"bitor","","",45,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",45,[[["self"],["self"]]]],[11,"bitor_assign","","",45,[[["self"],["self"]]]],[11,"bitxor_assign","","",45,[[["self"],["self"]]]],[11,"bitxor","","",45,[[["self"],["isize"]],["self"]]],[11,"bitand","","",45,[[["self"],["isize"]],["self"]]],[11,"bitor","","",45,[[["self"],["isize"]],["self"]]],[11,"bitand_assign","","",45,[[["self"],["isize"]]]],[11,"bitor_assign","","",45,[[["self"],["isize"]]]],[11,"bitxor_assign","","",45,[[["self"],["isize"]]]],[11,"shl","","",45,[[["self"],["self"]],["self"]]],[11,"shr","","",45,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",45,[[["self"],["self"]]]],[11,"shr_assign","","",45,[[["self"],["self"]]]],[11,"shl","","",45,[[["self"],["u32"]],["self"]]],[11,"shr","","",45,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",45,[[["self"],["u32"]]]],[11,"shr_assign","","",45,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",45,[[["self"],["isizex2"]],["isizex2"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",45,[[["self"],["isizex2"]],["isizex2"]]],[11,"neg","","",45,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",45,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",45,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",45,[[["self"]],["isize"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",45,[[["self"]],["isize"]]],[11,"sum","","",45,[[["i"]],["isizex2"]]],[11,"product","","",45,[[["i"]],["isizex2"]]],[11,"sum","","",45,[[["i"]],["isizex2"]]],[11,"product","","",45,[[["i"]],["isizex2"]]],[11,"max_element","","Largest vector element value.",45,[[["self"]],["isize"]]],[11,"min_element","","Smallest vector element value.",45,[[["self"]],["isize"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",45,[[["self"]],["isize"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",45,[[["self"]],["isize"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",45,[[["self"]],["isize"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"from","","",45,N],[11,"default","","",45,[[],["self"]]],[11,"hash","","",45,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",45,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",45,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",45,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",45,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",45,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",45,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",45,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",45,N],[11,"swap_bytes","","Reverses the byte order of the vector.",45,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",45,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",45,[[["self"]],["self"]]],[11,"eq","","",45,[[["self"],["self"]],["bool"]]],[11,"ne","","",45,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",45,[[["self"],["self"]],["msizex2"]]],[11,"ne","","Lane-wise inequality comparison.",45,[[["self"],["self"]],["msizex2"]]],[11,"lt","","Lane-wise less-than comparison.",45,[[["self"],["self"]],["msizex2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",45,[[["self"],["self"]],["msizex2"]]],[11,"gt","","Lane-wise greater-than comparison.",45,[[["self"],["self"]],["msizex2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",45,[[["self"],["self"]],["msizex2"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",45,[[["self"]],["lexicographicallyordered",["isizex2"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",45,[[["self"]],["lexicographicallyordered",["isizex2"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",46,[[["usize"],["usize"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",46,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",46,[[["usize"]],["self"]]],[11,"extract","","Extracts the value at `index`.",46,[[["self"],["usize"]],["usize"]]],[11,"extract_unchecked","","Extracts the value at `index`.",46,[[["self"],["usize"]],["usize"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",46,[[["self"],["usize"],["usize"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",46,[[["self"],["usize"],["usize"]],["self"]]],[11,"add","","",46,[[["self"],["self"]],["self"]]],[11,"sub","","",46,[[["self"],["self"]],["self"]]],[11,"mul","","",46,[[["self"],["self"]],["self"]]],[11,"div","","",46,[[["self"],["self"]],["self"]]],[11,"rem","","",46,[[["self"],["self"]],["self"]]],[11,"add_assign","","",46,[[["self"],["self"]]]],[11,"sub_assign","","",46,[[["self"],["self"]]]],[11,"mul_assign","","",46,[[["self"],["self"]]]],[11,"div_assign","","",46,[[["self"],["self"]]]],[11,"rem_assign","","",46,[[["self"],["self"]]]],[11,"add","","",46,[[["self"],["usize"]],["self"]]],[11,"sub","","",46,[[["self"],["usize"]],["self"]]],[11,"mul","","",46,[[["self"],["usize"]],["self"]]],[11,"div","","",46,[[["self"],["usize"]],["self"]]],[11,"rem","","",46,[[["self"],["usize"]],["self"]]],[11,"add_assign","","",46,[[["self"],["usize"]]]],[11,"sub_assign","","",46,[[["self"],["usize"]]]],[11,"mul_assign","","",46,[[["self"],["usize"]]]],[11,"div_assign","","",46,[[["self"],["usize"]]]],[11,"rem_assign","","",46,[[["self"],["usize"]]]],[11,"not","","",46,[[["self"]],["self"]]],[11,"bitxor","","",46,[[["self"],["self"]],["self"]]],[11,"bitand","","",46,[[["self"],["self"]],["self"]]],[11,"bitor","","",46,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",46,[[["self"],["self"]]]],[11,"bitor_assign","","",46,[[["self"],["self"]]]],[11,"bitxor_assign","","",46,[[["self"],["self"]]]],[11,"bitxor","","",46,[[["self"],["usize"]],["self"]]],[11,"bitand","","",46,[[["self"],["usize"]],["self"]]],[11,"bitor","","",46,[[["self"],["usize"]],["self"]]],[11,"bitand_assign","","",46,[[["self"],["usize"]]]],[11,"bitor_assign","","",46,[[["self"],["usize"]]]],[11,"bitxor_assign","","",46,[[["self"],["usize"]]]],[11,"shl","","",46,[[["self"],["self"]],["self"]]],[11,"shr","","",46,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",46,[[["self"],["self"]]]],[11,"shr_assign","","",46,[[["self"],["self"]]]],[11,"shl","","",46,[[["self"],["u32"]],["self"]]],[11,"shr","","",46,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",46,[[["self"],["u32"]]]],[11,"shr_assign","","",46,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",46,[[["self"],["usizex2"]],["usizex2"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",46,[[["self"],["usizex2"]],["usizex2"]]],[11,"min","","Minimum of two vectors.",46,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",46,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",46,[[["self"]],["usize"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",46,[[["self"]],["usize"]]],[11,"sum","","",46,[[["i"]],["usizex2"]]],[11,"product","","",46,[[["i"]],["usizex2"]]],[11,"sum","","",46,[[["i"]],["usizex2"]]],[11,"product","","",46,[[["i"]],["usizex2"]]],[11,"max_element","","Largest vector element value.",46,[[["self"]],["usize"]]],[11,"min_element","","Smallest vector element value.",46,[[["self"]],["usize"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",46,[[["self"]],["usize"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",46,[[["self"]],["usize"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",46,[[["self"]],["usize"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"from","","",46,N],[11,"default","","",46,[[],["self"]]],[11,"hash","","",46,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",46,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",46,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",46,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",46,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",46,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",46,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",46,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",46,N],[11,"swap_bytes","","Reverses the byte order of the vector.",46,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",46,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",46,[[["self"]],["self"]]],[11,"shuffle1_dyn","","Shuffle vector elements according to `indices`.",46,[[["self"],["self"]],["self"]]],[11,"eq","","",46,[[["self"],["self"]],["bool"]]],[11,"ne","","",46,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",46,[[["self"],["self"]],["msizex2"]]],[11,"ne","","Lane-wise inequality comparison.",46,[[["self"],["self"]],["msizex2"]]],[11,"lt","","Lane-wise less-than comparison.",46,[[["self"],["self"]],["msizex2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",46,[[["self"],["self"]],["msizex2"]]],[11,"gt","","Lane-wise greater-than comparison.",46,[[["self"],["self"]],["msizex2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",46,[[["self"],["self"]],["msizex2"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",46,[[["self"]],["lexicographicallyordered",["usizex2"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",46,[[["self"]],["lexicographicallyordered",["usizex2"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",47,[[["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",47,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",47,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",47,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",47,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",47,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",47,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",47,[[["self"]],["self"]]],[11,"bitxor","","",47,[[["self"],["self"]],["self"]]],[11,"bitand","","",47,[[["self"],["self"]],["self"]]],[11,"bitor","","",47,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",47,[[["self"],["self"]]]],[11,"bitor_assign","","",47,[[["self"],["self"]]]],[11,"bitxor_assign","","",47,[[["self"],["self"]]]],[11,"bitxor","","",47,[[["self"],["bool"]],["self"]]],[11,"bitand","","",47,[[["self"],["bool"]],["self"]]],[11,"bitor","","",47,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",47,[[["self"],["bool"]]]],[11,"bitor_assign","","",47,[[["self"],["bool"]]]],[11,"bitxor_assign","","",47,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",47,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",47,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",47,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",47,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",47,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",47,[[["self"]],["bool"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"from","","",47,N],[11,"default","","",47,[[],["self"]]],[11,"eq","","",47,[[["self"],["self"]],["bool"]]],[11,"ne","","",47,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",47,[[["self"],["self"]],["msizex2"]]],[11,"ne","","Lane-wise inequality comparison.",47,[[["self"],["self"]],["msizex2"]]],[11,"lt","","Lane-wise less-than comparison.",47,[[["self"],["self"]],["msizex2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",47,[[["self"],["self"]],["msizex2"]]],[11,"gt","","Lane-wise greater-than comparison.",47,[[["self"],["self"]],["msizex2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",47,[[["self"],["self"]],["msizex2"]]],[11,"select","","Selects elements of `a` and `b` using mask.",47,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",47,[[["self"]],["lexicographicallyordered",["msizex2"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",47,[[["self"]],["lexicographicallyordered",["msizex2"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",65,[[["isize"],["isize"],["isize"],["isize"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",65,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",65,[[["isize"]],["self"]]],[11,"extract","","Extracts the value at `index`.",65,[[["self"],["usize"]],["isize"]]],[11,"extract_unchecked","","Extracts the value at `index`.",65,[[["self"],["usize"]],["isize"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",65,[[["self"],["usize"],["isize"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",65,[[["self"],["usize"],["isize"]],["self"]]],[11,"add","","",65,[[["self"],["self"]],["self"]]],[11,"sub","","",65,[[["self"],["self"]],["self"]]],[11,"mul","","",65,[[["self"],["self"]],["self"]]],[11,"div","","",65,[[["self"],["self"]],["self"]]],[11,"rem","","",65,[[["self"],["self"]],["self"]]],[11,"add_assign","","",65,[[["self"],["self"]]]],[11,"sub_assign","","",65,[[["self"],["self"]]]],[11,"mul_assign","","",65,[[["self"],["self"]]]],[11,"div_assign","","",65,[[["self"],["self"]]]],[11,"rem_assign","","",65,[[["self"],["self"]]]],[11,"add","","",65,[[["self"],["isize"]],["self"]]],[11,"sub","","",65,[[["self"],["isize"]],["self"]]],[11,"mul","","",65,[[["self"],["isize"]],["self"]]],[11,"div","","",65,[[["self"],["isize"]],["self"]]],[11,"rem","","",65,[[["self"],["isize"]],["self"]]],[11,"add_assign","","",65,[[["self"],["isize"]]]],[11,"sub_assign","","",65,[[["self"],["isize"]]]],[11,"mul_assign","","",65,[[["self"],["isize"]]]],[11,"div_assign","","",65,[[["self"],["isize"]]]],[11,"rem_assign","","",65,[[["self"],["isize"]]]],[11,"not","","",65,[[["self"]],["self"]]],[11,"bitxor","","",65,[[["self"],["self"]],["self"]]],[11,"bitand","","",65,[[["self"],["self"]],["self"]]],[11,"bitor","","",65,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",65,[[["self"],["self"]]]],[11,"bitor_assign","","",65,[[["self"],["self"]]]],[11,"bitxor_assign","","",65,[[["self"],["self"]]]],[11,"bitxor","","",65,[[["self"],["isize"]],["self"]]],[11,"bitand","","",65,[[["self"],["isize"]],["self"]]],[11,"bitor","","",65,[[["self"],["isize"]],["self"]]],[11,"bitand_assign","","",65,[[["self"],["isize"]]]],[11,"bitor_assign","","",65,[[["self"],["isize"]]]],[11,"bitxor_assign","","",65,[[["self"],["isize"]]]],[11,"shl","","",65,[[["self"],["self"]],["self"]]],[11,"shr","","",65,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",65,[[["self"],["self"]]]],[11,"shr_assign","","",65,[[["self"],["self"]]]],[11,"shl","","",65,[[["self"],["u32"]],["self"]]],[11,"shr","","",65,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",65,[[["self"],["u32"]]]],[11,"shr_assign","","",65,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",65,[[["self"],["isizex4"]],["isizex4"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",65,[[["self"],["isizex4"]],["isizex4"]]],[11,"neg","","",65,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",65,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",65,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",65,[[["self"]],["isize"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",65,[[["self"]],["isize"]]],[11,"sum","","",65,[[["i"]],["isizex4"]]],[11,"product","","",65,[[["i"]],["isizex4"]]],[11,"sum","","",65,[[["i"]],["isizex4"]]],[11,"product","","",65,[[["i"]],["isizex4"]]],[11,"max_element","","Largest vector element value.",65,[[["self"]],["isize"]]],[11,"min_element","","Smallest vector element value.",65,[[["self"]],["isize"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",65,[[["self"]],["isize"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",65,[[["self"]],["isize"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",65,[[["self"]],["isize"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"from","","",65,N],[11,"default","","",65,[[],["self"]]],[11,"hash","","",65,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",65,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",65,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",65,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",65,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",65,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",65,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",65,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",65,N],[11,"swap_bytes","","Reverses the byte order of the vector.",65,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",65,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",65,[[["self"]],["self"]]],[11,"eq","","",65,[[["self"],["self"]],["bool"]]],[11,"ne","","",65,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",65,[[["self"],["self"]],["msizex4"]]],[11,"ne","","Lane-wise inequality comparison.",65,[[["self"],["self"]],["msizex4"]]],[11,"lt","","Lane-wise less-than comparison.",65,[[["self"],["self"]],["msizex4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",65,[[["self"],["self"]],["msizex4"]]],[11,"gt","","Lane-wise greater-than comparison.",65,[[["self"],["self"]],["msizex4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",65,[[["self"],["self"]],["msizex4"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",65,[[["self"]],["lexicographicallyordered",["isizex4"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",65,[[["self"]],["lexicographicallyordered",["isizex4"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",66,[[["usize"],["usize"],["usize"],["usize"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",66,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",66,[[["usize"]],["self"]]],[11,"extract","","Extracts the value at `index`.",66,[[["self"],["usize"]],["usize"]]],[11,"extract_unchecked","","Extracts the value at `index`.",66,[[["self"],["usize"]],["usize"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",66,[[["self"],["usize"],["usize"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",66,[[["self"],["usize"],["usize"]],["self"]]],[11,"add","","",66,[[["self"],["self"]],["self"]]],[11,"sub","","",66,[[["self"],["self"]],["self"]]],[11,"mul","","",66,[[["self"],["self"]],["self"]]],[11,"div","","",66,[[["self"],["self"]],["self"]]],[11,"rem","","",66,[[["self"],["self"]],["self"]]],[11,"add_assign","","",66,[[["self"],["self"]]]],[11,"sub_assign","","",66,[[["self"],["self"]]]],[11,"mul_assign","","",66,[[["self"],["self"]]]],[11,"div_assign","","",66,[[["self"],["self"]]]],[11,"rem_assign","","",66,[[["self"],["self"]]]],[11,"add","","",66,[[["self"],["usize"]],["self"]]],[11,"sub","","",66,[[["self"],["usize"]],["self"]]],[11,"mul","","",66,[[["self"],["usize"]],["self"]]],[11,"div","","",66,[[["self"],["usize"]],["self"]]],[11,"rem","","",66,[[["self"],["usize"]],["self"]]],[11,"add_assign","","",66,[[["self"],["usize"]]]],[11,"sub_assign","","",66,[[["self"],["usize"]]]],[11,"mul_assign","","",66,[[["self"],["usize"]]]],[11,"div_assign","","",66,[[["self"],["usize"]]]],[11,"rem_assign","","",66,[[["self"],["usize"]]]],[11,"not","","",66,[[["self"]],["self"]]],[11,"bitxor","","",66,[[["self"],["self"]],["self"]]],[11,"bitand","","",66,[[["self"],["self"]],["self"]]],[11,"bitor","","",66,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",66,[[["self"],["self"]]]],[11,"bitor_assign","","",66,[[["self"],["self"]]]],[11,"bitxor_assign","","",66,[[["self"],["self"]]]],[11,"bitxor","","",66,[[["self"],["usize"]],["self"]]],[11,"bitand","","",66,[[["self"],["usize"]],["self"]]],[11,"bitor","","",66,[[["self"],["usize"]],["self"]]],[11,"bitand_assign","","",66,[[["self"],["usize"]]]],[11,"bitor_assign","","",66,[[["self"],["usize"]]]],[11,"bitxor_assign","","",66,[[["self"],["usize"]]]],[11,"shl","","",66,[[["self"],["self"]],["self"]]],[11,"shr","","",66,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",66,[[["self"],["self"]]]],[11,"shr_assign","","",66,[[["self"],["self"]]]],[11,"shl","","",66,[[["self"],["u32"]],["self"]]],[11,"shr","","",66,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",66,[[["self"],["u32"]]]],[11,"shr_assign","","",66,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",66,[[["self"],["usizex4"]],["usizex4"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",66,[[["self"],["usizex4"]],["usizex4"]]],[11,"min","","Minimum of two vectors.",66,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",66,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",66,[[["self"]],["usize"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",66,[[["self"]],["usize"]]],[11,"sum","","",66,[[["i"]],["usizex4"]]],[11,"product","","",66,[[["i"]],["usizex4"]]],[11,"sum","","",66,[[["i"]],["usizex4"]]],[11,"product","","",66,[[["i"]],["usizex4"]]],[11,"max_element","","Largest vector element value.",66,[[["self"]],["usize"]]],[11,"min_element","","Smallest vector element value.",66,[[["self"]],["usize"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",66,[[["self"]],["usize"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",66,[[["self"]],["usize"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",66,[[["self"]],["usize"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"from","","",66,N],[11,"default","","",66,[[],["self"]]],[11,"hash","","",66,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",66,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",66,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",66,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",66,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",66,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",66,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",66,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",66,N],[11,"swap_bytes","","Reverses the byte order of the vector.",66,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",66,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",66,[[["self"]],["self"]]],[11,"shuffle1_dyn","","Shuffle vector elements according to `indices`.",66,[[["self"],["self"]],["self"]]],[11,"eq","","",66,[[["self"],["self"]],["bool"]]],[11,"ne","","",66,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",66,[[["self"],["self"]],["msizex4"]]],[11,"ne","","Lane-wise inequality comparison.",66,[[["self"],["self"]],["msizex4"]]],[11,"lt","","Lane-wise less-than comparison.",66,[[["self"],["self"]],["msizex4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",66,[[["self"],["self"]],["msizex4"]]],[11,"gt","","Lane-wise greater-than comparison.",66,[[["self"],["self"]],["msizex4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",66,[[["self"],["self"]],["msizex4"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",66,[[["self"]],["lexicographicallyordered",["usizex4"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",66,[[["self"]],["lexicographicallyordered",["usizex4"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",67,[[["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",67,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",67,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",67,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",67,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",67,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",67,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",67,[[["self"]],["self"]]],[11,"bitxor","","",67,[[["self"],["self"]],["self"]]],[11,"bitand","","",67,[[["self"],["self"]],["self"]]],[11,"bitor","","",67,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",67,[[["self"],["self"]]]],[11,"bitor_assign","","",67,[[["self"],["self"]]]],[11,"bitxor_assign","","",67,[[["self"],["self"]]]],[11,"bitxor","","",67,[[["self"],["bool"]],["self"]]],[11,"bitand","","",67,[[["self"],["bool"]],["self"]]],[11,"bitor","","",67,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",67,[[["self"],["bool"]]]],[11,"bitor_assign","","",67,[[["self"],["bool"]]]],[11,"bitxor_assign","","",67,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",67,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",67,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",67,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",67,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",67,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",67,[[["self"]],["bool"]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"from","","",67,N],[11,"default","","",67,[[],["self"]]],[11,"eq","","",67,[[["self"],["self"]],["bool"]]],[11,"ne","","",67,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",67,[[["self"],["self"]],["msizex4"]]],[11,"ne","","Lane-wise inequality comparison.",67,[[["self"],["self"]],["msizex4"]]],[11,"lt","","Lane-wise less-than comparison.",67,[[["self"],["self"]],["msizex4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",67,[[["self"],["self"]],["msizex4"]]],[11,"gt","","Lane-wise greater-than comparison.",67,[[["self"],["self"]],["msizex4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",67,[[["self"],["self"]],["msizex4"]]],[11,"select","","Selects elements of `a` and `b` using mask.",67,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",67,[[["self"]],["lexicographicallyordered",["msizex4"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",67,[[["self"]],["lexicographicallyordered",["msizex4"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",85,[[["isize"],["isize"],["isize"],["isize"],["isize"],["isize"],["isize"],["isize"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",85,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",85,[[["isize"]],["self"]]],[11,"extract","","Extracts the value at `index`.",85,[[["self"],["usize"]],["isize"]]],[11,"extract_unchecked","","Extracts the value at `index`.",85,[[["self"],["usize"]],["isize"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",85,[[["self"],["usize"],["isize"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",85,[[["self"],["usize"],["isize"]],["self"]]],[11,"add","","",85,[[["self"],["self"]],["self"]]],[11,"sub","","",85,[[["self"],["self"]],["self"]]],[11,"mul","","",85,[[["self"],["self"]],["self"]]],[11,"div","","",85,[[["self"],["self"]],["self"]]],[11,"rem","","",85,[[["self"],["self"]],["self"]]],[11,"add_assign","","",85,[[["self"],["self"]]]],[11,"sub_assign","","",85,[[["self"],["self"]]]],[11,"mul_assign","","",85,[[["self"],["self"]]]],[11,"div_assign","","",85,[[["self"],["self"]]]],[11,"rem_assign","","",85,[[["self"],["self"]]]],[11,"add","","",85,[[["self"],["isize"]],["self"]]],[11,"sub","","",85,[[["self"],["isize"]],["self"]]],[11,"mul","","",85,[[["self"],["isize"]],["self"]]],[11,"div","","",85,[[["self"],["isize"]],["self"]]],[11,"rem","","",85,[[["self"],["isize"]],["self"]]],[11,"add_assign","","",85,[[["self"],["isize"]]]],[11,"sub_assign","","",85,[[["self"],["isize"]]]],[11,"mul_assign","","",85,[[["self"],["isize"]]]],[11,"div_assign","","",85,[[["self"],["isize"]]]],[11,"rem_assign","","",85,[[["self"],["isize"]]]],[11,"not","","",85,[[["self"]],["self"]]],[11,"bitxor","","",85,[[["self"],["self"]],["self"]]],[11,"bitand","","",85,[[["self"],["self"]],["self"]]],[11,"bitor","","",85,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",85,[[["self"],["self"]]]],[11,"bitor_assign","","",85,[[["self"],["self"]]]],[11,"bitxor_assign","","",85,[[["self"],["self"]]]],[11,"bitxor","","",85,[[["self"],["isize"]],["self"]]],[11,"bitand","","",85,[[["self"],["isize"]],["self"]]],[11,"bitor","","",85,[[["self"],["isize"]],["self"]]],[11,"bitand_assign","","",85,[[["self"],["isize"]]]],[11,"bitor_assign","","",85,[[["self"],["isize"]]]],[11,"bitxor_assign","","",85,[[["self"],["isize"]]]],[11,"shl","","",85,[[["self"],["self"]],["self"]]],[11,"shr","","",85,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",85,[[["self"],["self"]]]],[11,"shr_assign","","",85,[[["self"],["self"]]]],[11,"shl","","",85,[[["self"],["u32"]],["self"]]],[11,"shr","","",85,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",85,[[["self"],["u32"]]]],[11,"shr_assign","","",85,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",85,[[["self"],["isizex8"]],["isizex8"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",85,[[["self"],["isizex8"]],["isizex8"]]],[11,"neg","","",85,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",85,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",85,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",85,[[["self"]],["isize"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",85,[[["self"]],["isize"]]],[11,"sum","","",85,[[["i"]],["isizex8"]]],[11,"product","","",85,[[["i"]],["isizex8"]]],[11,"sum","","",85,[[["i"]],["isizex8"]]],[11,"product","","",85,[[["i"]],["isizex8"]]],[11,"max_element","","Largest vector element value.",85,[[["self"]],["isize"]]],[11,"min_element","","Smallest vector element value.",85,[[["self"]],["isize"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",85,[[["self"]],["isize"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",85,[[["self"]],["isize"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",85,[[["self"]],["isize"]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"from","","",85,N],[11,"default","","",85,[[],["self"]]],[11,"hash","","",85,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",85,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",85,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",85,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",85,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",85,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",85,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",85,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",85,N],[11,"swap_bytes","","Reverses the byte order of the vector.",85,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",85,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",85,[[["self"]],["self"]]],[11,"eq","","",85,[[["self"],["self"]],["bool"]]],[11,"ne","","",85,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",85,[[["self"],["self"]],["msizex8"]]],[11,"ne","","Lane-wise inequality comparison.",85,[[["self"],["self"]],["msizex8"]]],[11,"lt","","Lane-wise less-than comparison.",85,[[["self"],["self"]],["msizex8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",85,[[["self"],["self"]],["msizex8"]]],[11,"gt","","Lane-wise greater-than comparison.",85,[[["self"],["self"]],["msizex8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",85,[[["self"],["self"]],["msizex8"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",85,[[["self"]],["lexicographicallyordered",["isizex8"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",85,[[["self"]],["lexicographicallyordered",["isizex8"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",86,[[["usize"],["usize"],["usize"],["usize"],["usize"],["usize"],["usize"],["usize"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",86,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",86,[[["usize"]],["self"]]],[11,"extract","","Extracts the value at `index`.",86,[[["self"],["usize"]],["usize"]]],[11,"extract_unchecked","","Extracts the value at `index`.",86,[[["self"],["usize"]],["usize"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",86,[[["self"],["usize"],["usize"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",86,[[["self"],["usize"],["usize"]],["self"]]],[11,"add","","",86,[[["self"],["self"]],["self"]]],[11,"sub","","",86,[[["self"],["self"]],["self"]]],[11,"mul","","",86,[[["self"],["self"]],["self"]]],[11,"div","","",86,[[["self"],["self"]],["self"]]],[11,"rem","","",86,[[["self"],["self"]],["self"]]],[11,"add_assign","","",86,[[["self"],["self"]]]],[11,"sub_assign","","",86,[[["self"],["self"]]]],[11,"mul_assign","","",86,[[["self"],["self"]]]],[11,"div_assign","","",86,[[["self"],["self"]]]],[11,"rem_assign","","",86,[[["self"],["self"]]]],[11,"add","","",86,[[["self"],["usize"]],["self"]]],[11,"sub","","",86,[[["self"],["usize"]],["self"]]],[11,"mul","","",86,[[["self"],["usize"]],["self"]]],[11,"div","","",86,[[["self"],["usize"]],["self"]]],[11,"rem","","",86,[[["self"],["usize"]],["self"]]],[11,"add_assign","","",86,[[["self"],["usize"]]]],[11,"sub_assign","","",86,[[["self"],["usize"]]]],[11,"mul_assign","","",86,[[["self"],["usize"]]]],[11,"div_assign","","",86,[[["self"],["usize"]]]],[11,"rem_assign","","",86,[[["self"],["usize"]]]],[11,"not","","",86,[[["self"]],["self"]]],[11,"bitxor","","",86,[[["self"],["self"]],["self"]]],[11,"bitand","","",86,[[["self"],["self"]],["self"]]],[11,"bitor","","",86,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",86,[[["self"],["self"]]]],[11,"bitor_assign","","",86,[[["self"],["self"]]]],[11,"bitxor_assign","","",86,[[["self"],["self"]]]],[11,"bitxor","","",86,[[["self"],["usize"]],["self"]]],[11,"bitand","","",86,[[["self"],["usize"]],["self"]]],[11,"bitor","","",86,[[["self"],["usize"]],["self"]]],[11,"bitand_assign","","",86,[[["self"],["usize"]]]],[11,"bitor_assign","","",86,[[["self"],["usize"]]]],[11,"bitxor_assign","","",86,[[["self"],["usize"]]]],[11,"shl","","",86,[[["self"],["self"]],["self"]]],[11,"shr","","",86,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",86,[[["self"],["self"]]]],[11,"shr_assign","","",86,[[["self"],["self"]]]],[11,"shl","","",86,[[["self"],["u32"]],["self"]]],[11,"shr","","",86,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",86,[[["self"],["u32"]]]],[11,"shr_assign","","",86,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",86,[[["self"],["usizex8"]],["usizex8"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",86,[[["self"],["usizex8"]],["usizex8"]]],[11,"min","","Minimum of two vectors.",86,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",86,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",86,[[["self"]],["usize"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",86,[[["self"]],["usize"]]],[11,"sum","","",86,[[["i"]],["usizex8"]]],[11,"product","","",86,[[["i"]],["usizex8"]]],[11,"sum","","",86,[[["i"]],["usizex8"]]],[11,"product","","",86,[[["i"]],["usizex8"]]],[11,"max_element","","Largest vector element value.",86,[[["self"]],["usize"]]],[11,"min_element","","Smallest vector element value.",86,[[["self"]],["usize"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",86,[[["self"]],["usize"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",86,[[["self"]],["usize"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",86,[[["self"]],["usize"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"from","","",86,N],[11,"default","","",86,[[],["self"]]],[11,"hash","","",86,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",86,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",86,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",86,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",86,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",86,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",86,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",86,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",86,N],[11,"swap_bytes","","Reverses the byte order of the vector.",86,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",86,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",86,[[["self"]],["self"]]],[11,"shuffle1_dyn","","Shuffle vector elements according to `indices`.",86,[[["self"],["self"]],["self"]]],[11,"eq","","",86,[[["self"],["self"]],["bool"]]],[11,"ne","","",86,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",86,[[["self"],["self"]],["msizex8"]]],[11,"ne","","Lane-wise inequality comparison.",86,[[["self"],["self"]],["msizex8"]]],[11,"lt","","Lane-wise less-than comparison.",86,[[["self"],["self"]],["msizex8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",86,[[["self"],["self"]],["msizex8"]]],[11,"gt","","Lane-wise greater-than comparison.",86,[[["self"],["self"]],["msizex8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",86,[[["self"],["self"]],["msizex8"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",86,[[["self"]],["lexicographicallyordered",["usizex8"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",86,[[["self"]],["lexicographicallyordered",["usizex8"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",87,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",87,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",87,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",87,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",87,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",87,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",87,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",87,[[["self"]],["self"]]],[11,"bitxor","","",87,[[["self"],["self"]],["self"]]],[11,"bitand","","",87,[[["self"],["self"]],["self"]]],[11,"bitor","","",87,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",87,[[["self"],["self"]]]],[11,"bitor_assign","","",87,[[["self"],["self"]]]],[11,"bitxor_assign","","",87,[[["self"],["self"]]]],[11,"bitxor","","",87,[[["self"],["bool"]],["self"]]],[11,"bitand","","",87,[[["self"],["bool"]],["self"]]],[11,"bitor","","",87,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",87,[[["self"],["bool"]]]],[11,"bitor_assign","","",87,[[["self"],["bool"]]]],[11,"bitxor_assign","","",87,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",87,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",87,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",87,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",87,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",87,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",87,[[["self"]],["bool"]]],[11,"fmt","","",87,[[["self"],["formatter"]],["result"]]],[11,"from","","",87,N],[11,"default","","",87,[[],["self"]]],[11,"eq","","",87,[[["self"],["self"]],["bool"]]],[11,"ne","","",87,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",87,[[["self"],["self"]],["msizex8"]]],[11,"ne","","Lane-wise inequality comparison.",87,[[["self"],["self"]],["msizex8"]]],[11,"lt","","Lane-wise less-than comparison.",87,[[["self"],["self"]],["msizex8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",87,[[["self"],["self"]],["msizex8"]]],[11,"gt","","Lane-wise greater-than comparison.",87,[[["self"],["self"]],["msizex8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",87,[[["self"],["self"]],["msizex8"]]],[11,"select","","Selects elements of `a` and `b` using mask.",87,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_lex_ord","","Returns a wrapper that implements `PartialOrd`.",87,[[["self"]],["lexicographicallyordered",["msizex8"]]]],[11,"lex_ord","","Returns a wrapper that implements `Ord`.",87,[[["self"]],["lexicographicallyordered",["msizex8"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",91,N],[11,"lanes","","Returns the number of vector lanes.",91,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",91,N],[11,"null","","Constructs a new instance with each element initialized to `null`.",91,[[],["self"]]],[11,"is_null","","Returns a mask that selects those lanes that contain `null` pointers.",91,[[["self"]],["msizex2"]]],[11,"extract","","Extracts the value at `index`.",91,N],[11,"extract_unchecked","","Extracts the value at `index`.",91,N],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",91,N],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",91,N],[11,"fmt","","",91,[[["self"],["formatter"]],["result"]]],[11,"default","","",91,[[],["self"]]],[11,"eq","","Lane-wise equality comparison.",91,[[["self"],["self"]],["msizex2"]]],[11,"ne","","Lane-wise inequality comparison.",91,[[["self"],["self"]],["msizex2"]]],[11,"lt","","Lane-wise less-than comparison.",91,[[["self"],["self"]],["msizex2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",91,[[["self"],["self"]],["msizex2"]]],[11,"gt","","Lane-wise greater-than comparison.",91,[[["self"],["self"]],["msizex2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",91,[[["self"],["self"]],["msizex2"]]],[11,"eq","","",91,[[["self"],["self"]],["bool"]]],[11,"ne","","",91,[[["self"],["self"]],["bool"]]],[11,"from","","",91,N],[11,"into","","",91,N],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",91,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",91,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",91,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",91,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",91,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",91,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",91,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",91,N],[11,"hash","","",91,[[["self"],["h"]]]],[11,"offset","","Calculates the offset from a pointer.",91,[[["self"],["isizex2"]],["self"]]],[11,"wrapping_offset","","Calculates the offset from a pointer using wrapping arithmetic.",91,[[["self"],["isizex2"]],["self"]]],[11,"offset_from","","Calculates the distance between two pointers.",91,[[["self"],["self"]],["isizex2"]]],[11,"wrapping_offset_from","","Calculates the distance between two pointers.",91,[[["self"],["self"]],["isizex2"]]],[11,"add","","Calculates the offset from a pointer (convenience for `.offset(count as isize)`).",91,[[["self"],["usizex2"]],["self"]]],[11,"sub","","Calculates the offset from a pointer (convenience for `.offset((count as isize).wrapping_neg())`).",91,[[["self"],["usizex2"]],["self"]]],[11,"wrapping_add","","Calculates the offset from a pointer using wrapping arithmetic. (convenience for `.wrapping_offset(count as isize)`)",91,[[["self"],["usizex2"]],["self"]]],[11,"wrapping_sub","","Calculates the offset from a pointer using wrapping arithmetic. (convenience for `.wrapping_offset((count as isize).wrapping_sub())`)",91,[[["self"],["usizex2"]],["self"]]],[11,"read","","Reads selected vector elements from memory.",91,[[["self"],["simd"],["simd"]],["simd"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",92,N],[11,"lanes","","Returns the number of vector lanes.",92,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",92,N],[11,"null","","Constructs a new instance with each element initialized to `null`.",92,[[],["self"]]],[11,"is_null","","Returns a mask that selects those lanes that contain `null` pointers.",92,[[["self"]],["msizex2"]]],[11,"extract","","Extracts the value at `index`.",92,N],[11,"extract_unchecked","","Extracts the value at `index`.",92,N],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",92,N],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",92,N],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[11,"default","","",92,[[],["self"]]],[11,"eq","","Lane-wise equality comparison.",92,[[["self"],["self"]],["msizex2"]]],[11,"ne","","Lane-wise inequality comparison.",92,[[["self"],["self"]],["msizex2"]]],[11,"lt","","Lane-wise less-than comparison.",92,[[["self"],["self"]],["msizex2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",92,[[["self"],["self"]],["msizex2"]]],[11,"gt","","Lane-wise greater-than comparison.",92,[[["self"],["self"]],["msizex2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",92,[[["self"],["self"]],["msizex2"]]],[11,"eq","","",92,[[["self"],["self"]],["bool"]]],[11,"ne","","",92,[[["self"],["self"]],["bool"]]],[11,"from","","",92,N],[11,"into","","",92,N],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",92,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",92,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",92,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",92,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",92,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",92,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",92,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",92,N],[11,"hash","","",92,[[["self"],["h"]]]],[11,"offset","","Calculates the offset from a pointer.",92,[[["self"],["isizex2"]],["self"]]],[11,"wrapping_offset","","Calculates the offset from a pointer using wrapping arithmetic.",92,[[["self"],["isizex2"]],["self"]]],[11,"offset_from","","Calculates the distance between two pointers.",92,[[["self"],["self"]],["isizex2"]]],[11,"wrapping_offset_from","","Calculates the distance between two pointers.",92,[[["self"],["self"]],["isizex2"]]],[11,"add","","Calculates the offset from a pointer (convenience for `.offset(count as isize)`).",92,[[["self"],["usizex2"]],["self"]]],[11,"sub","","Calculates the offset from a pointer (convenience for `.offset((count as isize).wrapping_neg())`).",92,[[["self"],["usizex2"]],["self"]]],[11,"wrapping_add","","Calculates the offset from a pointer using wrapping arithmetic. (convenience for `.wrapping_offset(count as isize)`)",92,[[["self"],["usizex2"]],["self"]]],[11,"wrapping_sub","","Calculates the offset from a pointer using wrapping arithmetic. (convenience for `.wrapping_offset((count as isize).wrapping_sub())`)",92,[[["self"],["usizex2"]],["self"]]],[11,"read","","Reads selected vector elements from memory.",92,[[["self"],["simd"],["simd"]],["simd"]]],[11,"write","","Writes selected vector elements to memory.",92,[[["self"],["simd"],["simd"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",93,N],[11,"lanes","","Returns the number of vector lanes.",93,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",93,N],[11,"null","","Constructs a new instance with each element initialized to `null`.",93,[[],["self"]]],[11,"is_null","","Returns a mask that selects those lanes that contain `null` pointers.",93,[[["self"]],["msizex4"]]],[11,"extract","","Extracts the value at `index`.",93,N],[11,"extract_unchecked","","Extracts the value at `index`.",93,N],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",93,N],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",93,N],[11,"fmt","","",93,[[["self"],["formatter"]],["result"]]],[11,"default","","",93,[[],["self"]]],[11,"eq","","Lane-wise equality comparison.",93,[[["self"],["self"]],["msizex4"]]],[11,"ne","","Lane-wise inequality comparison.",93,[[["self"],["self"]],["msizex4"]]],[11,"lt","","Lane-wise less-than comparison.",93,[[["self"],["self"]],["msizex4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",93,[[["self"],["self"]],["msizex4"]]],[11,"gt","","Lane-wise greater-than comparison.",93,[[["self"],["self"]],["msizex4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",93,[[["self"],["self"]],["msizex4"]]],[11,"eq","","",93,[[["self"],["self"]],["bool"]]],[11,"ne","","",93,[[["self"],["self"]],["bool"]]],[11,"from","","",93,N],[11,"into","","",93,N],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",93,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",93,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",93,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",93,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",93,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",93,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",93,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",93,N],[11,"hash","","",93,[[["self"],["h"]]]],[11,"offset","","Calculates the offset from a pointer.",93,[[["self"],["isizex4"]],["self"]]],[11,"wrapping_offset","","Calculates the offset from a pointer using wrapping arithmetic.",93,[[["self"],["isizex4"]],["self"]]],[11,"offset_from","","Calculates the distance between two pointers.",93,[[["self"],["self"]],["isizex4"]]],[11,"wrapping_offset_from","","Calculates the distance between two pointers.",93,[[["self"],["self"]],["isizex4"]]],[11,"add","","Calculates the offset from a pointer (convenience for `.offset(count as isize)`).",93,[[["self"],["usizex4"]],["self"]]],[11,"sub","","Calculates the offset from a pointer (convenience for `.offset((count as isize).wrapping_neg())`).",93,[[["self"],["usizex4"]],["self"]]],[11,"wrapping_add","","Calculates the offset from a pointer using wrapping arithmetic. (convenience for `.wrapping_offset(count as isize)`)",93,[[["self"],["usizex4"]],["self"]]],[11,"wrapping_sub","","Calculates the offset from a pointer using wrapping arithmetic. (convenience for `.wrapping_offset((count as isize).wrapping_sub())`)",93,[[["self"],["usizex4"]],["self"]]],[11,"read","","Reads selected vector elements from memory.",93,[[["self"],["simd"],["simd"]],["simd"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",94,N],[11,"lanes","","Returns the number of vector lanes.",94,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",94,N],[11,"null","","Constructs a new instance with each element initialized to `null`.",94,[[],["self"]]],[11,"is_null","","Returns a mask that selects those lanes that contain `null` pointers.",94,[[["self"]],["msizex4"]]],[11,"extract","","Extracts the value at `index`.",94,N],[11,"extract_unchecked","","Extracts the value at `index`.",94,N],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",94,N],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",94,N],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"default","","",94,[[],["self"]]],[11,"eq","","Lane-wise equality comparison.",94,[[["self"],["self"]],["msizex4"]]],[11,"ne","","Lane-wise inequality comparison.",94,[[["self"],["self"]],["msizex4"]]],[11,"lt","","Lane-wise less-than comparison.",94,[[["self"],["self"]],["msizex4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",94,[[["self"],["self"]],["msizex4"]]],[11,"gt","","Lane-wise greater-than comparison.",94,[[["self"],["self"]],["msizex4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",94,[[["self"],["self"]],["msizex4"]]],[11,"eq","","",94,[[["self"],["self"]],["bool"]]],[11,"ne","","",94,[[["self"],["self"]],["bool"]]],[11,"from","","",94,N],[11,"into","","",94,N],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",94,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",94,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",94,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",94,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",94,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",94,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",94,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",94,N],[11,"hash","","",94,[[["self"],["h"]]]],[11,"offset","","Calculates the offset from a pointer.",94,[[["self"],["isizex4"]],["self"]]],[11,"wrapping_offset","","Calculates the offset from a pointer using wrapping arithmetic.",94,[[["self"],["isizex4"]],["self"]]],[11,"offset_from","","Calculates the distance between two pointers.",94,[[["self"],["self"]],["isizex4"]]],[11,"wrapping_offset_from","","Calculates the distance between two pointers.",94,[[["self"],["self"]],["isizex4"]]],[11,"add","","Calculates the offset from a pointer (convenience for `.offset(count as isize)`).",94,[[["self"],["usizex4"]],["self"]]],[11,"sub","","Calculates the offset from a pointer (convenience for `.offset((count as isize).wrapping_neg())`).",94,[[["self"],["usizex4"]],["self"]]],[11,"wrapping_add","","Calculates the offset from a pointer using wrapping arithmetic. (convenience for `.wrapping_offset(count as isize)`)",94,[[["self"],["usizex4"]],["self"]]],[11,"wrapping_sub","","Calculates the offset from a pointer using wrapping arithmetic. (convenience for `.wrapping_offset((count as isize).wrapping_sub())`)",94,[[["self"],["usizex4"]],["self"]]],[11,"read","","Reads selected vector elements from memory.",94,[[["self"],["simd"],["simd"]],["simd"]]],[11,"write","","Writes selected vector elements to memory.",94,[[["self"],["simd"],["simd"]]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",95,N],[11,"lanes","","Returns the number of vector lanes.",95,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",95,N],[11,"null","","Constructs a new instance with each element initialized to `null`.",95,[[],["self"]]],[11,"is_null","","Returns a mask that selects those lanes that contain `null` pointers.",95,[[["self"]],["msizex8"]]],[11,"extract","","Extracts the value at `index`.",95,N],[11,"extract_unchecked","","Extracts the value at `index`.",95,N],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",95,N],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",95,N],[11,"fmt","","",95,[[["self"],["formatter"]],["result"]]],[11,"default","","",95,[[],["self"]]],[11,"eq","","Lane-wise equality comparison.",95,[[["self"],["self"]],["msizex8"]]],[11,"ne","","Lane-wise inequality comparison.",95,[[["self"],["self"]],["msizex8"]]],[11,"lt","","Lane-wise less-than comparison.",95,[[["self"],["self"]],["msizex8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",95,[[["self"],["self"]],["msizex8"]]],[11,"gt","","Lane-wise greater-than comparison.",95,[[["self"],["self"]],["msizex8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",95,[[["self"],["self"]],["msizex8"]]],[11,"eq","","",95,[[["self"],["self"]],["bool"]]],[11,"ne","","",95,[[["self"],["self"]],["bool"]]],[11,"from","","",95,N],[11,"into","","",95,N],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",95,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",95,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",95,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",95,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",95,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",95,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",95,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",95,N],[11,"hash","","",95,[[["self"],["h"]]]],[11,"offset","","Calculates the offset from a pointer.",95,[[["self"],["isizex8"]],["self"]]],[11,"wrapping_offset","","Calculates the offset from a pointer using wrapping arithmetic.",95,[[["self"],["isizex8"]],["self"]]],[11,"offset_from","","Calculates the distance between two pointers.",95,[[["self"],["self"]],["isizex8"]]],[11,"wrapping_offset_from","","Calculates the distance between two pointers.",95,[[["self"],["self"]],["isizex8"]]],[11,"add","","Calculates the offset from a pointer (convenience for `.offset(count as isize)`).",95,[[["self"],["usizex8"]],["self"]]],[11,"sub","","Calculates the offset from a pointer (convenience for `.offset((count as isize).wrapping_neg())`).",95,[[["self"],["usizex8"]],["self"]]],[11,"wrapping_add","","Calculates the offset from a pointer using wrapping arithmetic. (convenience for `.wrapping_offset(count as isize)`)",95,[[["self"],["usizex8"]],["self"]]],[11,"wrapping_sub","","Calculates the offset from a pointer using wrapping arithmetic. (convenience for `.wrapping_offset((count as isize).wrapping_sub())`)",95,[[["self"],["usizex8"]],["self"]]],[11,"read","","Reads selected vector elements from memory.",95,[[["self"],["simd"],["simd"]],["simd"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",96,N],[11,"lanes","","Returns the number of vector lanes.",96,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",96,N],[11,"null","","Constructs a new instance with each element initialized to `null`.",96,[[],["self"]]],[11,"is_null","","Returns a mask that selects those lanes that contain `null` pointers.",96,[[["self"]],["msizex8"]]],[11,"extract","","Extracts the value at `index`.",96,N],[11,"extract_unchecked","","Extracts the value at `index`.",96,N],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",96,N],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",96,N],[11,"fmt","","",96,[[["self"],["formatter"]],["result"]]],[11,"default","","",96,[[],["self"]]],[11,"eq","","Lane-wise equality comparison.",96,[[["self"],["self"]],["msizex8"]]],[11,"ne","","Lane-wise inequality comparison.",96,[[["self"],["self"]],["msizex8"]]],[11,"lt","","Lane-wise less-than comparison.",96,[[["self"],["self"]],["msizex8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",96,[[["self"],["self"]],["msizex8"]]],[11,"gt","","Lane-wise greater-than comparison.",96,[[["self"],["self"]],["msizex8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",96,[[["self"],["self"]],["msizex8"]]],[11,"eq","","",96,[[["self"],["self"]],["bool"]]],[11,"ne","","",96,[[["self"],["self"]],["bool"]]],[11,"from","","",96,N],[11,"into","","",96,N],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",96,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",96,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",96,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",96,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",96,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",96,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",96,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",96,N],[11,"hash","","",96,[[["self"],["h"]]]],[11,"offset","","Calculates the offset from a pointer.",96,[[["self"],["isizex8"]],["self"]]],[11,"wrapping_offset","","Calculates the offset from a pointer using wrapping arithmetic.",96,[[["self"],["isizex8"]],["self"]]],[11,"offset_from","","Calculates the distance between two pointers.",96,[[["self"],["self"]],["isizex8"]]],[11,"wrapping_offset_from","","Calculates the distance between two pointers.",96,[[["self"],["self"]],["isizex8"]]],[11,"add","","Calculates the offset from a pointer (convenience for `.offset(count as isize)`).",96,[[["self"],["usizex8"]],["self"]]],[11,"sub","","Calculates the offset from a pointer (convenience for `.offset((count as isize).wrapping_neg())`).",96,[[["self"],["usizex8"]],["self"]]],[11,"wrapping_add","","Calculates the offset from a pointer using wrapping arithmetic. (convenience for `.wrapping_offset(count as isize)`)",96,[[["self"],["usizex8"]],["self"]]],[11,"wrapping_sub","","Calculates the offset from a pointer using wrapping arithmetic. (convenience for `.wrapping_offset((count as isize).wrapping_sub())`)",96,[[["self"],["usizex8"]],["self"]]],[11,"read","","Reads selected vector elements from memory.",96,[[["self"],["simd"],["simd"]],["simd"]]],[11,"write","","Writes selected vector elements to memory.",96,[[["self"],["simd"],["simd"]]]]],"paths":[[3,"m8"],[3,"m16"],[3,"m32"],[3,"m64"],[3,"m128"],[3,"msize"],[3,"LexicographicallyOrdered"],[8,"FromCast"],[8,"Cast"],[8,"FromBits"],[8,"IntoBits"],[3,"Simd"],[6,"i8x2"],[6,"u8x2"],[6,"m8x2"],[6,"i8x4"],[6,"u8x4"],[6,"m8x4"],[6,"i16x2"],[6,"u16x2"],[6,"m16x2"],[6,"i8x8"],[6,"u8x8"],[6,"m8x8"],[6,"i16x4"],[6,"u16x4"],[6,"m16x4"],[6,"i32x2"],[6,"u32x2"],[6,"f32x2"],[6,"m32x2"],[6,"i8x16"],[6,"u8x16"],[6,"m8x16"],[6,"i16x8"],[6,"u16x8"],[6,"m16x8"],[6,"i32x4"],[6,"u32x4"],[6,"f32x4"],[6,"m32x4"],[6,"i64x2"],[6,"u64x2"],[6,"f64x2"],[6,"m64x2"],[6,"isizex2"],[6,"usizex2"],[6,"msizex2"],[6,"i8x32"],[6,"u8x32"],[6,"m8x32"],[6,"i16x16"],[6,"u16x16"],[6,"m16x16"],[6,"i32x8"],[6,"u32x8"],[6,"f32x8"],[6,"m32x8"],[6,"i64x4"],[6,"u64x4"],[6,"f64x4"],[6,"m64x4"],[6,"i128x2"],[6,"u128x2"],[6,"m128x2"],[6,"isizex4"],[6,"usizex4"],[6,"msizex4"],[6,"i8x64"],[6,"u8x64"],[6,"m8x64"],[6,"i16x32"],[6,"u16x32"],[6,"m16x32"],[6,"i32x16"],[6,"u32x16"],[6,"f32x16"],[6,"m32x16"],[6,"i64x8"],[6,"u64x8"],[6,"f64x8"],[6,"m64x8"],[6,"i128x4"],[6,"u128x4"],[6,"m128x4"],[6,"isizex8"],[6,"usizex8"],[6,"msizex8"],[6,"i128x1"],[6,"u128x1"],[6,"m128x1"],[6,"cptrx2"],[6,"mptrx2"],[6,"cptrx4"],[6,"mptrx4"],[6,"cptrx8"],[6,"mptrx8"]]};
initSearch(searchIndex);
